"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_bbn_bbn_cp"] = self["webpackChunk_bbn_bbn_cp"] || []).push([["components/router-_mixins-views-js"],{

/***/ "./src/components/router/_mixins/views.js":
/*!************************************************!*\
  !*** ./src/components/router/_mixins/views.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _bbn_bbn__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @bbn/bbn */ \"./node_modules/@bbn/bbn/dist/index.js\");\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  props: {\n    /**\n     * The views shown at init.\n     * @prop {Array} [[]] source\n     */\n    source: {\n      type: Array,\n      default() {\n        return [];\n      }\n    },\n    maxTotal: {\n      type: Number,\n      default: 25\n    },\n    /**\n     * Decides if real bbn-container are shown before or after the ones in the config or fake container 9bbns-container)\n     * @prop {String} ['real] first\n     */\n    first: {\n      type: String,\n      default: 'real'\n    },\n    /**\n     * Will be passed to router in order to ignore the dirty parameter.\n     * @prop {Boolean} ignoreDirty\n     */\n    ignoreDirty: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    return {\n      /**\n       * The array of containers defined in the source.\n       * @data {Array} cfgViews\n       */\n      cfgViews: [].concat(this.source),\n      /**\n       * The views from the slot.\n       * @data {Array} [[]] slotViews\n       */\n      slotViews: [],\n      /**\n       * All the views.\n       * @data {Array} [[]] views\n      */\n      views: [],\n      /**\n       * The list of the dirty containers.\n       * @data {Array} [[]] dirtyContainers\n       */\n      dirtyContainers: []\n    };\n  },\n  computed: {\n    /**\n     * Returns true if there are any unsaved views.\n     * @computed isDirty\n     * @return {Boolean}\n     */\n    isDirty() {\n      return !!this.dirtyContainers.length;\n    },\n    /**\n     * The views to show in the tabs, without the ones in the pane if splittable\n     * @computed tabsList\n     * @return {Array} \n     */\n    tabsList() {\n      return _bbn_bbn__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fn.multiorder(this.splittable ? _bbn_bbn__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fn.filter(this.views, a => !a.pane) : this.views, {\n        fixed: 'desc',\n        pinned: 'desc',\n        idx: 'asc'\n      });\n    }\n  },\n  methods: {\n    /**\n     * Sets the 'dirtyContainers' property with the list of unsaved views\n     * @method retrieveDirtyContainers\n     */\n    retrieveDirtyContainers() {\n      this.dirtyContainers.splice(0, this.dirtyContainers.length);\n      _bbn_bbn__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fn.iterate(this.urls, v => {\n        if (v.dirty) {\n          this.dirtyContainers.push({\n            idx: v.currentIndex,\n            url: v.url\n          });\n        }\n      });\n    },\n    /**\n    * Returns the default object for the view.\n    * @method getDefaultView\n    * @return {Object}\n    */\n    getDefaultView(...obj) {\n      return _bbn_bbn__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fn.extendOut(_bbn_bbn__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fn.createObject(), ...obj, {\n        source: null,\n        title: _bbn_bbn__WEBPACK_IMPORTED_MODULE_0__[\"default\"]._(\"Untitled\"),\n        options: null,\n        cached: !this.single && this.nav,\n        scrollable: true,\n        component: null,\n        icon: '',\n        notext: false,\n        content: null,\n        menu: [],\n        loaded: null,\n        fcolor: null,\n        bcolor: null,\n        load: false,\n        pane: false,\n        selected: null,\n        css: '',\n        advert: null,\n        dirty: false,\n        help: null,\n        imessages: [],\n        script: null,\n        fixed: false,\n        pinned: false,\n        url: null,\n        current: null,\n        real: false,\n        cfg: {},\n        events: {},\n        real: false,\n        last: 0\n      });\n    },\n    async viewsInit() {\n      let tmp = [];\n      // ---- ADDED 16/12/20 (Mirko) ----\n      // Adding bbns-container from the slot\n      if (this.$slots.default) {\n        for (let item of this.$slots.default) {\n          let node = item.bbnSchema;\n          //bbn.fn.log(\"ROUTER SLOT\", node, '-------------');\n\n          if (!node.comment && ['bbn-container', 'bbns-container'].includes(node?.tag)) {\n            if (node.props.url === undefined) {\n              throw Error(_bbn_bbn__WEBPACK_IMPORTED_MODULE_0__[\"default\"]._(\"You cannot use containers in router without defining a URL property\"));\n            }\n            if (!this.hasRealContainers) {\n              this.hasRealContainers = true;\n            }\n            if (node.props.url === '') {\n              this.hasEmptyURL = true;\n            }\n            const obj = this.getDefaultView(node.props, {\n              real: node.tag === 'bbn-container'\n            });\n            tmp.push(obj);\n          }\n        }\n      }\n      // ---- END ----\n\n      _bbn_bbn__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fn.each(this.source, (a, i) => {\n        if (a.url === '') {\n          if (a.load) {\n            throw Error(_bbn_bbn__WEBPACK_IMPORTED_MODULE_0__[\"default\"]._(\"You cannot use containers with empty URL for loading\"));\n          }\n          this.hasEmptyURL = true;\n        }\n        tmp.push(this.getDefaultView(a, {\n          real: false\n        }));\n      });\n      if (!this.single) {\n        _bbn_bbn__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fn.log(\"LOOKING FOR STORAGE FOR \" + this.baseURL + ' WITH NAME ' + (this.parentContainer ? this.parentContainer.getFullURL() : this.storageName));\n        let storage = this.getStorage(this.parentContainer ? this.parentContainer.getFullURL() : this.storageName);\n        //Get config from the storage\n        if (storage && storage.views && tmp) {\n          _bbn_bbn__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fn.each(storage.views, a => {\n            let idx = _bbn_bbn__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fn.search(tmp, {\n              url: a.url\n            });\n            if (idx > -1) {\n              // Static comes only from configuration\n              let isFixed = tmp[idx].fixed;\n              _bbn_bbn__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fn.extend(tmp[idx], a, {\n                fixed: isFixed\n              });\n            } else if (this.autoload) {\n              tmp.push(this.getDefaultView(a));\n            }\n          });\n        }\n      }\n\n      // Real containers at the end\n      if (this.first !== 'real') {\n        tmp = _bbn_bbn__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fn.multiorder(tmp, {\n          real: 'desc'\n        });\n      }\n      _bbn_bbn__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fn.each(tmp, a => this.add(a));\n    },\n    /**\n     * Removes an element from the views\n     * \n     * @method remove\n     * @param {*} misc Index, URL or element\n     * @param {Boolean} noCfg If set to true will not trigger the storage saving\n     * @fires getIndex\n     * @fires remove\n     * @emit close\n     * @return {Boolean}\n     */\n    async remove(misc, force) {\n      let idx = this.getIndex(misc);\n      if (idx > -1) {\n        /** @var {Event} onBeforeClose beforeClose event, cancelable only if not force */\n        let onBeforeClose = new Event('beforeclose', {\n          cancelable: !force\n        });\n        /** @var {Event} onClose close event, cancelable only if not force */\n        let onClose = new Event('close');\n        this.$emit('beforeclose', idx, onBeforeClose);\n        //bbn.fn.log(\"REMOVING \" + this.views[idx].url)\n        if (force || !onBeforeClose.defaultPrevented) {\n          if (!force && !this.ignoreDirty && this.isDirty && this.views[idx].dirty) {\n            this.confirm(this.confirmLeave, () => {\n              // Looking for dirty ones in registered forms of each container\n              let forms = this.urls[this.views[idx].uid].forms;\n              if (Array.isArray(forms) && forms.length) {\n                _bbn_bbn__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fn.each(forms, (f, k) => {\n                  f.reset();\n                });\n              }\n              return this.close(idx, true);\n            });\n          } else if (this.views[idx] && !this.views[idx].real) {\n            _bbn_bbn__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fn.log([\"ERMOVE FROM ROUTER \" + idx, force]);\n            this.$emit('close', idx, onClose);\n            this.views.splice(idx, 1);\n            _bbn_bbn__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fn.log([\"ERMOVE FROM ROUTER \" + idx, _bbn_bbn__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fn.numProperties(this.urls), this.views.length]);\n            this.fixIndexes();\n            await this.$forceUpdate();\n            await this.$nextTick();\n            return true;\n          }\n        }\n      }\n      return false;\n    },\n    /**\n     * Adds an object with a valid url to the views.\n     * @method add\n     * @param {Object} obj\n     * @param {Number} idx\n     * @fires getFullBaseURL\n     * @fires search\n     * @fires isValidIndex\n     * @fires getDefaultView\n     */\n    async add(obj, idx) {\n      let index;\n      //obj must be an object with property url\n      _bbn_bbn__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fn.checkType(obj, 'object');\n      _bbn_bbn__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fn.checkType(obj.url, 'string');\n      obj.url = _bbn_bbn__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fn.replaceAll('//', '/', obj.url);\n      if (_bbn_bbn__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fn.getRow(this.views, {\n        url: obj.url\n      })) {\n        _bbn_bbn__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fn.log(_bbn_bbn__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fn.getRow(this.views, {\n          url: obj.url\n        }) === obj, obj);\n        throw Error(_bbn_bbn__WEBPACK_IMPORTED_MODULE_0__[\"default\"]._(\"The container already exists\"));\n      }\n      if (obj.uid) {\n        throw Error(_bbn_bbn__WEBPACK_IMPORTED_MODULE_0__[\"default\"]._(\"The object already has a uid\"));\n      }\n      let uid = _bbn_bbn__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fn.randomString(20);\n      while (this.urls[uid]) {\n        uid = _bbn_bbn__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fn.randomString(20);\n      }\n      obj.uid = uid;\n      if (!obj.current) {\n        if (_bbn_bbn__WEBPACK_IMPORTED_MODULE_0__[\"default\"].env.path.indexOf(this.getFullBaseURL() + (obj.url ? obj.url + '/' : '')) === 0) {\n          obj.current = _bbn_bbn__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fn.substr(_bbn_bbn__WEBPACK_IMPORTED_MODULE_0__[\"default\"].env.path, this.getFullBaseURL().length);\n        } else {\n          obj.current = obj.url;\n        }\n      } else if (obj.current !== obj.url && obj.current.indexOf(obj.url + '/') !== 0) {\n        obj.current = obj.url;\n      }\n      if (!obj.current) {\n        obj.current = obj.url;\n      }\n      if (obj.content) {\n        obj.loaded = true;\n      }\n      obj.events = {};\n      if (obj.menu === undefined) {\n        obj.menu = [];\n      }\n      let isValid = this.isValidIndex(idx);\n      obj.idx = isValid ? idx : this.views.length;\n      _bbn_bbn__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fn.iterate(this.getDefaultView(), (a, n) => {\n        if (obj[n] === undefined) {\n          // Each new property must be set with $set\n          this.$set(obj, n, a);\n        }\n      });\n      if (this.single && this.views.length) {\n        let idxNonCached = _bbn_bbn__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fn.search(this.views, {\n          cached: false\n        });\n        if (idxNonCached > -1) {\n          await this.remove(idxNonCached, true);\n          obj.idx = idxNonCached;\n          isValid = false;\n        }\n      }\n      if (isValid) {\n        this.views.splice(obj.idx, 0, obj);\n      } else if (this.hasRealContainers && this.first !== 'real' && !obj.real) {\n        idx = _bbn_bbn__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fn.search(this.views, {\n          real: true\n        });\n        obj.idx = idx;\n        this.views.splice(idx, 0, obj);\n      } else {\n        obj.idx = this.views.length;\n        this.views.push(obj);\n      }\n      if (obj.selected) {\n        this.selected = obj.idx;\n      }\n      this.fixIndexes();\n      return uid;\n    },\n    /**\n    * Moves a container within the router, changes its idx.\n    * \n    * @method move\n    * @param {Number} from The index of the container to move\n    * @param {Number} to   The index to which the container must go\n    * @returns \n    */\n    move(from, to) {\n      if (!_bbn_bbn__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fn.isNumber(from, to) || from === to || !this.views[from] || !this.views[to]) {\n        return;\n      }\n      _bbn_bbn__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fn.move(this.views, from, to);\n      let selectedOk = false;\n      if (from === this.selected) {\n        this.selected = to;\n        selectedOk = true;\n      }\n      for (let i = Math.min(from, to); i <= Math.max(from, to); i++) {\n        if (this.views[i].idx !== i) {\n          if (!selectedOk && this.selected === this.views[i].idx) {\n            this.selected = i;\n          }\n          this.views[i].idx = i;\n        }\n      }\n      this.setConfig();\n    },\n    /**\n    * @method close\n    * @param {Number}  idx   The index of the container to close\n    * @param {Boolean} force Will close the container without prevention\n    * @param {Boolean} noCfg If set to true will not trigger the storage saving\n    * @fires remove\n    * @fires getIndex\n    * @fires activateIndex\n    * @fires setConfig\n    * @return {Boolean}\n    */\n    close(idx, force, noCfg) {\n      _bbn_bbn__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fn.log(\"CLOSING CT\");\n      let res = this.remove(idx, force);\n      if (res) {\n        if (this.selected > idx) {\n          this.selected--;\n        } else if (idx === this.selected) {\n          this.selectClosest(idx);\n        }\n        if (!noCfg) {\n          this.setConfig();\n        }\n      }\n      return res;\n    },\n    /**\n    * @method closeAll\n    * @fires close\n    */\n    closeAll(force) {\n      for (let i = this.views.length - 1; i >= 0; i--) {\n        if (!this.views[i].fixed && !this.views[i].pinned) {\n          this.close(i, force, true);\n        }\n      }\n      this.setConfig();\n    },\n    /**\n    * @method closeallBut\n    * @param {Number} idx\n    * @fires close\n    */\n    closeAllBut(idx, force) {\n      for (let i = this.views.length - 1; i >= 0; i--) {\n        if (!this.views[i].fixed && !this.views[i].pinned && i !== idx) {\n          this.close(i, force, true);\n        }\n      }\n      this.setConfig();\n    },\n    closeTab(idx) {\n      this.close(this.tabsList[idx].idx);\n    },\n    /**\n    * @method pin\n    * @param {Number} idx\n    * @fires isValidIndex\n    * @fires setConfig\n    * @emit beforePin\n    * @emit pin\n    */\n    pin(idx) {\n      if (this.isValidIndex(idx)) {\n        let ev = new CustomEvent('beforepin', {\n          cancelable: true\n        });\n        this.$emit('beforepin', idx, ev);\n        if (!ev.defaultPrevented) {\n          this.views[idx].pinned = true;\n          this.setConfig();\n          this.$emit('pin', idx);\n        }\n      }\n    },\n    /**\n    * @method unpin\n    * @param {Number} idx\n    * @fires isValidIndex\n    * @fires setConfig\n    * @emit beforeUnpin\n    * @emit unpin\n    */\n    unpin(idx) {\n      if (this.isValidIndex(idx)) {\n        let ev = new CustomEvent('beforeunpin', {\n          cancelable: true\n        });\n        this.$emit('beforeunpin', idx, ev);\n        if (!ev.defaultPrevented) {\n          this.views[idx].pinned = false;\n          this.setConfig();\n          this.$emit('unpin', idx);\n        }\n      }\n    }\n  },\n  watch: {\n    /**\n     * @watch dirty\n     */\n    isDirty(v) {\n      if (this.parentContainer) {\n        this.parentContainer.dirty = v;\n      }\n    },\n    source(v, ov) {\n      if (v !== ov) {\n        this.views.splice(0, this.views.length);\n        _bbn_bbn__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fn.each(v, a => {\n          if (!_bbn_bbn__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fn.isString(a.url)) {\n            throw Error(_bbn_bbn__WEBPACK_IMPORTED_MODULE_0__[\"default\"]._(\"The container must have a valid URL\"));\n          }\n\n          // Setting current if URL starts with default URL\n          if (this.currentURL && this.currentURL.indexOf(a.url) === 0) {\n            a.current = this.currentURL;\n          }\n          _bbn_bbn__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fn.warning(_bbn_bbn__WEBPACK_IMPORTED_MODULE_0__[\"default\"]._(\"ADDING %s ON WATCH\", a.url));\n          this.add(a);\n        });\n      }\n    },\n    views() {\n      this.updateVisualStyleContainer();\n    }\n  }\n});\n\n//# sourceURL=webpack://@bbn/bbn-cp/./src/components/router/_mixins/views.js?");

/***/ })

}]);