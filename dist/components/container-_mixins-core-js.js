"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_bbn_bbn_cp"] = self["webpackChunk_bbn_bbn_cp"] || []).push([["components/container-_mixins-core-js"],{

/***/ "./src/components/container/_mixins/core.js":
/*!**************************************************!*\
  !*** ./src/components/container/_mixins/core.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  props: {\n    error: {},\n    /**\n     * Defines if the component has to be cached.\n     * @prop {Boolean} [false] cached\n     */\n    cached: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * Defines if the component has to be scrollable.\n     * @prop {Boolean} [true] scrollable\n     */\n    scrollable: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * Defines if the component is disabled.\n     * @prop {Boolean} [false] disabled\n     */\n    disabled: {\n      type: [Boolean, Function],\n      default: false\n    }\n  },\n  data() {\n    return {\n      /**\n       * The router which the container belongs to if it exists.\n       * @data [null] router\n       */\n      router: null,\n      /**\n       * The array containing popup objects.\n       * @data {Array} [[]] popups\n       */\n      popups: [],\n      /**\n      * An object with each mounted children router.\n      * @data {Object} [{}] routers\n      */\n      subrouter: null,\n      /**\n       * Reacts to mouse movements.\n       * @data {Boolean} isOver\n       */\n      isOver: false,\n      /**\n       * The closest bbn-container if any.\n       * @data {Object|null} _bbn_container\n       */\n      _bbn_container: null,\n      /**\n       * A list of form components contained in this container\n       * @data {Array} [[]] forms\n       */\n      forms: [],\n      /**\n       * The error status if loading goes bad.\n       * @data {null|Object} errorStatus\n       */\n      errorStatus: null\n    };\n  },\n  methods: {\n    setRouter() {\n      this.router = this.closest('bbn-router');\n    },\n    /**\n     * Returns the full current url.\n     * \n     * @method getFullCurrentURL\n     * @return {String}\n     */\n    getFullCurrentURL() {\n      return this.router.getFullBaseURL() + this.currentURL;\n    },\n    /**\n     * Returns the full url.\n     * \n     * @method getFullURL\n     * @return {String}\n     */\n    getFullURL() {\n      return this.router.getFullBaseURL() + this.url;\n    },\n    /**\n     * Generates a random name used for the component.\n     * \n     * @method randomName\n     * @return {String}\n     */\n    randomName() {\n      let n = bbn.fn.randomString(20, 15).toLowerCase();\n      while (bbnContainerCp.componentsList.indexOf(n) > -1) {\n        n = bbn.fn.randomString(20, 15).toLowerCase();\n      }\n      return n;\n    },\n    /**\n     * Gets the popup object.\n     *  \n     * @method popup\n     * @return {Object}\n     */\n    popup() {\n      let popup = this.getPopup();\n      return arguments.length ? popup.open.apply(popup, arguments) : popup;\n    },\n    /**\n     * Gets the child component.\n     * \n     * @method getComponent\n     * @return {Object|Boolean}\n     */\n    getComponent() {\n      return this.getRef('component');\n    },\n    /**\n     * Fires the parent's method enter.\n     * \n     * @method enter\n     * @fires router.enter\n     */\n    enter() {\n      this.router.enter(this);\n    },\n    onResize() {\n      if (this.isVisible && this.ready) {\n        return bbn.cp.mixins.resizer.methods.onResize.apply(this);\n      }\n    }\n  }\n});\n\n//# sourceURL=webpack://@bbn/bbn-cp/./src/components/container/_mixins/core.js?");

/***/ })

}]);