"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_bbn_bbn_cp"] = self["webpackChunk_bbn_bbn_cp"] || []).push([["components/table-_mixins-ui-js"],{

/***/ "./src/components/table/_mixins/ui.js":
/*!********************************************!*\
  !*** ./src/components/table/_mixins/ui.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  props: {\n    /**\n     * Defines the toolbar of the table.\n     * @prop {Array|Object|String|Function} toolbar\n     */\n    toolbar: {\n      type: [Array, Object, String, Function]\n    },\n    /**\n     * If one or more columns have the property fixed set to true it defines the side of the fixed column(s).\n     * @prop {String} ['left'] fixedDefaultSide\n     */\n    fixedDefaultSide: {\n      type: String,\n      default: 'left'\n    },\n    /**\n     * Defines the behaviour of the table about the scroll.\n     * @prop {Boolean} [true] scrollable\n     */\n    scrollable: {\n      type: Boolean,\n      default: true\n    },\n    /**\n     * Defines the message to show in the confirm when an action is made on the row.\n     * @prop {String|Function|Boolean} confirmMessage\n     */\n    confirmMessage: {\n      type: [String, Function, Boolean],\n      default: bbn._('Are you sure you want to delete this row?')\n    },\n    /**\n     * Customize the loading text or hide it\n     * @prop {String|Boolean} [true] loader\n     */\n    loader: {\n      type: [String, Boolean],\n      default: true\n    },\n    /**\n     * Defines the footer of the table.\n     * Allowed values ​​are the name or the object of a component, a boolean or a function (to inject custom html)\n     * @prop {String|Object|Boolean|Function} footer\n     */\n    footer: {\n      type: [String, Object, Boolean, Function],\n      default: true\n    },\n    /**\n     * The name of the `page` word as used in the pager interface.\n     * @prop {String} ['Page'] pageName\n     */\n    pageName: {\n      type: String,\n      default: bbn._(\"page\")\n    },\n    /**\n     * The name of the `record` word as used in the pager interface.\n     * @prop {String} ['Record(s)'] itemName\n     */\n    itemName: {\n      type: String,\n      default: bbn._(\"rows\")\n    },\n    /**\n     * Allows you to see the contents of a cell in a popup\n     * @prop {Boolean} [false] zoomable\n     */\n    zoomable: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * Property sloBefore for the toolbar\n     * @prop {Boolean} toolbarSlotBefore\n     */\n    toolbarSlotBefore: {\n      type: Boolean,\n      default: true\n    }\n  },\n  data() {\n    return {\n      /**\n       * @data {} [null] scrollableContainer\n       */\n      scrollableContainer: null,\n      /**\n       * @data {Boolean} [true] hiddenScroll\n       */\n      hiddenScroll: true,\n      /**\n       * @data {Array} [[]] popups\n       */\n      popups: [],\n      /**\n       * @data {Boolean} [false] hasScrollX \n       */\n      hasScrollX: false,\n      /**\n       * @data {Boolean} [false] hasScrollY\n       */\n      hasScrollY: false,\n      /**\n       * The text shown during loading\n       * @data {String} ['Loading...'] currentLoaderText\n       */\n      currentLoaderText: bbn.fn.isString(this.loader) ? this.loader : bbn._('Loading') + '...',\n      /**\n       * The portal element for the buttons' floater (menu mode)\n       * @data {HTMLElement} [document.body] portalElement\n       */\n      portalElement: document.body,\n      /**\n       * @data {HTMLElement} [null] container\n       */\n      container: null,\n      isTable: null,\n      /**\n       * @data [null] inTable\n       */\n      inTable: null\n    };\n  },\n  computed: {\n    /**\n     * Return true if the table has the prop toolbar defined.\n     * @computed hasToolbar\n     * @returns {Boolean}\n     */\n    hasToolbar() {\n      return this.toolbarButtons.length || bbn.fn.isObject(this.toolbar) || bbn.fn.isFunction(this.toolbar) || bbn.fn.isString(this.toolbar);\n    },\n    /**\n     * @computed hasPager\n     * @return {Boolean}\n     */\n    hasPager() {\n      return (this.pageable || this.saveable || this.filterable || this.isAjax || this.showable) && this.footer === true;\n    },\n    /**\n     * Return an array with the object(s) button for the toolbar.\n     * @computed toolbarButtons\n     * @returns {Array}\n     */\n    toolbarButtons() {\n      let r = [],\n        ar = [];\n      if (this.toolbar) {\n        ar = bbn.fn.isFunction(this.toolbar) ? this.toolbar() : Array.isArray(this.toolbar) ? this.toolbar.slice() : [];\n        if (!Array.isArray(ar)) {\n          ar = [];\n        }\n        bbn.fn.each(ar, a => {\n          let o;\n          if (bbn.fn.isString(a)) {\n            switch (a) {\n              case 'insert':\n                o = {\n                  text: bbn._('Add'),\n                  action: this.insert,\n                  icon: 'nf nf-fa-plus'\n                };\n                break;\n              case 'export':\n                o = {};\n                break;\n              case 'print':\n                o = {};\n                break;\n              // separator or other toolbar param\n              default:\n                o = a;\n            }\n          } else if (bbn.fn.isObject(a)) {\n            o = bbn.fn.clone(a);\n          }\n          if (o && bbn.fn.isObject(o) && bbn.fn.isString(o.action)) {\n            o.action = () => {\n              this._execCommand(a);\n            };\n          }\n          if (!o) {\n            throw new Error(bbn._(\"Wrong parameter for toolbar\"));\n          }\n          r.push(o);\n        });\n      }\n      return r;\n    },\n    /**\n     * Return the object scroller.\n     * @computed scroller\n     * @returns {Object}\n     */\n    scroller() {\n      return bbn.cp.isComponent(this.$refs.scroller) ? this.$refs.scroller : null;\n    },\n    lastFixedIndex() {\n      let idx = -1;\n      bbn.fn.each(this.currentColumns, (a, i) => {\n        if (a.fixed && a.isLeft) {\n          idx = i;\n        }\n      });\n      return idx;\n    }\n  },\n  methods: {\n    /**\n     * Executes the action of the button.\n     *\n     * @method _execCommand\n     * @param {Object} button\n     * @param {Object} data\n     * @param {Object} col\n     * @param {Number} index\n     * @param {Event} ev\n     * @returns {Function|Boolean}\n     */\n    _execCommand(button, data, col, index, ev) {\n      if (ev) {\n        ev.preventDefault();\n        ev.stopImmediatePropagation();\n      }\n      //bbn.fn.log(\"EXEC COMMAND\");\n      if (button.action) {\n        if (bbn.fn.isFunction(button.action)) {\n          return button.action.bind(this.table.bbnComponent)(data, col, index);\n        } else if (typeof button.action === 'string') {\n          switch (button.action) {\n            case 'csv':\n              return this.exportCSV();\n            case 'excel':\n              return this.exportExcel();\n            case 'insert':\n              return this.insert(data, {\n                label: bbn._('New row creation')\n              }, -1);\n            case 'select':\n              return this.select(index);\n            case 'edit':\n              return this.edit(data, {\n                label: bbn._('Row edition')\n              }, index);\n            case 'add':\n              return this.add(data);\n            case 'copy':\n              return this.copy(data, {\n                label: bbn._('Row copy')\n              }, index);\n            case 'delete':\n              return this.removeItem(index);\n          }\n        }\n      }\n      return false;\n    },\n    /**\n     * Opens a popup showing the database query.\n     * @method showQuery \n     */\n    showQuery() {\n      if (this.currentQuery) {\n        this.getPopup({\n          label: bbn._('Database query and parameters'),\n          scrollable: true,\n          component: {\n            template: `\n<div class=\"bbn-block bbn-spadding\">\n  <h3 @click=\"showValues = !showValues\"\n      bbn-text=\"showValues ? _('Hide the values') : _('Show the values')\"\n      class=\"bbn-p\"></h3>\n  <ol class=\"bbn-space-bottom\" bbn-if=\"showValues\">\n    <li bbn-for=\"v in source.values\" bbn-text=\"v\"></li>\n  </ol>\n  <pre bbn-text=\"source.query\"></pre>\n</div>\n              `,\n            props: ['source'],\n            data() {\n              return {\n                showValues: false\n              };\n            }\n          },\n          closable: true,\n          source: {\n            query: this.currentQuery,\n            values: this.currentQueryValues\n          }\n        });\n      }\n    },\n    /**\n     * Renders a cell according to column's config.\n     * @method render\n     * @param {Object} data\n     * @param {Object} column\n     * @param {Number} index\n     * @fires renderData\n     * @returns {Function}\n     */\n    render(data, column, index) {\n      let value = data && this.isValidField(column.field) ? this.getProp(data, column.field) : undefined;\n      if (column.render) {\n        return column.render(data, column, index, value) || '';\n      }\n      return this.renderData(data, column, index) || '';\n    },\n    /**\n     * Returns the html element of the given row index.\n     * @method getTr\n     * @param {Number} i\n     * @returns {String}\n     */\n    getTr(i) {\n      return this.getRef('rows')?.[i];\n    },\n    /**\n     * Returns true if the given row has td.\n     *\n     * @method hasTd\n     * @param {Object} data\n     * @param {Number} colIndex\n     * @param {Number} groupIndex\n     */\n    hasTd(data, colIndex, groupIndex) {\n      let tdIndex = colIndex;\n      for (let i = 0; i < groupIndex; i++) {\n        tdIndex += this.groupCols[groupIndex].cols.length;\n      }\n      if (data.selection) {\n        if (tdIndex === 0) {\n          return false;\n        } else if (data.group || data.expander) {\n          if (tdIndex === 1) {\n            return false;\n          }\n        }\n      }\n      if (data.group || data.expander) {\n        if (tdIndex === 0) {\n          return false;\n        }\n      }\n      if (data.group || data.expansion) {\n        return false;\n      }\n      if (data.invisible) {\n        return false;\n      }\n      return true;\n    },\n    loseViewport(ele, data) {\n      if (ele instanceof Comment && !ele.bbnSchema.isCommented) {\n        const tmp = Array.from(ele.parentNode.childNodes).filter(a => a.tagName && !a.bbnId.indexOf(ele.bbnId + '-') && !a.bbnHash.indexOf(ele.bbnHash));\n        if (tmp.length) {\n          ele = tmp[0];\n        }\n      }\n      if (!(ele instanceof Comment)) {\n        const inVP = bbn.fn.isInViewport(ele);\n        if (!inVP) {\n          return true;\n        }\n      }\n    }\n  }\n});\n\n//# sourceURL=webpack://@bbn/bbn-cp/./src/components/table/_mixins/ui.js?");

/***/ })

}]);