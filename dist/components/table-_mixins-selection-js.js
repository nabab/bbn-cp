"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_bbn_bbn_cp"] = self["webpackChunk_bbn_bbn_cp"] || []).push([["components/table-_mixins-selection-js"],{

/***/ "./src/components/table/_mixins/selection.js":
/*!***************************************************!*\
  !*** ./src/components/table/_mixins/selection.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  data() {\n    return {\n      allRowsChecked: false\n    };\n  },\n  computed: {\n    /**\n     * The array of selected values if the table is selectable.\n     * @computed selectedValues\n     * @returns {Array}\n     */\n    selectedValues() {\n      return this.currentSelected.map(a => {\n        return this.uid ? this.currentData[a].data[this.uid] : this.currentData[a].data;\n      });\n    }\n  },\n  methods: {\n    checkAll() {\n      this.getRef('table').querySelectorAll(':scope > tbody > tr > td[is=\"bbn-table-cell-selector\"] bbn-checkbox').forEach(a => a.check());\n    },\n    uncheckAll() {\n      this.getRef('table').querySelectorAll(':scope > tbody > tr > td[is=\"bbn-table-cell-selector\"] bbn-checkbox').forEach(a => a.uncheck());\n    },\n    /**\n     * Returns true if the given index is selected.\n     * @method isSelected\n     * @param {Number} index\n     * @returns {Boolean}\n     */\n    isSelected(index) {\n      return this.selection && (!this.uid && this.currentSelected.includes(index) || this.uid && this.currentSelected.includes(this.currentData[index].data[this.uid]));\n    },\n    /**\n     * Emits 'select',  'unselect' or 'toggle' at change of checkbox of the row in a selectable table.\n     * @method checkSelection\n     * @param {Number}  index\n     * @param {Boolean} index\n     * @emit unselect\n     * @emit select\n     * @emit toggle\n     */\n    checkSelection(index, state) {\n      if (this.cancelSelection) {\n        this.cancelSelection = false;\n        return;\n      }\n\n      // Obliged to add this otherwise there are 2 changes events canceling each other\n      if (!this.isCheckingSelection) {\n        this.isCheckingSelection = [];\n      }\n      if (!this.isCheckingSelection.includes(index)) {\n        this.isCheckingSelection.push(index);\n        const row = this.items[index];\n        if (row) {\n          if (this.groupable && row.group) {\n            if (row.expanded) {\n              bbn.fn.fori((d, i) => {\n                if (d && d.selection && this.getProp(d.data, this.cols[this.group].field) === row.value) {\n                  this.checkSelection(i, state);\n                }\n              }, this.items, index + row.num, index + 1);\n            }\n          } else if (row.selection || this.selection && (!bbn.fn.isFunction(this.selection) || this.selection(row))) {\n            const idx = this.currentSelected.indexOf(this.uid ? this.currentData[row.index].data[this.uid] : row.index);\n            const isSelected = !!state;\n            let toggled = false;\n            if (state && idx > -1) {\n              this.$emit('select', row.data);\n              toggled = true;\n            } else if (!state && idx === -1) {\n              this.$emit('unselect', row.data);\n              toggled = true;\n            }\n            /* if (idx > -1) {\n              if ([undefined, false].includes(state)) {\n                toggled = true;\n                this.$emit('unselect', row.data);\n                this.currentSelected.splice(idx, 1);\n              }\n            }\n            else if ([undefined, true].includes(state)) {\n              toggled = true;\n              this.$emit('select', row.data);\n              this.currentSelected.push(this.uid ? this.currentData[row.index].data[this.uid] : row.index);\n              isSelected = true;\n            } */\n\n            if (toggled) {\n              this.$emit('toggle', isSelected, row.data);\n            }\n          }\n        }\n        this.$nextTick(() => {\n          this.isCheckingSelection.splice(this.isCheckingSelection.indexOf(index), 1);\n        });\n      }\n    },\n    beforeSelect(index, ev, isSelected) {\n      this.$emit('beforeselect', ev, index, this.items[index], isSelected);\n    }\n  },\n  watch: {\n    allRowsChecked(v) {\n      if (v) {\n        this.checkAll();\n      } else if (!this.isTableDataUpdating) {\n        this.uncheckAll();\n      }\n    }\n  }\n});\n\n//# sourceURL=webpack://@bbn/bbn-cp/./src/components/table/_mixins/selection.js?");

/***/ })

}]);