"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_bbn_bbn_cp"] = self["webpackChunk_bbn_bbn_cp"] || []).push([["components/table-_mixins-events-js"],{

/***/ "./src/components/table/_mixins/events.js":
/*!************************************************!*\
  !*** ./src/components/table/_mixins/events.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  data() {\n    return {\n      /**\n       * @data {DOMElement} [undefined] focusedElement\n       */\n      focusedElement: null,\n      /**\n       * @data {Number} [0] focusedElementX Horizontal coordinate of focused element\n       */\n      focusedElementX: 0,\n      /**\n       * @data {Number} [0] focusedElementY Vertical coordinate of focused element\n       */\n      focusedElementY: 0,\n      /**\n       * @data {Boolean} [false] focusedRow\n       */\n      focusedRow: false\n    };\n  },\n  methods: {\n    /**\n     * Focuses the given row index.\n     * @method focusRow\n     * @param {Event} ev\n     * @param {Number} idx\n     */\n    focusRow(ev, idx) {\n      if (ev.target.tagName !== 'BUTTON') {\n        this.focusedRow = idx;\n      }\n    },\n    /**\n     * Blurs the given row index.\n     * @method blurRow\n     * @param {Event} ev\n     * @param {Number} idx\n     */\n    blurRow(ev, idx) {\n      if (ev.target.tagName !== 'BUTTON') {\n        this.focusedRow = false;\n      }\n    },\n    /**\n     * @method clickCell\n     * @param {Object} col\n     * @param {Number} colIndex\n     * @param {Number} dataIndex\n     * @emits click-row\n     * @emits click-cell\n     */\n    clickCell(col, colIndex, dataIndex) {\n      if (this.filteredData[dataIndex]) {\n        this.$emit('click-row', this.filteredData[dataIndex].data, dataIndex);\n        this.$emit('click-cell', col, colIndex, dataIndex);\n      }\n    },\n    /**\n     * @method dbclickCell\n     * @param {Object} col\n     * @param {Number} colIndex\n     * @param {Number} dataIndex\n     */\n    dbclickCell(col, data, itemIndex, force) {\n      if (this.zoomable && (!!col.zoomable || force)) {\n        let obj = {\n          label: col.label || col.flabel,\n          minHeight: '20%',\n          minWidth: '20%'\n        };\n        if (!!col.component) {\n          obj.component = col.component;\n          obj.source = bbn.fn.isFunction(col.mapper) ? col.mapper(data) : data;\n          obj.componentOptions = col.options;\n        } else if (bbn.fn.isFunction(col.render)) {\n          obj.content = `<div class=\"bbn-spadding\">${col.render(data, col, itemIndex)}</div>`;\n        } else if (col.field) {\n          obj.content = `<div class=\"bbn-spadding\">${getProp(data, col.field)}</div>`;\n        } else {\n          obj.content = `<div class=\"bbn-spadding\">${data.text}</div>`;\n        }\n        this.getPopup().open(obj);\n      }\n    },\n    /**\n     * Removes the focus from the given row.\n     * @param {Number} idx \n     */\n    focusout(idx) {\n      this.clickedTd = null;\n      if (idx === undefined || idx === this.focusedRow) {\n        this.focused = false;\n        //this.focusedElement = undefined;\n        setTimeout(() => {\n          if (!this.focused) {\n            this.focusedRow = false;\n          }\n        }, 50);\n      }\n    },\n    /**\n     * Focuses the given row.\n     * @param {Number} idx \n     * @param {Event} e \n     */\n    focusin(idx, e) {\n      if (!e.target.closest('td') || !e.target.closest('td').classList.contains('bbn-table-buttons') || e.target.closest('td').classList.contains('bbn-table-edit-buttons')) {\n        this.focused = true;\n        this.clickedTd = e.target;\n        //this.setFocusedElement(e)\n        if (this.focusedRow !== idx) {\n          this.focusedRow = idx;\n        }\n      }\n    },\n    setFocusedElement(ev) {\n      if (this.editable && this.editMode === 'inline' && (this.tmpRow || this.editedRow) && ev.target.tagName !== 'TR' && ev.target.tagName !== 'TD') {\n        let e = ev.target.closest('td'),\n          pos = e.getBoundingClientRect();\n        this.focuseElementX = pos.x;\n        this.focusedElementY = pos.y - pos.height;\n        this.focusedElement = ev.target;\n      }\n    },\n    /**\n     * The behavior of the component at mouseMove.\n     * @method moveMouse\n     * @param {Event} e\n     * @fires keepCool\n     * @fires checkFilterWindow\n     */\n    moveMouse(e) {\n      this.keepCool(() => {\n        this.checkFilterWindow(e);\n      }, 'moveMouse');\n    },\n    /**\n     * Prevents default if enter or tab keys are pressed.\n     * @method onKeydown\n     * @param {Event} e\n     */\n    onKeydown(e) {\n      if (this.isBatch && this.editedRow && e.which === 9 || e.which === 13) {\n        e.preventDefault();\n      }\n    }\n  },\n  watch: {\n    /**\n     * @watch focusedRow\n     * @fires isModified\n     * @fires edit\n     * @emit change\n     * @emit focus\n     * @emit focusout\n     */\n    focusedRow(newIndex, oldIndex) {\n      if (bbn.fn.isNumber(oldIndex)) {\n        this.$emit('focusout', oldIndex, this.items[oldIndex] ? this.items[oldIndex].index : undefined);\n      }\n      if (this.items[newIndex]) {\n        this.$emit('focus', this.items[newIndex].data, newIndex, this.items[newIndex].index);\n      }\n      if (this.editable && this.editMode === 'inline') {\n        if (bbn.fn.isNumber(oldIndex) && this.items[oldIndex]) {\n          let idx = this.items[oldIndex].index;\n          if (this.editedIndex === idx && (idx === -1 || this.isModified(idx))) {\n            if (this.autoSave) {\n              this.saveInline();\n            } else if (this.autoReset) {\n              this.cancel();\n            } else {\n              this.$emit('change', this.items[oldIndex].data, idx);\n            }\n          }\n        }\n        this.editedRow = false;\n        if (bbn.fn.isNumber(newIndex) && this.items[newIndex] && !this.items[newIndex].group && !this.items[newIndex].expander) {\n          let comeFromAfter = bbn.fn.isNumber(oldIndex) && newIndex === oldIndex - 1;\n          this.$nextTick(() => {\n            this.edit(this.items[newIndex].data, null, newIndex);\n            this.$nextTick(() => {\n              let ele = this.clickedTd || this.getTr(newIndex);\n              let nextInputs = ele ? ele.querySelectorAll('input') : [];\n              let nextInput;\n              bbn.fn.each(nextInputs, a => {\n                if (a.offsetWidth) {\n                  nextInput = a;\n                  if (!comeFromAfter) {\n                    return false;\n                  }\n                }\n              });\n              if (nextInput) {\n                nextInput.focus();\n              }\n            });\n          });\n        }\n      }\n    }\n  }\n});\n\n//# sourceURL=webpack://@bbn/bbn-cp/./src/components/table/_mixins/events.js?");

/***/ })

}]);