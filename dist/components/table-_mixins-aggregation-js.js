"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_bbn_bbn_cp"] = self["webpackChunk_bbn_bbn_cp"] || []).push([["components/table-_mixins-aggregation-js"],{

/***/ "./src/components/table/_mixins/aggregation.js":
/*!*****************************************************!*\
  !*** ./src/components/table/_mixins/aggregation.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _bbn_bbn__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @bbn/bbn */ \"./node_modules/@bbn/bbn/dist/index.js\");\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  props: {\n    /**\n     * @todo desc\n     * @prop {Object} [{tot: 'Total',med: 'Average',num: 'Count',max: 'Maximum',min: 'Minimum'}] aggregateExp\n     */\n    aggregateExp: {\n      type: Object,\n      default() {\n        return {\n          tot: _bbn_bbn__WEBPACK_IMPORTED_MODULE_0__[\"default\"]._('Total'),\n          med: _bbn_bbn__WEBPACK_IMPORTED_MODULE_0__[\"default\"]._('Average'),\n          num: _bbn_bbn__WEBPACK_IMPORTED_MODULE_0__[\"default\"]._('Count'),\n          max: _bbn_bbn__WEBPACK_IMPORTED_MODULE_0__[\"default\"]._('Maximum'),\n          min: _bbn_bbn__WEBPACK_IMPORTED_MODULE_0__[\"default\"]._('Minimum')\n        };\n      }\n    },\n    /**\n     * @prop {String|Array} aggregate\n     */\n    aggregate: {\n      type: [String, Array]\n    }\n  },\n  data() {\n    return {\n      /**\n       * @data {Boolean} [false] isAggregated\n       */\n      isAggregated: false,\n      /**\n       * @data {Array} [[]] aggregatedColumns\n       */\n      aggregatedColumns: [],\n      aggregationResult: null\n    };\n  },\n  methods: {\n    /**\n     * Return true if the cell is before aggregated cells.\n     * @method isBeforeAggregated\n     * @param {Number} groupIndex\n     * @param {Number} idx\n     * @returns {Boolean}\n     */\n    isBeforeAggregated(groupIndex, idx) {\n      return this.isAggregated && (this.groupCols[groupIndex].cols[idx + 1] && this.groupCols[groupIndex].cols[idx + 1].field === this.isAggregated || !this.groupCols[groupIndex].cols[idx + 1] && this.groupCols[groupIndex + 1] && this.groupCols[groupIndex + 1].cols[0] && this.groupCols[groupIndex + 1].cols[0].field === this.isAggregated);\n    },\n    updateAggregation() {\n      // Aggregated\n      if (this.isAggregated) {\n        const aggregates = {};\n        const aggregateModes = [];\n        let aggIndex = 0;\n        let i = 0;\n        const data = this.filteredData;\n        aggregateModes = _bbn_bbn__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fn.isArray(this.aggregate) ? this.aggregate : [this.aggregate];\n        _bbn_bbn__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fn.each(this.aggregatedColumns, a => {\n          aggregates[a.field] = {\n            tot: _bbn_bbn__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fn.sum(data, a.field),\n            num: data.length,\n            min: _bbn_bbn__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fn.min(data, a.field),\n            max: _bbn_bbn__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fn.max(data, a.field),\n            groups: []\n          };\n          const uniqueValues = _bbn_bbn__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fn.unique(data.map(d => d.data[a.field]));\n          _bbn_bbn__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fn.each(uniqueValues, uv => {\n            const filteredData = data.filter(d => d.data[a.field] === uv);\n            aggregates[a.field].groups.push({\n              value: uv,\n              tot: _bbn_bbn__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fn.sum(filteredData, a.field),\n              num: filteredData.length,\n              min: _bbn_bbn__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fn.min(filteredData, a.field),\n              max: _bbn_bbn__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fn.max(filteredData, a.field)\n            });\n          });\n        });\n        this.aggregationResult = aggregates;\n      }\n    }\n  }\n});\n\n//# sourceURL=webpack://@bbn/bbn-cp/./src/components/table/_mixins/aggregation.js?");

/***/ })

}]);