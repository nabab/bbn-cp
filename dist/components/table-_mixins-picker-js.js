"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_bbn_bbn_cp"] = self["webpackChunk_bbn_bbn_cp"] || []).push([["components/table-_mixins-picker-js"],{

/***/ "./src/components/table/_mixins/picker.js":
/*!************************************************!*\
  !*** ./src/components/table/_mixins/picker.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  methods: {\n    /**\n     * Returns the list of the showable columns\n     * @method pickableColumnList\n     * @returns {Array}\n     */\n    pickableColumnList() {\n      return this.cols.slice().map(a => {\n        return a.showable !== false;\n      });\n    },\n    /**\n     * Opens the popup containing the column picker.\n     * @method openColumnsPicker\n     */\n    openColumnsPicker() {\n      let table = this;\n      this.getPopup({\n        label: bbn._(\"Columns' picker\"),\n        height: '90%',\n        width: '90%',\n        component: {\n          template: `\n<div class=\"bbn-table-column-picker\">\n  <bbn-form ref=\"scroll\"\n            :source=\"formData\"\n            :scrollable=\"true\"\n            :prefilled=\"true\"\n            @success=\"applyColumnsShown\">\n    <div class=\"bbn-padding\">\n      <ul bbn-if=\"source.titleGroups\">\n        <li bbn-for=\"(tg, idx) in source.titleGroups\">\n          <h3>\n            <bbn-checkbox :checked=\"allVisible(tg.value)\"\n                          @change=\"checkAll(tg.value)\"\n                          :label=\"tg.text\"/>\n          </h3>\n          <ul>\n            <li bbn-for=\"(col, i) in source.cols\"\n                bbn-if=\"!col.fixed && (col.group === tg.value) && (col.showable !== false) && (col.label || col.flabel)\">\n              <bbn-checkbox bbn-model=\"shownCols[i]\"\n                            :value=\"true\"\n                            :novalue=\"false\"\n                            :label=\"col.flabel || col.label\"\n                            :contrary=\"true\"/>\n            </li>\n          </ul>\n        </li>\n      </ul>\n      <ul bbn-else>\n        <li bbn-for=\"(col, i) in source.cols\"\n            bbn-if=\"!col.fixed && (col.showable !== false) && (col.label || col.flabel)\">\n          <bbn-checkbox bbn-model=\"shownCols[i]\"\n                        @change=\"check(col, i)\"\n                        :label=\"col.flabel || col.label\"\n                        :contrary=\"true\"/>\n        </li>\n      </ul>\n    </div>\n  </bbn-form>\n</div>\n`,\n          props: ['source'],\n          data() {\n            let shownColumns = this.source.cols.map(a => !a.invisible);\n            return {\n              table: table,\n              formData: {\n                changed: false\n              },\n              shownCols: shownColumns\n            };\n          },\n          methods: {\n            applyColumnsShown() {\n              let toShow = [];\n              let toHide = [];\n              bbn.fn.each(this.source.cols, (a, i) => {\n                if (a.invisible == this.shownCols[i]) {\n                  if (this.shownCols[i]) {\n                    toShow.push(a.field || i);\n                  } else {\n                    toHide.push(a.field || i);\n                  }\n                }\n              });\n              if (toShow.length) {\n                table.show(toShow);\n              }\n              if (toHide.length) {\n                table.show(toHide, true);\n              }\n            },\n            allVisible(group) {\n              let ok = true;\n              bbn.fn.each(this.source.cols, (a, i) => {\n                if (a.showable !== false && a.group === group && !a.fixed) {\n                  if (!this.shownCols[i]) {\n                    ok = false;\n                    return false;\n                  }\n                }\n              });\n              return ok;\n            },\n            check(col, index) {\n              this.shownCols[index] = !this.shownCols[index];\n            },\n            checkAll(group) {\n              let show = !this.allVisible(group);\n              bbn.fn.each(this.source.cols, (a, i) => {\n                if (a.showable !== false && a.group === group && !a.fixed) {\n                  if (this.shownCols[i] != show) {\n                    this.shownCols.splice(i, 1, show);\n                  }\n                }\n              });\n              this.$forceUpdate();\n            }\n          },\n          watch: {\n            shownCols: {\n              deep: true,\n              handler() {\n                this.formData.changed = true;\n              }\n            }\n          }\n        },\n        source: {\n          cols: this.cols,\n          titleGroups: this.titleGroups\n        }\n      });\n    }\n  }\n});\n\n//# sourceURL=webpack://@bbn/bbn-cp/./src/components/table/_mixins/picker.js?");

/***/ })

}]);