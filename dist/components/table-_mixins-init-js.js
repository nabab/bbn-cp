"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_bbn_bbn_cp"] = self["webpackChunk_bbn_bbn_cp"] || []).push([["components/table-_mixins-init-js"],{

/***/ "./src/components/table/_mixins/init.js":
/*!**********************************************!*\
  !*** ./src/components/table/_mixins/init.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  data() {\n    return {\n      /**\n       * @data {Boolean} [false] initReady\n       */\n      initReady: false,\n      /**\n       * @data {Boolean} [false] groupInit\n       */\n      groupInit: false,\n      /**\n       * @data {String} [false] initStarted\n       */\n      initStarted: false\n    };\n  },\n  computed: {},\n  methods: {\n    /**\n     * Initializes the table.\n     * @method init\n     * @param {Boolean} with_data\n     * @fires updateData\n     */\n    init(with_data) {\n      //bbn.fn.warning(\"INIT TABLE\");\n      this.initStarted = true;\n      //this.setContainerMeasures();\n      //this.setResizeMeasures();\n      let numUnknown = bbn.fn.count(this.cols, a => !a.invisible && !a.width);\n      let isAggregated = false;\n      let aggregatedColIndex = false;\n      let aggregatedColTitle = false;\n      let aggregatedColumns = [];\n      const parentStyle = this.$el.offsetParent ? window.getComputedStyle(this.$el.offsetParent) : {};\n      const parentPadding = parseFloat(parentStyle?.paddingLeft || 0) + parseFloat(parentStyle?.paddingRight || 0);\n      const parentWidth = (this.$el.offsetParent ? this.$el.offsetParent.getBoundingClientRect().width : this.lastKnownCtWidth) - parentPadding;\n      this.initColumns();\n      const totalSumWidth = bbn.fn.sum(this.groupCols, 'sum');\n      const styles = window.getComputedStyle(this.$el);\n      const borderLeft = styles.getPropertyValue('border-left-width').slice(0, -2);\n      const borderRight = styles.getPropertyValue('border-right-width').slice(0, -2);\n      const toFill = parentWidth - borderLeft - borderRight - totalSumWidth;\n      this.borderLeft = borderLeft;\n      this.borderRight = borderRight;\n      // We must arrive to 100% minimum\n      if (toFill > 0) {\n        if (numUnknown) {\n          let newWidth = Math.floor(toFill / numUnknown);\n          if (newWidth < (bbn.fn.isMobile() ? this.minimumColumnWidthMobile : this.minimumColumnWidth)) {\n            newWidth = bbn.fn.isMobile() ? this.minimumColumnWidthMobile : this.minimumColumnWidth;\n          }\n          let maxPreAggregatedWidth = 0;\n          bbn.fn.each(this.cols, (a, i) => {\n            if (!a.invisible) {\n              if (!a.width) {\n                a.realWidth = newWidth + (bbn.fn.isMobile() ? this.defaultColumnWidthMobile : this.defaultColumnWidth);\n              }\n              if (isAggregated && i < aggregatedColIndex && a.realWidth >= maxPreAggregatedWidth) {\n                maxPreAggregatedWidth = a.realWidth;\n                aggregatedColTitle = a;\n              }\n            }\n          });\n        }\n        // Otherwise we dispatch it through the existing column\n        else {\n          let num = this.numVisible;\n          let ignore = 0;\n          if (this.hasExpander) {\n            num--;\n            ignore++;\n          }\n          if (this.selection) {\n            num--;\n            ignore++;\n          }\n          //let bonus = Math.floor(toFill / num * 100) / 100;\n          let bonus = toFill / num;\n          let maxPreAggregatedWidth = 0;\n          bbn.fn.each(this.cols, (a, i) => {\n            if (!a.invisible && i >= ignore) {\n              a.realWidth += bonus;\n              if (isAggregated && i < aggregatedColIndex && a.realWidth >= maxPreAggregatedWidth) {\n                maxPreAggregatedWidth = a.realWidth;\n                aggregatedColTitle = a;\n              }\n            }\n          });\n        }\n      }\n      if (aggregatedColTitle) {\n        aggregatedColTitle.isAggregatedTitle = true;\n      }\n      let sum = 0,\n        sumLeft = 0,\n        sumRight = 0;\n      bbn.fn.each(this.groupCols, (a, i) => {\n        bbn.fn.each(i !== 2 ? a.cols : a.cols.slice().reverse(), c => {\n          if (!c.invisible) {\n            sum += c.realWidth;\n            if (i === 0) {\n              c.left = sumLeft;\n              sumLeft += c.realWidth;\n            } else if (i === 2) {\n              c.right = sumRight;\n              sumRight += c.realWidth;\n            }\n          }\n        });\n        a.width = sum;\n        sum = 0;\n        sumLeft = 0;\n        sumRight = 0;\n      });\n      this.isAggregated = isAggregated;\n      this.aggregatedColumns = aggregatedColumns;\n      this.resizeWidth();\n      this.initReady = true;\n      if (with_data) {\n        this.$once('dataloaded', () => {\n          this.initStarted = false;\n          this.$emit('init', this);\n          this.resizeWidth();\n        });\n        this.updateData();\n      } else {\n        this.$nextTick(() => {\n          this.initStarted = false;\n          this.resizeWidth();\n          this.$emit('init', this);\n        });\n      }\n      //bbn.fn.log('forceupdate5');\n    }\n  }\n});\n\n//# sourceURL=webpack://@bbn/bbn-cp/./src/components/table/_mixins/init.js?");

/***/ })

}]);