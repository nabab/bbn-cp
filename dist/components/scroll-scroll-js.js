/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_bbn_bbn_cp"] = self["webpackChunk_bbn_bbn_cp"] || []).push([["components/scroll-scroll-js"],{

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/less-loader/dist/cjs.js!./src/components/scroll/scroll.less":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/less-loader/dist/cjs.js!./src/components/scroll/scroll.less ***!
  \************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/noSourceMaps.js */ \"./node_modules/css-loader/dist/runtime/noSourceMaps.js\");\n/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/api.js */ \"./node_modules/css-loader/dist/runtime/api.js\");\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `bbn-scroll {\n  float: left;\n  max-width: inherit;\n  max-height: inherit;\n  overflow: hidden;\n  scrollbar-color: transparent transparent;\n  scrollbar-width: none;\n  scroll-behavior: smooth;\n}\nbbn-scroll::-webkit-scrollbar {\n  width: 0px;\n  height: 0px;\n}\nbbn-scroll:hover::-webkit-scrollbar-thumb,\nbbn-scroll::-webkit-scrollbar-thumb {\n  background: transparent;\n}\nbbn-scroll::-webkit-scrollbar-track,\nbbn-scroll:hover::-webkit-scrollbar-track {\n  background: transparent;\n}\nbbn-scroll.bbn-scroll-scrollable {\n  height: 100%;\n  width: 100%;\n}\nbbn-scroll.bbn-scroll-x:not(.bbn-scroll-disabled) {\n  width: 100%;\n  max-width: 100%;\n}\nbbn-scroll.bbn-scroll-x:not(.bbn-scroll-disabled) > .bbn-scroll-content {\n  overflow-x: scroll;\n}\nbbn-scroll.bbn-scroll-y:not(.bbn-scroll-disabled) {\n  height: 100%;\n  max-height: 100%;\n}\nbbn-scroll.bbn-scroll-y:not(.bbn-scroll-disabled) > .bbn-scroll-content {\n  overflow-y: scroll;\n}\nbbn-scroll > .bbn-scroll-content {\n  width: auto;\n  height: auto;\n  max-width: 100%;\n  max-height: 100%;\n  box-sizing: content-box;\n}\nbbn-scroll > .bbn-scroll-content.bbn-overlay {\n  overflow: hidden !important;\n}\nbbn-scroll .bbn-scroll-scrollbar {\n  position: absolute;\n  overflow: hidden;\n  -webkit-transition: opacity 150ms ease-in-out;\n  -moz-transition: opacity 150ms ease-in-out;\n  transition: opacity 150ms ease-in-out;\n  background-color: rgba(var(--color_rgb), 0.5);\n}\nbbn-scroll .bbn-scroll-scrollbar.vertical {\n  width: 10px;\n  bottom: 0;\n  top: 0;\n  right: 0;\n}\nbbn-scroll .bbn-scroll-scrollbar.vertical .bbn-scroll-slider {\n  width: 6px;\n  height: 100%;\n  margin-right: 2px;\n  margin-left: 2px;\n}\nbbn-scroll .bbn-scroll-scrollbar.vertical .bbn-scroll-slider.bbn-scroll-not-dragged {\n  transition: top 100ms;\n}\nbbn-scroll .bbn-scroll-scrollbar.horizontal {\n  height: 10px;\n  left: 0;\n  right: 0;\n  bottom: 0;\n}\nbbn-scroll .bbn-scroll-scrollbar.horizontal .bbn-scroll-slider {\n  height: 6px;\n  width: 100%;\n  margin-bottom: 2px;\n  margin-top: 2px;\n}\nbbn-scroll .bbn-scroll-scrollbar.horizontal .bbn-scroll-slider.bbn-scroll-not-dragged {\n  transition: left 100ms;\n}\nbbn-scroll .bbn-scroll-scrollbar .bbn-scroll-slider {\n  opacity: 0.6;\n  border-radius: 0.3rem;\n  position: absolute;\n}\nbbn-scroll.bbn-scroll-scrollable:not(.bbn-scroll-y) > .bbn-scroll-content {\n  height: 100%;\n}\nbbn-scroll.bbn-scroll-scrollable:not(.bbn-scroll-x) > .bbn-scroll-content {\n  width: 100%;\n}\n`, \"\"]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n\n\n//# sourceURL=webpack://@bbn/bbn-cp/./src/components/scroll/scroll.less?./node_modules/css-loader/dist/cjs.js!./node_modules/less-loader/dist/cjs.js");

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\nmodule.exports = function (cssWithMappingToString) {\n  var list = [];\n\n  // return the list of modules as css string\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = \"\";\n      var needLayer = typeof item[5] !== \"undefined\";\n      if (item[4]) {\n        content += \"@supports (\".concat(item[4], \") {\");\n      }\n      if (item[2]) {\n        content += \"@media \".concat(item[2], \" {\");\n      }\n      if (needLayer) {\n        content += \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\");\n      }\n      content += cssWithMappingToString(item);\n      if (needLayer) {\n        content += \"}\";\n      }\n      if (item[2]) {\n        content += \"}\";\n      }\n      if (item[4]) {\n        content += \"}\";\n      }\n      return content;\n    }).join(\"\");\n  };\n\n  // import a list of modules into the list\n  list.i = function i(modules, media, dedupe, supports, layer) {\n    if (typeof modules === \"string\") {\n      modules = [[null, modules, undefined]];\n    }\n    var alreadyImportedModules = {};\n    if (dedupe) {\n      for (var k = 0; k < this.length; k++) {\n        var id = this[k][0];\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n    for (var _k = 0; _k < modules.length; _k++) {\n      var item = [].concat(modules[_k]);\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        continue;\n      }\n      if (typeof layer !== \"undefined\") {\n        if (typeof item[5] === \"undefined\") {\n          item[5] = layer;\n        } else {\n          item[1] = \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\").concat(item[1], \"}\");\n          item[5] = layer;\n        }\n      }\n      if (media) {\n        if (!item[2]) {\n          item[2] = media;\n        } else {\n          item[1] = \"@media \".concat(item[2], \" {\").concat(item[1], \"}\");\n          item[2] = media;\n        }\n      }\n      if (supports) {\n        if (!item[4]) {\n          item[4] = \"\".concat(supports);\n        } else {\n          item[1] = \"@supports (\".concat(item[4], \") {\").concat(item[1], \"}\");\n          item[4] = supports;\n        }\n      }\n      list.push(item);\n    }\n  };\n  return list;\n};\n\n//# sourceURL=webpack://@bbn/bbn-cp/./node_modules/css-loader/dist/runtime/api.js?");

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/noSourceMaps.js":
/*!**************************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/noSourceMaps.js ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = function (i) {\n  return i[1];\n};\n\n//# sourceURL=webpack://@bbn/bbn-cp/./node_modules/css-loader/dist/runtime/noSourceMaps.js?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nvar stylesInDOM = [];\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n  for (var i = 0; i < stylesInDOM.length; i++) {\n    if (stylesInDOM[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n}\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var indexByIdentifier = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3],\n      supports: item[4],\n      layer: item[5]\n    };\n    if (indexByIdentifier !== -1) {\n      stylesInDOM[indexByIdentifier].references++;\n      stylesInDOM[indexByIdentifier].updater(obj);\n    } else {\n      var updater = addElementStyle(obj, options);\n      options.byIndex = i;\n      stylesInDOM.splice(i, 0, {\n        identifier: identifier,\n        updater: updater,\n        references: 1\n      });\n    }\n    identifiers.push(identifier);\n  }\n  return identifiers;\n}\nfunction addElementStyle(obj, options) {\n  var api = options.domAPI(options);\n  api.update(obj);\n  var updater = function updater(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {\n        return;\n      }\n      api.update(obj = newObj);\n    } else {\n      api.remove();\n    }\n  };\n  return updater;\n}\nmodule.exports = function (list, options) {\n  options = options || {};\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDOM[index].references--;\n    }\n    var newLastIdentifiers = modulesToDom(newList, options);\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n      var _index = getIndexByIdentifier(_identifier);\n      if (stylesInDOM[_index].references === 0) {\n        stylesInDOM[_index].updater();\n        stylesInDOM.splice(_index, 1);\n      }\n    }\n    lastIdentifiers = newLastIdentifiers;\n  };\n};\n\n//# sourceURL=webpack://@bbn/bbn-cp/./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertBySelector.js":
/*!********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertBySelector.js ***!
  \********************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nvar memo = {};\n\n/* istanbul ignore next  */\nfunction getTarget(target) {\n  if (typeof memo[target] === \"undefined\") {\n    var styleTarget = document.querySelector(target);\n\n    // Special case to return head of iframe instead of iframe itself\n    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n      try {\n        // This will throw an exception if access to iframe is blocked\n        // due to cross-origin restrictions\n        styleTarget = styleTarget.contentDocument.head;\n      } catch (e) {\n        // istanbul ignore next\n        styleTarget = null;\n      }\n    }\n    memo[target] = styleTarget;\n  }\n  return memo[target];\n}\n\n/* istanbul ignore next  */\nfunction insertBySelector(insert, style) {\n  var target = getTarget(insert);\n  if (!target) {\n    throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n  }\n  target.appendChild(style);\n}\nmodule.exports = insertBySelector;\n\n//# sourceURL=webpack://@bbn/bbn-cp/./node_modules/style-loader/dist/runtime/insertBySelector.js?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertStyleElement.js":
/*!**********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertStyleElement.js ***!
  \**********************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/* istanbul ignore next  */\nfunction insertStyleElement(options) {\n  var element = document.createElement(\"style\");\n  options.setAttributes(element, options.attributes);\n  options.insert(element, options.options);\n  return element;\n}\nmodule.exports = insertStyleElement;\n\n//# sourceURL=webpack://@bbn/bbn-cp/./node_modules/style-loader/dist/runtime/insertStyleElement.js?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\n/* istanbul ignore next  */\nfunction setAttributesWithoutAttributes(styleElement) {\n  var nonce =  true ? __webpack_require__.nc : 0;\n  if (nonce) {\n    styleElement.setAttribute(\"nonce\", nonce);\n  }\n}\nmodule.exports = setAttributesWithoutAttributes;\n\n//# sourceURL=webpack://@bbn/bbn-cp/./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleDomAPI.js":
/*!***************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleDomAPI.js ***!
  \***************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/* istanbul ignore next  */\nfunction apply(styleElement, options, obj) {\n  var css = \"\";\n  if (obj.supports) {\n    css += \"@supports (\".concat(obj.supports, \") {\");\n  }\n  if (obj.media) {\n    css += \"@media \".concat(obj.media, \" {\");\n  }\n  var needLayer = typeof obj.layer !== \"undefined\";\n  if (needLayer) {\n    css += \"@layer\".concat(obj.layer.length > 0 ? \" \".concat(obj.layer) : \"\", \" {\");\n  }\n  css += obj.css;\n  if (needLayer) {\n    css += \"}\";\n  }\n  if (obj.media) {\n    css += \"}\";\n  }\n  if (obj.supports) {\n    css += \"}\";\n  }\n  var sourceMap = obj.sourceMap;\n  if (sourceMap && typeof btoa !== \"undefined\") {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  }\n\n  // For old IE\n  /* istanbul ignore if  */\n  options.styleTagTransform(css, styleElement, options.options);\n}\nfunction removeStyleElement(styleElement) {\n  // istanbul ignore if\n  if (styleElement.parentNode === null) {\n    return false;\n  }\n  styleElement.parentNode.removeChild(styleElement);\n}\n\n/* istanbul ignore next  */\nfunction domAPI(options) {\n  if (typeof document === \"undefined\") {\n    return {\n      update: function update() {},\n      remove: function remove() {}\n    };\n  }\n  var styleElement = options.insertStyleElement(options);\n  return {\n    update: function update(obj) {\n      apply(styleElement, options, obj);\n    },\n    remove: function remove() {\n      removeStyleElement(styleElement);\n    }\n  };\n}\nmodule.exports = domAPI;\n\n//# sourceURL=webpack://@bbn/bbn-cp/./node_modules/style-loader/dist/runtime/styleDomAPI.js?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleTagTransform.js":
/*!*********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleTagTransform.js ***!
  \*********************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/* istanbul ignore next  */\nfunction styleTagTransform(css, styleElement) {\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css;\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild);\n    }\n    styleElement.appendChild(document.createTextNode(css));\n  }\n}\nmodule.exports = styleTagTransform;\n\n//# sourceURL=webpack://@bbn/bbn-cp/./node_modules/style-loader/dist/runtime/styleTagTransform.js?");

/***/ }),

/***/ "./src/components/scroll/_i18n lazy recursive ^\\.\\/scroll\\..*\\.lang$":
/*!******************************************************************************************!*\
  !*** ./src/components/scroll/_i18n/ lazy ^\.\/scroll\..*\.lang$ strict namespace object ***!
  \******************************************************************************************/
/***/ ((module) => {

eval("function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(() => {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = () => ([]);\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/components/scroll/_i18n lazy recursive ^\\\\.\\\\/scroll\\\\..*\\\\.lang$\";\nmodule.exports = webpackEmptyAsyncContext;\n\n//# sourceURL=webpack://@bbn/bbn-cp/./src/components/scroll/_i18n/_lazy_^\\.\\/scroll\\..*\\.lang$_strict_namespace_object?");

/***/ }),

/***/ "./src/components/scroll/scroll.html":
/*!*******************************************!*\
  !*** ./src/components/scroll/scroll.html ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n// Module\nvar code = `<div :class=\"elementClass\">\n  <div :class=\"contentClass\"\n       ref=\"scrollContent\"\n       bbn-forget=\"!scrollable\"\n       @touchend.passive=\"onTouchend\"\n       @touchstart.passive=\"onTouchstart\"\n       @touchmove.passive=\"onTouchmove\"\n       @focus=\"isFocused = true\"\n       @blur=\"isFocused = false\"\n       @scroll=\"onScroll\"\n       tabindex=\"-1\">\n    <slot/>\n  </div>\n  <bbn-scroll-scrollbar bbn-if=\"hasScrollX\"\n                        :invisible=\"isResizing || hiddenX\"\n                        orientation=\"horizontal\"\n                        ref=\"xScroller\"\n                        :style=\"{backgroundColor: 'rgba(' + rgbaColor + ')'}\"\n                        :color=\"barColor ? barColor : ''\"\n                        :scrollAlso=\"scrollAlso\"\n                        :initial=\"currentX\"\n                        @scroll=\"getRef('scrollContent').scrollBy(\\$event.deltaX, 0)\"\n                        :keep-visible=\"keepVisible\"\n                        :offset=\"currentOffsetX\"/>\n  <bbn-scroll-scrollbar bbn-if=\"hasScrollY\"\n                        :invisible=\"isResizing || hiddenY\"\n                        orientation=\"vertical\"\n                        ref=\"yScroller\"\n                        :style=\"{backgroundColor: 'rgba(' + rgbaColor + ')'}\"\n                        :color=\"barColor ? barColor : ''\"\n                        :scrollAlso=\"scrollAlso\"\n                        :initial=\"currentY\"\n                        @scroll=\"getRef('scrollContent').scrollBy(0, \\$event.deltaY)\"\n                        :keep-visible=\"keepVisible\"\n                        :offset=\"currentOffsetY\"/>\n</div>\n`;\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (code);\n\n//# sourceURL=webpack://@bbn/bbn-cp/./src/components/scroll/scroll.html?");

/***/ }),

/***/ "./src/components/scroll/scroll.js":
/*!*****************************************!*\
  !*** ./src/components/scroll/scroll.js ***!
  \*****************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _cp_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../cp.js */ \"./src/cp.js\");\n/* harmony import */ var _scroll_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./scroll.html */ \"./src/components/scroll/scroll.html\");\n/* harmony import */ var _scroll_less__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./scroll.less */ \"./src/components/scroll/scroll.less\");\n/**\n * @file bbn-scroll component\n *\n * @description bbn-scroll is a component consisting of horizontal and vertical bars that allow the flow of content in both directions, if the container its smaller than the content, inserts and removes reactively vertical, horizontal bar or both.\n *\n * @copyright BBN Solutions\n *\n * @author BBN Solutions\n *\n * @created 10/02/2017\n */\n\nconst cpDef = {\n  /**\n   * @mixin bbn.cp.mixins.basic\n   * @mixin bbn.cp.mixins.resizer\n   * @mixin bbn.cp.mixins.keepCool\n   * @mixin bbn.cp.mixins.events\n   */\n  mixins: [bbn.cp.mixins.basic, bbn.cp.mixins.resizer, bbn.cp.mixins.keepCool, bbn.cp.mixins.events],\n  props: {\n    /**\n     * @prop {Number} [400] duration\n     */\n    duration: {\n      type: Number,\n      default: 400\n    },\n    /**\n     * The axis where the scroll is applied ( 'x', 'y', 'both')\n     * @prop {String} ['both'] axis\n     */\n    axis: {\n      type: String,\n      default: \"both\"\n    },\n    /**\n     * @todo not used\n     */\n    scrollAlso: {\n      type: [HTMLElement, Array, Function],\n      default() {\n        return [];\n      }\n    },\n    /**\n     * Defines the position of the x axis\n     * @prop {Number} [0] x\n     */\n    x: {\n      type: Number,\n      default: 0\n    },\n    /**\n     * Defines the position of the y axis\n     * @prop {Number} [0] y\n     */\n    y: {\n      type: Number,\n      default: 0\n    },\n    /**\n     * Defines if the scroll has to be hidden for one of the axis or both\n     * @prop {Boolean|String} [false] invisible\n     */\n    invisible: {\n      type: [Boolean, String],\n      default: false\n    },\n    /**\n     * Defines the color of the scroll\n     * @prop {String} barColor\n     */\n    barColor: {\n      type: String\n    },\n    /**\n     * The time of latency of the scroll\n     * @prop {Number} [25] latency\n     */\n    latency: {\n      type: Number,\n      default: 25\n    },\n    /**\n     * @prop {Boolean} [true] scrollable\n     */\n    scrollable: {\n      type: Boolean,\n      default: true\n    },\n    /**\n     * Will scroll page by page\n     * @prop {Boolean} [true] fullPage\n     */\n    fullPage: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * no scroll no functionality, no container\n     * @prop {Boolean} [true] disabled\n     */\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * @prop {Number|HTMLElement} stepX\n     */\n    stepX: {\n      type: [Number, HTMLElement]\n    },\n    /**\n     * @prop {Number|HTMLElement} stepY\n     */\n    stepY: {\n      type: [Number, HTMLElement]\n    },\n    /**\n     * @prop {(Number|Array)} [0] offsetX\n     */\n    offsetX: {\n      type: [Number, Array],\n      default: 0\n    },\n    /**\n     * @prop {(Number|Array)} [0] offsetY\n     */\n    offsetY: {\n      type: [Number, Array],\n      default: 0\n    },\n    afterScrollDelay: {\n      type: Number,\n      default: 500\n    },\n    /**\n     * Still show the scrollbar when no activity\n     * @prop {Boolean} [false] keepVisible\n     */\n    keepVisible: {\n      type: Boolean,\n      default: false\n    },\n    autoresize: {\n      type: Boolean,\n      default: true\n    }\n  },\n  data() {\n    return {\n      /**\n       * @data {Boolean} [false] readyDelay\n       */\n      readyDelay: false,\n      /**\n       * @todo not used\n       */\n      show: false,\n      /**\n       * The position on the x axis basing on the prop x\n       * @data {Number} [0] currentX\n       */\n      currentX: this.x || null,\n      /**\n       * The position on the y axis basing on the prop y\n       * @data {Number} [0] currentY\n       */\n      currentY: this.y || null,\n      /**\n       * Defines the position ofthe scroll container\n       * @data {String} scrollPos\n       */\n      scrollPos: '0px',\n      /**\n       * Defines the padding of the scroll container\n       * @data {String} containerPadding\n       */\n      containerPadding: '0px',\n      /**\n       * Defines if the scroll has to be hidden basing on the prop invisible\n       * @data {Boolean} hiddenX\n       */\n      hiddenX: this.invisible === true || this.invisible === 'x',\n      /**\n       * @todo not used\n       * Defines if the scroll has to be hidden basing on the prop invisible\n       * @data {Boolean} hiddenY\n       */\n      hiddenY: this.invisible === true || this.invisible === 'y',\n      /**\n       * @data {Boolean} [false] hasScroll\n       */\n      hasScroll: false,\n      /**\n       * @data {Boolean} [false] hasScrollX\n       */\n      hasScrollX: false,\n      /**\n       * @data {Boolean} [false] hasScrollY\n       */\n      hasScrollY: false,\n      promise: false,\n      isScrolling: false,\n      isDragging: false,\n      isFocused: false,\n      previousTouch: {\n        x: null,\n        y: null\n      },\n      lastResize: null,\n      scrollReady: false,\n      touchX: false,\n      touchY: false,\n      scrollInitial: false,\n      touchDirection: null,\n      scrollTimeout: null,\n      currentStepX: this.stepX instanceof HTMLElement ? this.stepX.clientHeight : this.stepX,\n      currentStepY: this.stepY instanceof HTMLElement ? this.stepY.clientHeight : this.stepY,\n      inFloater: null\n    };\n  },\n  computed: {\n    hasX() {\n      return this.scrollable && ['both', 'x'].includes(this.axis);\n    },\n    hasY() {\n      return this.scrollable && ['both', 'y'].includes(this.axis);\n    },\n    resizerObserved() {\n      return this.getRef('scrollContent');\n    },\n    /**\n     * Based on the prop fixedFooter and fullScreen, a string is returned containing the classes for the form template.\n     *\n     * @computed currentClass\n     * @return {String}\n     */\n    elementClass() {\n      let st = this.componentClass.join(' ');\n      if (!this.scrollable) {\n        st = bbn.fn.replaceAll('bbn-resize-emitter', '', st);\n        st += ' bbn-no-scrollbar';\n      } else {\n        st += ' bbn-scroll-scrollable';\n      }\n      if (this.disabled) {\n        st += ' bbn-scroll-disabled';\n      }\n      if (this.hasX) {\n        st += ' bbn-scroll-x';\n      }\n      if (this.hasY) {\n        st += ' bbn-scroll-y';\n      }\n      return st;\n    },\n    contentClass() {\n      let cls = 'bbn-scroll-content bbn-no-scrollbar';\n      if (!this.scrollable) {\n        cls += ' bbn-w-100';\n        return cls;\n      }\n      if (this.ready && !this.isDragging) {\n        cls += ' bbn-scroll-not-dragged';\n      }\n      if (!this.scrollable) {\n        cls += ' bbn-overlay';\n      }\n      return cls;\n    },\n    rgbaColor() {\n      const rgb = bbn.fn.hex2rgb(bbn.fn.getCssVar('primary-background'));\n      return rgb.r + ',' + rgb.g + ',' + rgb.b + ',0.2';\n    },\n    currentOffsetX() {\n      return bbn.fn.isArray(this.offsetX) ? this.offsetX : [this.offsetX, this.offsetX];\n    },\n    currentOffsetY() {\n      return bbn.fn.isArray(this.offsetY) ? this.offsetY : [this.offsetY, this.offsetY];\n    }\n  },\n  methods: {\n    hashJustChanged(length = 600) {\n      if (document.location.hash) {\n        let now = new Date().getTime();\n        if (bbn.env.hashChanged >= now - length) {\n          return true;\n        }\n      }\n      return false;\n    },\n    onTouchstart(e) {\n      if (!this.scrollable || this.disabled) {\n        return;\n      }\n      if (e.targetTouches && e.targetTouches.length) {\n        let ev = e.targetTouches[0];\n        if (this.hasScrollX) {\n          this.touchX = ev.clientX;\n        }\n        if (this.hasScrollY) {\n          this.touchY = ev.clientY;\n        }\n        this.scrollInitial = {\n          x: this.currentX,\n          y: this.currentY,\n          touched: true\n        };\n      }\n    },\n    onTouchend(e) {\n      if (!this.scrollInitial) {\n        return;\n      }\n      if (!this.scrollable || this.disabled) {\n        return;\n      }\n      this.scrollInitial.touched = 'finished';\n      this.setScrollDelay();\n    },\n    onTouchmove(e) {\n      this.$emit('touchmove', e);\n    },\n    /**\n     * @method onScroll\n     * @param {Event} e \n     * @emits scroll\n     */\n    onScroll(e) {\n      if (!this.scrollable) {\n        return;\n      }\n      let ct = this.getRef('scrollContent');\n      if (ct) {\n        if (this.disabled) {\n          e.preventDefault();\n          return;\n        }\n        if (this.hasScrollX && ct.scrollLeft < 0) {\n          ct.scrollLeft = 0;\n          e.preventDefault();\n          return;\n        }\n        if (this.hasScrollY && ct.scrollTop < 0) {\n          ct.scrollTop = 0;\n          e.preventDefault();\n          return;\n        }\n        this.currentX = ct.scrollLeft;\n        this.currentY = ct.scrollTop;\n        this.$emit('scroll', e);\n        if (!e.defaultPrevented) {\n          // Leaving touchscroll act normally\n          if (this.scrollInitial && this.scrollInitial.touched === true) {\n            // Removing the finishing delay in case it was pre-recorded\n            clearTimeout(this.scrollTimeout);\n            return;\n          }\n          // Not acting for events sent by scrollTo (scrollbars will write in nextLevel)\n          if (this.hasScrollX && this.$refs.xScroller && bbn.fn.isNumber(this.$refs.xScroller.nextLevel) && Math.abs(this.currentX - this.$refs.xScroller.nextLevel) < 2) {\n            return;\n          }\n          // Not acting for events sent by scrollTo (scrollbars will write in nextLevel)\n          if (this.hasScrollY && this.$refs.yScroller && bbn.fn.isNumber(this.$refs.yScroller.nextLevel) && Math.abs(this.currentY - this.$refs.yScroller.nextLevel) < 2) {\n            return;\n          }\n          if (!this.scrollInitial) {\n            this.scrollInitial = {\n              x: this.currentX,\n              y: this.currentY\n            };\n          }\n          this.setScrollDelay();\n        }\n      }\n      if (this.scrollable && e) {\n        e.stopImmediatePropagation();\n      }\n    },\n    setScrollDelay() {\n      clearTimeout(this.scrollTimeout);\n      this.scrollTimeout = setTimeout(() => {\n        this.afterScroll();\n      }, this.scrollInitial.touched === 'finished' ? 100 : this.afterScrollDelay);\n    },\n    afterScroll() {\n      if (this.fullPage && this.scrollInitial) {\n        if (this.hasScrollX && this.currentX !== this.scrollInitial.x) {\n          let m = this.currentStepX || this.containerWidth;\n          let r1 = this.scrollInitial.x ? Math.round(this.scrollInitial.x / m) : 0;\n          let r2 = this.currentX ? Math.round(this.currentX / m) : 0;\n          let left;\n          if (r1 !== r2) {\n            left = r2 * m;\n          } else if (this.scrollInitial.x < this.currentX) {\n            left = (r1 + 1) * m;\n          } else if (this.scrollInitial.x > this.currentX) {\n            left = (r1 - 1) * m;\n          }\n          if (bbn.fn.isNumber(left) && left !== this.currentX) {\n            this.$refs.xScroller.axisScrollTo(left, true).then(() => {\n              this.$emit('afterscroll');\n            });\n          }\n        } else if (this.hasScrollY && this.currentY !== this.scrollInitial.y) {\n          let m = this.currentStepY || this.containerHeight;\n          let r1 = this.scrollInitial.y ? Math.round(this.scrollInitial.y / m) : 0;\n          let r2 = this.currentY ? Math.round(this.currentY / m) : 0;\n          let top;\n          if (r1 !== r2) {\n            top = r2 * m;\n          } else if (this.scrollInitial.y < this.currentY) {\n            top = (r1 + 1) * m;\n          } else if (this.scrollInitial.y > this.currentY) {\n            top = (r1 - 1) * m;\n          }\n          if (bbn.fn.isNumber(top) && top !== this.currentY) {\n            this.$refs.yScroller.axisScrollTo(top, true).then(() => {\n              this.$emit('afterscroll');\n            });\n          } else {\n            this.$emit('afterscroll');\n          }\n        }\n        this.scrollInitial = false;\n      }\n    },\n    /**\n     * Smooth scroll animation\n     * @param {int} endX: destination x coordinate\n     * @param {int} endY: destination y coordinate\n     * @param {int} duration: animation duration in ms\n     */\n    axisSmoothScrollTo(end, duration, vertical) {\n      if (!this.scrollable) {\n        return;\n      }\n      bbn.fn.log('axisSmoothScrollTo', arguments);\n      return new Promise((resolve, reject) => {\n        const content = this.getRef('scrollContent');\n        const start = content['scroll' + (vertical ? 'Top' : 'Left')];\n        const distance = end - start;\n        const startTime = new Date().getTime();\n        if (!duration) {\n          duration = this.duration;\n        }\n\n        // Easing function\n        const easeInOutQuart = (time, from, distance, duration) => {\n          if ((time /= duration / 2) < 1) return distance / 2 * time * time * time * time + from;\n          return -distance / 2 * ((time -= 2) * time * time * time - 2) + from;\n        };\n        if (this.animationInterval) {\n          clearInterval(this.animationInterval);\n        }\n        this.animationInterval = setInterval(() => {\n          const time = new Date().getTime() - startTime;\n          let newPos = easeInOutQuart(time, start, distance, duration);\n          if (time >= duration) {\n            clearInterval(this.animationInterval);\n            newPos = end;\n            resolve();\n          }\n          content['scroll' + (vertical ? 'Top' : 'Left')] = Math.round(newPos);\n        }, 1000 / 60); // 60 fps\n      });\n    },\n    /**\n     * Scrolls to the given position using the given animation.\n     * @method scrollTo\n     * @fires adjustFromContainer\n     */\n    axisScrollTo(val, anim, vertical) {\n      if (!this.scrollable) {\n        return;\n      }\n      this.onResize();\n      return new Promise(resolve => {\n        if (this.animationInterval) {\n          clearInterval(this.animationInterval);\n        }\n        let num = 0;\n        let ele = false;\n        if (bbn.cp.isComponent(val) && val.$el) {\n          ele = val.$el;\n        } else if (bbn.fn.isDom(val)) {\n          ele = val;\n        }\n        const content = this.getRef('scrollContent');\n        const contentSize = content['scroll' + (vertical ? 'Height' : 'Width')];\n        const containerSize = this['offset' + (vertical ? 'Height' : 'Width')];\n        if (ele) {\n          let container = ele.offsetParent;\n          // The position is equal to the offset of the target\n          // minus the size of the viewport, which isn't scrolled,\n          // plus half the size of the viewport to center it\n          // therefore removing half of the viewport does the trick\n          num = ele[vertical ? 'offsetTop' : 'offsetLeft'] - Math.round(containerSize / 2);\n          while (container && container !== this.$el) {\n            if (container.contains(this.$el)) {\n              break;\n            } else {\n              num += container[vertical ? 'offsetTop' : 'offsetLeft'];\n              container = container.offsetParent;\n            }\n          }\n        } else if (bbn.fn.isPercent(val)) {\n          num = Math.round(parseFloat(val) * contentSize / 100);\n        } else if (bbn.fn.isNumber(val)) {\n          num = val;\n        }\n        if (bbn.fn.isNumber(num)) {\n          bbn.fn.log(\"scrollTo part 1\", num);\n          if (num < 0) {\n            num = 0;\n          } else if (num > contentSize - containerSize + 100) {\n            num = contentSize - containerSize;\n          }\n          if (anim) {\n            this.axisSmoothScrollTo(num, null, vertical).then(() => {\n              resolve();\n            });\n          } else {\n            content['scroll' + (vertical ? 'Top' : 'Left')] = num;\n            resolve();\n          }\n        }\n      });\n    },\n    /**\n     * @method scrollLevel\n     * @param {Boolean} before\n     */\n    scrollLevel(before, anim, vertical) {\n      const containerSize = this['offset' + (vertical ? 'Height' : 'Width')];\n      if (containerSize) {\n        let movement = containerSize;\n        if (before) {\n          movement = -movement;\n        }\n        this.scrollSet(this['scroll' + (vertical ? 'Top' : 'Left')] + movement, anim, vertical);\n      }\n    },\n    /**\n     * @method scrollBefore\n     * @fires scrollLevel\n     */\n    scrollBefore(anim, vertical) {\n      return this.scrollLevel(true, anim, vertical);\n    },\n    /**\n     * @method scrollAfter\n     * @fires scrollLevel\n     */\n    scrollAfter(anim, vertical) {\n      return this.scrollLevel(false, anim, vertical);\n    },\n    /**\n     * Scrolls to the given coordinates of x and y using the given animation\n     * @method scrollTo\n     * @param {Number} x\n     * @param {Number} y\n     */\n    scrollSet(x, y, anim) {\n      return new Promise(resolve => {\n        if (!this.hasScroll || !this.ready) {\n          resolve();\n        }\n        const promises = [];\n        if (this.hasScrollX && x !== undefined && x !== null && this.getRef('xScroller')) {\n          promises.push(this.getRef('xScroller').axisScrollTo(x, anim));\n        }\n        if (this.hasScrollY && y !== undefined && y !== null && this.getRef('yScroller')) {\n          promises.push(this.getRef('yScroller').axisScrollTo(y, anim, true));\n        }\n        Promise.all(promises).then(res => {\n          resolve();\n        });\n      });\n    },\n    scrollToX(x, anim) {\n      return new Promise(resolve => {\n        if (!this.hasScrollX || !this.ready || x === undefined || x === null || !this.getRef('xScroller')) {\n          resolve();\n        }\n        this.this.getRef('xScroller').axisScrollTo(x, anim).then(d => {\n          resolve();\n        });\n      });\n    },\n    scrollToY(y, anim) {\n      return new Promise(resolve => {\n        if (!this.hasScrollY || !this.ready || y === undefined || y === null || !this.getRef('yScroller')) {\n          resolve();\n        }\n        this.getRef('yScroller').axisScrollTo(y, anim, true).then(d => {\n          resolve();\n        });\n      });\n    },\n    /**\n     * @method scrollHorizontal\n     * @param {Event} ev \n     * @param {Number} left \n     * @emits scrollx\n     */\n    scrollHorizontal(ev, left) {\n      this.currentX = left;\n      this.$emit('scrollx', left);\n    },\n    /**\n     * @method scrollVertical\n     * @param {Event} ev \n     * @param {Number} top \n     * @emits scrolly\n     */\n    scrollVertical(ev, top) {\n      this.currentY = top;\n      this.$emit('scrolly', top);\n    },\n    addVertical(y) {\n      this.scrollSet(null, this.currentY + y);\n      this.$emit('scrolly', this.currentY);\n    },\n    addHorizontal(x) {\n      this.scrollSet(this.currentX + x);\n      this.$emit('scrollx', this.currentX);\n    },\n    /**\n     * @method scrollStart\n     * @fires scrollStartX\n     * @fires scrollStartY\n     */\n    scrollStart(anim) {\n      this.scrollStartX(anim);\n      this.scrollStartY(anim);\n    },\n    /**\n     * @method scrollEnd\n     * @fires scrollEndX\n     * @fires scrollEndY\n     */\n    scrollEnd(anim) {\n      this.scrollEndX(anim);\n      this.scrollEndY(anim);\n    },\n    /**\n     * @method scrollBefore\n     * @fires scrollBeforeX\n     * @fires scrollBeforeY\n     */\n    /* scrollBefore(anim) {\n      this.scrollBeforeX(anim);\n      this.scrollBeforeY(anim);\n    }, */\n    /**\n     * @method scrollAfter\n     * @fires scrollAfterX\n     * @fires scrollAfterY\n     */\n    /* scrollAfter(anim) {\n      this.scrollAfterX(anim);\n      this.scrollAfterY(anim);\n    }, */\n    /**\n     * Scroll the x axis to the position 0\n     * @method scrollStartX\n     */\n    scrollStartX(anim) {\n      this.axisScrollTo(0, anim);\n    },\n    /**\n     * Scroll the y axis to the position 0\n     * @method scrollStartY\n     */\n    scrollStartY(anim) {\n      this.axisScrollTo(0, anim, true);\n    },\n    /**\n     * Scroll the x axis to the previous page\n     * @method scrollBeforeX\n     */\n    scrollBeforeX(anim) {\n      if (this.hasScrollX) {\n        this.scrollLevel(true, anim);\n      }\n    },\n    /**\n     * Scroll the y axis to the previous page\n     * @method scrollBeforeY\n     */\n    scrollBeforeY(anim) {\n      if (this.hasScrollY) {\n        this.scrollLevel(true, anim, true);\n      }\n    },\n    /**\n     * Scroll the x axis to the next page\n     * @method scrollBeforeX\n     */\n    scrollAfterX(anim) {\n      if (this.hasScrollX) {\n        this.scrollLevel(false, anim);\n      }\n    },\n    /**\n     * Scroll the y axis to the next page\n     * @method scrollBeforeY\n     */\n    scrollAfterY(anim) {\n      if (this.hasScrollY) {\n        this.scrollLevel(false, anim, true);\n      }\n    },\n    /**\n     * Scroll the x axis to the end\n     * @method scrollEndX\n     */\n    scrollEndX(anim) {\n      this.axisScrollTo(this.getRef('scrollContent').scrollWidth - this.offsetWidth, anim);\n    },\n    /**\n    * Scroll the y axis to the end\n    * @method scrollEndY\n    */\n    scrollEndY(anim) {\n      this.axisScrollTo(this.getRef('scrollContent').scrollHeight - this.offsetHeight, anim, true);\n    },\n    /**\n     * Handles the resize of the scroll\n     * @method onResize\n     * @fires keepCool\n     * @emits resize\n     * @returns Promise\n     */\n    onResize() {\n      const content = this.getRef('scrollContent');\n      if (this.scrollable) {\n        this.hasScrollX = (this.axis === 'both' || this.axis === 'x') && content.scrollWidth > this.offsetWidth;\n        this.hasScrollY = (this.axis === 'both' || this.axis === 'y') && content.scrollHeight > this.offsetHeight;\n        this.hasScroll = this.hasScrollY || this.hasScrollX;\n        this.$emit('resize');\n        return new Promise(resolve => {\n          resolve();\n        });\n      }\n    },\n    /**\n     * @method initSize\n     * @fires onResize\n     */\n    async initSize() {\n      this.scrollReady = true;\n      this.onResize(true);\n      this.ready = true;\n      this.$emit('resizecontent');\n      return this.$forceUpdate();\n    },\n    /**\n     * Creates a delay to set the scroll as ready\n     * @method waitReady\n     * @fires keepCool\n     * @fires onResize\n     */\n    preResize() {\n      /*\n      if (this.scrollable && this.$el.offsetParent && this.isActiveResizer()) {\n        let container = this.getRef('scrollContent');\n        let contentWidth = Math.max(container.scrollWidth, container.clientWidth);\n        let contentHeight = Math.max(container.scrollHeight, container.clientHeight);\n        if (\n          (\n            contentWidth\n            && (this.scrollWidth !== contentWidth)\n            && (\n              !this.scrollWidth\n              || (Math.abs(contentWidth - this.scrollWidth) > 1)\n            )\n          )\n          || (\n            contentHeight\n            && (this.scrollHeight !== contentHeight)\n            && (\n              !this.scrollHeight\n              || (Math.abs(contentHeight - this.scrollHeight) > 1)\n            )\n          )\n        ) {\n          let e = new Event('resizecontent', {\n            cancelable: true\n          });\n          this.$emit('resizecontent', e, {\n            width: contentWidth,\n            height: contentHeight\n          });\n           if (!e.defaultPrevented) {\n            this.onResize(true);\n          }\n        }\n      }\n      */\n    }\n  },\n  created() {\n    this.componentClass.push('bbn-resize-emitter');\n  },\n  /**\n   * @event mounted\n   * @fires waitReady\n   */\n  mounted() {\n    this.initSize();\n  },\n  watch: {\n    /**\n     * @watch scrollable\n     * @param newVal \n     * @fires onResize\n     */\n    scrollable(newVal) {\n      if (newVal) {\n        this.initSize();\n      } else {\n        this.hasScroll = false;\n        this.hasScrollX = false;\n        this.hasScrollY = false;\n      }\n    },\n    currentX(x) {\n      if (!x) {\n        this.$emit('reachleft');\n      } else {\n        let ct = this.$el;\n        if (ct && x + ct.clientWidth >= ct.scrollWidth) {\n          this.$emit('reachright');\n        }\n      }\n      this.$emit('scrollx', x);\n    },\n    currentY(y) {\n      if (!y) {\n        this.$emit('reachtop');\n      } else {\n        let ct = this.getRef('scrollContent');\n        if (ct && ct.scrollHeight && y + ct.offsetHeight >= ct.scrollHeight - 10) {\n          this.$emit('reachbottom');\n        }\n      }\n      this.$emit('scrolly', y);\n    },\n    stepX(val) {\n      this.currentStepX = bbn.fn.isDom(val) ? val.clientHeight : val;\n    },\n    stepY(val) {\n      this.currentStepY = bbn.fn.isDom(val) ? val.clientHeight : val;\n    }\n  },\n  components: {\n    scrollbar: {\n      template: `\n<div :class=\"[componentClass, 'bbn-radius', {\n        vertical: isVertical,\n        horizontal: !isVertical\n      }]\"\n      :style=\"barStyle\"\n      bbn-show=\"isVisible\"\n      @click=\"jump($event)\"\n      @dblclick=\"jump($event, true)\"\n      @mouseenter=\"isOverSlider = true\"\n      @mouseleave=\"isOverSlider = false\">\n  <div :class=\"{\n        'bbn-scroll-slider': true,\n        'bbn-primary': true,\n        'bbn-scroll-not-dragged': !dragging\n  }\"\n        :style=\"sliderStyle\"\n        ref=\"scrollSlider\"\n        @touchstart=\"startDrag\"\n        @mousedown=\"startDrag\">\n  </div>\n</div>\n      `,\n      mixins: [bbn.cp.mixins.basic, bbn.cp.mixins.keepCool],\n      props: {\n        /**\n         * The orientation of the scrollbar (required).\n         * @prop {String} orientation\n         */\n        orientation: {\n          required: true,\n          type: String\n        },\n        /**\n         * The instance of bbn-scroll.\n         * @prop {htmlElement} scroller\n         */\n        scroller: {\n          type: HTMLElement,\n          default() {\n            return this.$parent?.$options?._componentTag === 'bbn-scroll' ? this.$parent : null;\n          }\n        },\n        /**\n         * The rail.\n         * @prop {HTMLElement|Object} container\n         */\n        container: {\n          type: HTMLElement\n        },\n        /**\n         * Says if the scrollbar is shown, hidden, or shown when needed (auto).\n         * @prop {String|Boolean} ['auto'] invisible\n         */\n        invisible: {\n          type: [String, Boolean],\n          default: 'auto'\n        },\n        /**\n         * @prop {Number} [2] tolerance\n         */\n        tolerance: {\n          type: Number,\n          default: 2\n        },\n        /**\n         * @prop {Number} [0] scrolling\n         */\n        scrolling: {\n          type: Number,\n          default: 0\n        },\n        /**\n         * @prop {(HTMLElement|Array|Function)} [[]] scrollAlso\n         */\n        scrollAlso: {\n          type: [HTMLElement, Array, Function],\n          default() {\n            return [];\n          }\n        },\n        /**\n         * @prop {(Number|Object)} [0] initial\n         */\n        initial: {\n          type: [Number, Object],\n          default: 0\n        },\n        /**\n         * The color of the scrollbar.\n         * @prop {String} color\n         */\n        color: {\n          type: String\n        },\n        /**\n         * The minimum size in pixel of the scrollbar.\n         * @prop {Number} minSize\n         */\n        minSize: {\n          type: Number,\n          default: 20\n        },\n        /**\n         * @prop {(Number|Array)} offset\n         */\n        offset: {\n          type: [Number, Array],\n          default() {\n            return [0, 0];\n          }\n        },\n        /**\n         * @prop {Boolean} [false] keepVisible\n         */\n        keepVisible: {\n          type: Boolean,\n          default: false\n        }\n      },\n      data() {\n        return {\n          /**\n           * The container of the scrollbar or the ref scrol.\n           * @data {HTMLElement} realContainer\n           */\n          realContainer: this.container ? this.container : this.scroller ? this.scroller.getRef('scrollContent') : false,\n          /**\n           * The container's size.\n           * @data {Number} [0] containerSize\n           */\n          containerSize: 0,\n          /**\n           * The content size.\n           * @data {Number} [0] contentSize\n           */\n          contentSize: 0,\n          /**\n           * The container posiion.\n           * @data {Number} [0] containerPos\n           */\n          containerPos: 0,\n          /**\n           * The slider position.\n           * @data {Number} [0] sliderPos\n           */\n          sliderPos: 0,\n          /**\n           * @data {Boolean} [false] dragging\n           */\n          dragging: false,\n          /**\n           * The size.\n           * @data {Number} [100] size\n           */\n          size: 100,\n          /**\n           * The start.\n           * @data {Number} [0] start\n           */\n          start: 0,\n          /**\n           * The position.\n           * @data {Number} [0] position\n           */\n          position: this.scrolling,\n          /**\n           * @data {Number} [0] currentScroll\n           */\n          currentScroll: 0,\n          /**\n           * The move timeout.\n           * @data {Number} [0] moveTimeout\n           */\n          moveTimeout: 0,\n          /**\n           * True if the scrollbar is shown.\n           * @data {Boolean} show\n           */\n          show: this.invisible === 'auto' ? false : !this.invisible,\n          /**\n           * @data {Number|Object} scroll\n           */\n          initialScroll: this.initial,\n          /**\n           * @data {Boolean} [false] isReaching\n           */\n          isReaching: false,\n          /**\n           * @data {Boolean} [false] isActive\n           */\n          isActive: false,\n          /**\n           * @data {Boolean} [false] isOverSlider\n           */\n          isOverSlider: false,\n          animationInterval: false,\n          nextLevel: false,\n          adjustTimeout: false\n        };\n      },\n      computed: {\n        /**\n         * @computed showBother\n         * @returns Boolean\n         */\n        shouldBother() {\n          return this.contentSize > this.containerSize;\n        },\n        /**\n         * @computed ratio\n         * @returns {Number}\n         */\n        ratio() {\n          if (this.shouldBother) {\n            return (this.containerSize - this.offsetStart - this.offsetEnd) / this.contentSize;\n          }\n          return 1;\n        },\n        /**\n         * @computed sliderSize\n         * @return {Number}\n         */\n        sliderSize() {\n          if (this.shouldBother) {\n            let size = Math.round(this.containerSize * this.ratio);\n            if (size < this.minSize) {\n              size = this.minSize;\n            }\n            return size;\n          }\n          return 0;\n        },\n        /**\n         * @computed maxSliderPos\n         * @return {Number}\n         */\n        maxSliderPos() {\n          return this.shouldBother ? this.containerSize - this.sliderSize - this.offsetStart - this.offsetEnd : 0;\n        },\n        offsetStart() {\n          return bbn.fn.isArray(this.offset) ? this.offset[0] : this.offset;\n        },\n        offsetEnd() {\n          return bbn.fn.isArray(this.offset) ? this.offset[1] : this.offset;\n        },\n        /**\n         * @computed barStyle\n         * @returns {Object}\n         */\n        barStyle() {\n          return {\n            opacity: (this.show || this.keepVisible) && this.shouldBother ? 1 : 0,\n            [this.isVertical ? 'top' : 'left']: this.offsetStart + 'px',\n            [this.isVertical ? 'right' : 'bottom']: this.offsetEnd + 'px'\n          };\n        },\n        /**\n         * @computed sliderStyle\n         * @returns {Object}\n         */\n        sliderStyle() {\n          let res = {};\n          if (this.shouldBother) {\n            res[this.isVertical ? 'height' : 'width'] = this.sliderSize + 'px';\n            res[this.isVertical ? 'top' : 'left'] = this.sliderPos + 'px';\n            if (this.color) {\n              res.backgroundColor = this.color;\n            }\n          }\n          return res;\n        },\n        /**\n         * @computed isVertical\n         * @returns {Boolean}\n         */\n        isVertical() {\n          return this.orientation !== 'horizontal';\n        },\n        /**\n         * @computed realSize\n         * @returns {Number}\n         */\n        realSize() {\n          return this.containerSize ? this.containerSize / 100 * this.size : 0;\n        },\n        /**\n         * @computed isVisible\n         * @returns {Boolean}\n         */\n        isVisible() {\n          return this.invisible !== true && (this.scroller && this.scroller.isFocused && this.isActive || this.isActive);\n        }\n      },\n      methods: {\n        /**\n         * @method startDrag\n         * @param {Event} e\n         */\n        startDrag(e) {\n          if (this.realContainer) {\n            e.preventDefault();\n            e.stopPropagation();\n            e = e.changedTouches ? e.changedTouches[0] : e;\n            this.dragging = true;\n            // Start in pixels\n            this.start = this.isVertical ? e.pageY : e.pageX;\n          }\n        },\n        /**\n         * @method onDrag\n         * @param {Event} e\n         */\n        onDrag(e) {\n          if (this.realContainer && this.dragging && this.containerSize) {\n            this.keepCool(() => {\n              e = e.changedTouches ? e.changedTouches[0] : e;\n              // Movement in pixel\n              let newStart = this.isVertical ? e.pageY : e.pageX;\n              let movement = newStart - this.start;\n              if (movement && this.setSliderPos(this.sliderPos + movement)) {\n                this.adjustFromBar();\n              }\n              this.start = newStart;\n            });\n          }\n        },\n        /**\n         * @method stopDrag\n         */\n        stopDrag() {\n          this.dragging = false;\n        },\n        setSliderPos(pos) {\n          if (bbn.fn.isNumber(pos)) {\n            if (pos < 0) {\n              pos = 0;\n            }\n            if (pos > this.maxSliderPos) {\n              pos = this.maxSliderPos;\n            }\n            if (this.sliderPos !== pos) {\n              this.sliderPos = pos;\n              return true;\n            }\n          }\n          return false;\n        },\n        /**\n         * @method adjustFromContainer\n         * @param {HTMLElement} container\n         */\n        adjustFromContainer(container) {\n          if (this.shouldBother && !this.dragging) {\n            let prop = this.isVertical ? 'scrollTop' : 'scrollLeft';\n            let ok = false;\n            if (!container) {\n              container = this.realContainer;\n              if (this.scroller) {\n                this.containerPos = this.scroller['current' + (this.isVertical ? 'Y' : 'X')];\n                ok = true;\n              }\n            }\n            if (!ok) {\n              this.containerPos = container[prop];\n            }\n            this.setSliderPos(this.containerPos * this.ratio);\n            /*\n            if ( container !== this.realContainer ){\n              this.realContainer[prop] = this.containerPos;\n            }\n            */\n            bbn.fn.each(this.scrollableElements(), a => {\n              if (a !== container) {\n                a[prop] = this.containerPos;\n              }\n            });\n            this.overContent();\n          }\n        },\n        /**\n         * @method adjustFromBar\n         */\n        adjustFromBar(anim) {\n          if (this.shouldBother) {\n            this.$nextTick(() => {\n              this.containerPos = this.sliderPos / this.ratio;\n              let prop = this.isVertical ? 'scrollTop' : 'scrollLeft';\n              if (this.scroller) {\n                this.axisScrollTo(this.containerPos, anim);\n              } else {\n                this.realContainer[prop] = this.containerPos;\n                bbn.fn.each(this.scrollableElements(), a => {\n                  a[prop] = this.containerPos;\n                });\n              }\n              let e = new Event('scroll');\n              this.$emit('scroll' + (this.isVertical ? 'y' : 'x'), e, this.containerPos);\n            });\n          }\n        },\n        /**\n         * When the users jumps by clicking the scrollbar while a double click will activate tillEnd.\n         * @method jump\n         * @param {Event} e\n         * @param {Boolean} precise\n         */\n        jump(e, precise) {\n          if (this.realContainer) {\n            let isRail = e.target === this.$el;\n            if (isRail) {\n              let position = this.$position(this.getRef('scrollSlider'));\n              // Calculate the Movement\n              let clickPoint = this.isVertical ? e.pageY : e.pageX;\n              let isBefore = clickPoint < position[this.isVertical ? 'top' : 'left'];\n              let isAfter = clickPoint > position[this.isVertical ? 'bottom' : 'right'];\n              if (isBefore || isAfter) {\n                let movement = isBefore ? -(position[this.isVertical ? 'top' : 'left'] - clickPoint) : clickPoint - position[this.isVertical ? 'top' : 'left'] - position[this.isVertical ? 'height' : 'width'];\n                if (!precise) {\n                  if (isBefore) {\n                    this.scrollBefore(true);\n                  } else {\n                    this.scrollAfter(true);\n                  }\n                } else {\n                  this.axisScrollTo(Math.round((this.sliderPos + movement) / this.ratio));\n                }\n              }\n            }\n          }\n        },\n        /**\n         * @method scrollLevel\n         * @param {Boolean} before\n         */\n        scrollLevel(before, anim) {\n          if (this.sliderSize) {\n            let movement = Math.round(this.sliderSize - this.sliderSize * 0.1);\n            if (before) {\n              movement = -movement;\n            }\n            this.axisScrollTo(Math.round((this.sliderPos + movement) / this.ratio), anim);\n          }\n        },\n        /**\n         * @method scrollBefore\n         * @fires scrollLevel\n         */\n        scrollBefore(anim) {\n          return this.scrollLevel(true, anim);\n        },\n        /**\n         * @method scrollAfter\n         * @fires scrollLevel\n         */\n        scrollAfter(anim) {\n          return this.scrollLevel(false, anim);\n        },\n        /**\n         * Gets the array of scrollable elements according to scrollAlso attribute.\n         * @method scrollableElements\n         * @returns {Array}\n         */\n        scrollableElements() {\n          let tmp = this.scrollAlso;\n          if (bbn.fn.isFunction(tmp)) {\n            tmp = tmp();\n          } else if (!Array.isArray(tmp)) {\n            tmp = [tmp];\n          }\n          let res = [];\n          if (bbn.fn.isArray(tmp)) {\n            bbn.fn.each(tmp, a => {\n              if (a) {\n                res.push(a);\n              }\n            });\n          }\n          return res;\n        },\n        /**\n         * Calculates all the proportions based on content.\n         * @method onResize\n         */\n        onResize() {\n          if (this.scroller) {\n            let tmp1 = this.scroller[this.isVertical ? 'offsetHeight' : 'offsetWidth'];\n            let tmp2 = this.realContainer[this.isVertical ? 'scrollHeight' : 'scrollWidth'];\n            if (tmp1 < 20) {\n              this.containerSize = 0;\n              this.contentSize = 0;\n              this.size = 0;\n              this.isActive = false;\n              return;\n            }\n            if (tmp1 !== this.containerSize || tmp2 !== this.contentSize) {\n              this.containerSize = tmp1 || 0;\n              this.contentSize = tmp2 || 0;\n            }\n            this.isActive = this.contentSize > this.containerSize + 2;\n          }\n        },\n        /**\n         * Sets all event listeners.\n         * @method initContainer\n         */\n        initContainer() {\n          if (this.scroller && !this.isInit) {\n            this.onResize();\n            if (!this.container && this.scroller) {\n              this.scroller.$on(\"resize\", this.onResize);\n              this.axisScrollTo(this.initialScroll);\n              this.scroller.$on(\"scroll\", () => this.adjustFromContainer());\n              this.scroller.$on(\"mousemove\", this.overContent);\n            } else {\n              this.container.addEventListener(\"mousemove\", this.overContent);\n              this.container.addEventListener('scroll', () => this.adjustFromContainer());\n            }\n            bbn.fn.each(this.scrollableElements(), a => {\n              a.addEventListener('scroll', () => this.adjustFromContainer(), {\n                passive: true\n              });\n              a.addEventListener('scroll', this.overContent);\n            });\n            this.isInit = true;\n          }\n        },\n        /**\n         * When the mouse is over the content.\n         * @method overContent\n         */\n        overContent() {\n          this.keepCool(() => {\n            clearTimeout(this.moveTimeout);\n            if (!this.show) {\n              this.show = true;\n            }\n            this.moveTimeout = setTimeout(() => {\n              if (!this.isOverSlider) {\n                this.hideSlider();\n              }\n            }, 500);\n          }, 'overContent', 250);\n        },\n        /**\n         * @method showSlider\n         */\n        showSlider() {\n          clearTimeout(this.moveTimeout);\n          if (!this.show) {\n            this.show = true;\n          }\n        },\n        /**\n         * @method hideSlider\n         */\n        hideSlider() {\n          if (!this.dragging && this.show) {\n            this.show = false;\n          }\n        },\n        /**\n         * Animates the bar.\n         * @method animateBar\n         */\n        animateBar() {\n          return;\n          if (this.$refs.scrollSlider) {\n            //this.dragging = true;\n            let anim = {};\n            if (this.isVertical) {\n              anim.height = this.size + '%';\n              anim.top = this.position + '%';\n            } else {\n              anim.width = this.size + '%';\n              anim.left = this.position + '%';\n            }\n          }\n        },\n        /**\n         * Smooth scroll animation\n         * @param {int} endX: destination x coordinate\n         * @param {int} endY: destination y coordinate\n         * @param {int} duration: animation duration in ms\n         */\n        smoothScrollTo(end, duration) {\n          return new Promise((resolve, reject) => {\n            const start = this.realContainer['scroll' + (this.isVertical ? 'Top' : 'Left')];\n            const distance = end - start;\n            const startTime = new Date().getTime();\n            duration = typeof duration !== 'undefined' ? duration : this.scroller.duration || 400;\n\n            // Easing function\n            const easeInOutQuart = (time, from, distance, duration) => {\n              if ((time /= duration / 2) < 1) return distance / 2 * time * time * time * time + from;\n              return -distance / 2 * ((time -= 2) * time * time * time - 2) + from;\n            };\n            if (this.animationInterval) {\n              clearInterval(this.animationInterval);\n            }\n            this.animationInterval = setInterval(() => {\n              const time = new Date().getTime() - startTime;\n              let newPos = easeInOutQuart(time, start, distance, duration);\n              if (time >= duration) {\n                clearInterval(this.animationInterval);\n                newPos = end;\n                resolve();\n              }\n              this.nextLevel = Math.round(newPos);\n              this.realContainer['scroll' + (this.isVertical ? 'Top' : 'Left')] = this.nextLevel;\n            }, 1000 / 60); // 60 fps\n          });\n        },\n        /**\n         * Scrolls to the given position using the given animation.\n         * @method scrollTo\n         * @fires adjustFromContainer\n         */\n        axisScrollTo(val, anim) {\n          return new Promise(resolve => {\n            if (this.shouldBother) {\n              if (this.animationInterval) {\n                clearInterval(this.animationInterval);\n              }\n              let num = 0;\n              let ele = false;\n              if (val) {\n                if (this.$isComponent(val) && val.$el) {\n                  ele = val.$el;\n                } else if (bbn.fn.isDom(val)) {\n                  ele = val;\n                }\n              }\n              if (ele) {\n                let container = ele.offsetParent;\n                // The position is equal to the offset of the target\n                // minus the size of the viewport, which isn't scrolled,\n                // plus half the size of the viewport to center it\n                // therefore removing half of the viewport does the trick\n                num = ele[this.isVertical ? 'offsetTop' : 'offsetLeft'] - Math.round(this.containerSize / 2);\n                while (container && container !== this.scroller.$el) {\n                  if (container.contains(this.scroller.$el)) {\n                    break;\n                  } else {\n                    num += container[this.isVertical ? 'offsetTop' : 'offsetLeft'];\n                    container = container.offsetParent;\n                  }\n                }\n              } else if (bbn.fn.isPercent(val)) {\n                num = Math.round(parseFloat(val) * this.contentSize / 100);\n              } else if (bbn.fn.isNumber(val)) {\n                num = val;\n              }\n              if (bbn.fn.isNumber(num)) {\n                //bbn.fn.log(\"scrollTo part 1\", num);\n                if (num < 0) {\n                  num = 0;\n                } else if (num > this.contentSize - this.containerSize + 100) {\n                  num = this.contentSize - this.containerSize;\n                }\n\n                //bbn.fn.log(\"scrollTo part 2\", num);\n                this.containerPos = num;\n                if (anim) {\n                  this.smoothScrollTo(num).then(() => {\n                    resolve();\n                  });\n                } else {\n                  this.sliderPos = this.containerPos * this.ratio;\n                  this.nextLevel = Math.round(num);\n                  this.realContainer['scroll' + (this.isVertical ? 'Top' : 'Left')] = num;\n                  resolve();\n                }\n              }\n            }\n          });\n        },\n        /**\n         * Moves the scrollbar to the position 0.\n         * @method scrollStart\n         * @fires scrollTo\n         */\n        scrollStart(anim) {\n          this.axisScrollTo(0, anim);\n        },\n        /**\n        * Moves the scrollbar to the end position.\n        * @method scrollEnd\n        * @fires scrollTo\n        */\n        scrollEnd(anim) {\n          this.axisScrollTo(this.contentSize - this.containerSize, anim);\n        }\n      },\n      watch: {\n        /**\n         * @watch isOverSlider\n         * @fires initContainer\n         */\n        isOverSlider(v) {\n          if (!this.dragging) {\n            if (!v) {\n              this.overContent();\n            } else if (!this.show) {\n              this.showSlider();\n            }\n          }\n        },\n        /**\n         * @watch container\n         * @fires initContainer\n         */\n        container() {\n          this.initContainer();\n        },\n        /**\n         * @watch show\n         * @fires onResize\n         */\n        show(v) {\n          if (v) {\n            this.onResize();\n          }\n        },\n        /**\n         * @watch sliderPos\n         * @fires showSlider\n         */\n        sliderPos() {\n          this.showSlider();\n        },\n        dragging(v) {\n          if (this.scroller) {\n            this.scroller.isDragging = v;\n          }\n        }\n      },\n      /**\n       * Adds the css class for the orientation of the scrollbar.\n       * @event created\n       */\n      created() {\n        this.componentClass.push(this.orientation);\n      },\n      /**\n       * Adds the events listener and launch the resize of the scrollbar.\n       * @event mounted\n       */\n      mounted() {\n        this.initContainer();\n        document.addEventListener(\"mousemove\", this.onDrag);\n        document.addEventListener(\"touchmove\", this.onDrag);\n        document.addEventListener(\"mouseup\", this.stopDrag);\n        document.addEventListener(\"touchend\", this.stopDrag);\n        this.onResize();\n        this.overContent();\n      },\n      /**\n       * Removes the events listener.\n       * @event beforeDestroy\n       */\n      beforeDestroy() {\n        if (this.realContainer && this.isInit) {\n          if (!this.container && this.scroller) {\n            this.scroller.$off(\"resize\", this.onResize);\n            this.scroller.$off(\"scroll\", () => this.adjustFromContainer());\n            this.scroller.$off(\"mousemove\", this.overContent);\n          } else {\n            this.container.removeEventListener('mousemove', this.overContent);\n            this.container.removeEventListener('scroll', () => this.adjustFromContainer);\n          }\n          bbn.fn.each(this.scrollableElements(), a => {\n            a.removeEventListener('scroll', () => this.adjustFromContainer(), {\n              passive: true\n            });\n            a.removeEventListener('mousemove', this.overContent);\n          });\n        }\n        document.removeEventListener(\"mousemove\", this.onDrag);\n        document.removeEventListener(\"touchmove\", this.onDrag);\n        document.removeEventListener(\"mouseup\", this.stopDrag);\n        document.removeEventListener(\"touchend\", this.stopDrag);\n      }\n    }\n  }\n};\n\n\nlet cpLang = {};\nif (bbn.env.lang) {\n  try {\n    const lang = bbn.env.lang || 'en';\n    cpLang = await __webpack_require__(\"./src/components/scroll/_i18n lazy recursive ^\\\\.\\\\/scroll\\\\..*\\\\.lang$\")(`./scroll.${lang}.lang`);\n    if (cpLang.default) {\n      cpLang = cpLang.default;\n    }\n  } catch (err) {}\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  name: 'bbn-scroll',\n  definition: cpDef,\n  template: _scroll_html__WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n  style: _scroll_less__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  lang: cpLang\n});\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://@bbn/bbn-cp/./src/components/scroll/scroll.js?");

/***/ }),

/***/ "./src/components/scroll/scroll.less":
/*!*******************************************!*\
  !*** ./src/components/scroll/scroll.less ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ \"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ \"./node_modules/style-loader/dist/runtime/styleDomAPI.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertBySelector.js */ \"./node_modules/style-loader/dist/runtime/insertBySelector.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ \"./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ \"./node_modules/style-loader/dist/runtime/insertStyleElement.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ \"./node_modules/style-loader/dist/runtime/styleTagTransform.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _node_modules_css_loader_dist_cjs_js_node_modules_less_loader_dist_cjs_js_scroll_less__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/less-loader/dist/cjs.js!./scroll.less */ \"./node_modules/css-loader/dist/cjs.js!./node_modules/less-loader/dist/cjs.js!./src/components/scroll/scroll.less\");\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());\noptions.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());\noptions.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, \"head\");\noptions.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());\noptions.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());\n\nvar update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_node_modules_less_loader_dist_cjs_js_scroll_less__WEBPACK_IMPORTED_MODULE_6__[\"default\"], options);\n\n\n\n\n       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_node_modules_less_loader_dist_cjs_js_scroll_less__WEBPACK_IMPORTED_MODULE_6__[\"default\"] && _node_modules_css_loader_dist_cjs_js_node_modules_less_loader_dist_cjs_js_scroll_less__WEBPACK_IMPORTED_MODULE_6__[\"default\"].locals ? _node_modules_css_loader_dist_cjs_js_node_modules_less_loader_dist_cjs_js_scroll_less__WEBPACK_IMPORTED_MODULE_6__[\"default\"].locals : undefined);\n\n\n//# sourceURL=webpack://@bbn/bbn-cp/./src/components/scroll/scroll.less?");

/***/ })

}]);