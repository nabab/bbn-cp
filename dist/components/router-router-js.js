"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_bbn_bbn_cp"] = self["webpackChunk_bbn_bbn_cp"] || []).push([["components/router-router-js"],{

/***/ "./src/components/router/_components/listItem.js":
/*!*******************************************************!*\
  !*** ./src/components/router/_components/listItem.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  template: `\n  <div class=\"bbn-w-100 bbn-vmiddle bbn-bordered-bottom\"\n       style=\"height: 2.5rem\"\n       @mouseenter=\"isHover = true\"\n       @mouseleave=\"isHover = false\">\n    <div class=\"bbn-flex-width bbn-vmiddle bbn-h-100\">\n      <div class=\"bbn-vmiddle bbn-h-100\">\n        <div bbn-for=\"(p, i) in source.parents\"\n             class=\"bbn-vmiddle bbn-h-100\">\n          <div class=\"bbn-vmiddle bbn-h-100\"\n              :style=\"{\n                backgroundColor: !isHover && p.view.bcolor ? p.view.bcolor : null,\n                color: !isHover && p.view.fcolor ? p.view.fcolor : null\n              }\">\n            <div class=\"bbn-router-breadcrumb-badge-container bbn-middle\"\n                bbn-if=\"numProperties(p.view.events)\">\n              <span class=\"bbn-badge bbn-small bbn-bg-red\"\n                    bbn-text=\"numProperties(p.view.events)\"/>\n            </div>\n            <div class=\"bbn-router-breadcrumb-loader bbn-border-text\"\n                :style=\"{borderColor: p.view.fcolor || null}\"\n                bbn-show=\"p.view.loading\"/>\n            <div :class=\"['bbn-router-breadcrumb-element', 'bbn-h-100', 'bbn-vmiddle', {'bbn-router-breadcrumb-dirty': p.view.dirty}]\">\n              <span bbn-if=\"p.view.icon\"\n                    :title=\"p.view.title\"\n                    :class=\"'bbn-router-breadcrumb-element-icon bbn-h-100 bbn-vmiddle bbn-right-xsspace' + (p.view.notext ? ' bbn-lg' : ' bbn-m')\">\n                <i :class=\"p.view.icon\"/>\n              </span>\n              <span bbn-if=\"!p.view.notext\"\n                    class=\"bbn-router-breadcrumb-element-text\"\n                    :title=\"p.view.title && (p.view.title.length > p.maxTitleLength) ? p.view.title : ''\"\n                    bbn-html=\"p.view.title ? shortTitle(p) : '` + bbn._('Untitled') + `'\"/>\n            </div>\n          </div>\n          <div>\n            <i class=\"nf nf-fa-angle_right bbn-hsmargin bbn-router-breadcrumb-arrow\"/>\n          </div>\n        </div>\n  \n        <div class=\"bbn-vmiddle bbn-h-100\"\n            :style=\"{\n              backgroundColor: !isHover && source.view.bcolor ? source.view.bcolor : null,\n              color: !isHover && source.view.fcolor ? source.view.fcolor : null\n            }\">\n          <div class=\"bbn-router-breadcrumb-badge-container bbn-middle\"\n               bbn-if=\"numProperties(source.view.events)\">\n            <span class=\"bbn-badge bbn-small bbn-bg-red\"\n                  bbn-text=\"numProperties(source.view.events)\"/>\n          </div>\n          <div class=\"bbn-router-breadcrumb-loader bbn-border-text\"\n               :style=\"{borderColor: source.view.fcolor || null}\"\n               bbn-show=\"source.view.loading\"/>\n          <div :class=\"['bbn-router-breadcrumb-element', 'bbn-h-100', 'bbn-vmiddle', {'bbn-router-breadcrumb-dirty': source.view.dirty}]\">\n            <span bbn-if=\"source.view.icon\"\n                  :title=\"source.view.title\"\n                  :class=\"'bbn-router-breadcrumb-element-icon bbn-h-100 bbn-vmiddle bbn-right-xsspace' + (source.view.notext ? ' bbn-lg' : ' bbn-m')\">\n              <i :class=\"source.view.icon\"/>\n            </span>\n            <span bbn-if=\"!source.view.notext\"\n                  class=\"bbn-router-breadcrumb-element-text\"\n                  :title=\"source.view.title && (source.view.title.length > source.maxTitleLength) ? source.view.title : ''\"\n                  bbn-html=\"source.view.title ? (source.parents.length? shortTitle(source): source.view.title) : '` + bbn._('Untitled') + `'\"/>\n          </div>\n        </div>\n  \n        <div bbn-for=\"(p, i) in source.children\"\n             class=\"bbn-vmiddle bbn-h-100\">\n          <div>\n            <i class=\"nf nf-fa-angle_right bbn-hsmargin bbn-large bbn-router-breadcrumb-arrow\"/>\n          </div>\n          <div class=\"bbn-vmiddle bbn-h-100\"\n               :style=\"{\n                 backgroundColor: !isHover && p.view.bcolor ? p.view.bcolor : null,\n                 color: !isHover && p.view.fcolor ? p.view.fcolor : null\n               }\">\n            <div class=\"bbn-router-breadcrumb-badge-container bbn-middle\"\n                bbn-if=\"numProperties(p.view.events)\">\n              <span class=\"bbn-badge bbn-small bbn-bg-red\"\n                    bbn-text=\"numProperties(p.view.events)\"/>\n            </div>\n            <div class=\"bbn-router-breadcrumb-loader bbn-border-text\"\n                :style=\"{borderColor: p.view.fcolor || null}\"\n                bbn-show=\"p.view.loading\"/>\n            <div :class=\"['bbn-router-breadcrumb-element', 'bbn-h-100', 'bbn-vmiddle', {'bbn-router-breadcrumb-dirty': p.view.dirty}]\">\n              <span bbn-if=\"p.view.icon\"\n                    :title=\"p.view.title\"\n                    :class=\"'bbn-router-breadcrumb-element-icon bbn-h-100 bbn-vmiddle bbn-right-xsspace' + (p.view.notext ? ' bbn-lg' : ' bbn-m')\">\n                <i :class=\"p.view.icon\"/>\n              </span>\n              <span bbn-if=\"!p.view.notext\"\n                    class=\"bbn-router-breadcrumb-element-text\"\n                    :title=\"p.view.title && (p.view.title.length > p.maxTitleLength) ? p.view.title : ''\"\n                    bbn-html=\"p.view.title ? shortTitle(p) : '` + bbn._('Untitled') + `'\"/>\n               </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"bbn-flex-fill bbn-h-100\"\n           :style=\"!isHover ? lastColors : {}\">\n        &nbsp;\n      </div>\n      <div bbn-if=\"!source.view.fixed\"\n            class=\"bbn-vmiddle bbn-h-100 bbn-hpadded\"\n            @mousedown.prevent.stop=\"close\"\n            @mouseup.prevent.stop\n            :style=\"!isHover ? lastColors : {}\">\n        <i class=\"nf nf-fa-times_rectangle\"/>\n      </div>\n    </div>\n  </div>\n    `,\n  props: {\n    /**\n     * @prop {Object} source\n     * @memberof listItem\n     */\n    source: {\n      type: Object,\n      required: true\n    }\n  },\n  data() {\n    return {\n      isHover: false\n    };\n  },\n  computed: {\n    lastColors() {\n      let e = this.source.children.length ? this.source.children[this.source.children.length - 1].view : this.source.view;\n      let r = {};\n      if (e.bcolor) {\n        r.backgroundColor = e.bcolor;\n      }\n      if (e.fcolor) {\n        r.color = e.fcolor;\n      }\n      return r;\n    }\n  },\n  methods: {\n    numProperties: bbn.fn.numProperties,\n    /**\n     * @method close\n     * @memberof listItem\n     */\n    close() {\n      let k = this.source.key;\n      if (this.source.closeAction()) {\n        let list = this.closest('bbn-list');\n        if (bbn.cp.isComponent(list) && list.source) {\n          let idx = bbn.fn.search(list.source, {\n            'data.key': k\n          });\n          if (idx > -1) {\n            list.source.splice(idx, 1);\n            if (list.source.length) {\n              list.updateData();\n              this.$nextTick(() => {\n                list.closest('bbn-floater').onResize(true);\n              });\n            } else {\n              this.closest('bbn-floater').close();\n            }\n          }\n        }\n      }\n    },\n    shortTitle(src) {\n      return src.view.title.length > src.maxTitleLength ? bbn.fn.shorten(src.view.title, src.maxTitleLength) : src.view.title;\n    }\n  }\n});\n\n//# sourceURL=webpack://@bbn/bbn-cp/./src/components/router/_components/listItem.js?");

/***/ }),

/***/ "./src/components/router/_components/searchResult.js":
/*!***********************************************************!*\
  !*** ./src/components/router/_components/searchResult.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  template: `\n<div class=\"bbn-router-search-result bbn-w-100 bbn-spadded bbn-default-alt-background bbn-p bbn-hover-effect-element\"\n :style=\"{backgroundColor: source.bcolor, color: source.fcolor}\">\n<div class=\"bbn-flex-width\">\n<div class=\"bbn-flex-fill bbn-nowrap bbn-ellipsis\">\n  <span class=\"bbn-s bbn-badge bbn-bg-blue\"\n        bbn-text=\"source.score\"/>\n  <span bbn-text=\"_('Opened container')\"/>\n  <em bbn-text=\"'URL: ' + source.url\"></em><br>\n  <span class=\"bbn-lg\" bbn-text=\"source.title\"></span>\n</div>\n<div class=\"bbn-hlpadded bbn-h-100 bbn-r\"\n      style=\"vertical-align: middle\"\n      bbn-html=\"source.match\">\n</div>\n</div>\n</div>\n`,\n  props: {\n    source: {\n      type: Object,\n      required: true\n    }\n  }\n});\n\n//# sourceURL=webpack://@bbn/bbn-cp/./src/components/router/_components/searchResult.js?");

/***/ }),

/***/ "./src/components/router/_mixins/2move.js":
/*!************************************************!*\
  !*** ./src/components/router/_mixins/2move.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _bbn_bbn__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @bbn/bbn */ \"./node_modules/@bbn/bbn/dist/index.js\");\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  props: {\n    /**\n     * The confirm message when you close an unsaved container.\n     * @prop {(Boolean|String|Function)} ['Are you sure you want to discard the changes you made in this tab?'] confirmLeave\n     */\n    confirmLeave: {\n      type: [Boolean, String, Function],\n      default: _bbn_bbn__WEBPACK_IMPORTED_MODULE_0__[\"default\"]._(\"Are you sure you want to discard the changes you made in this page?\")\n    }\n  },\n  methods: {\n    checkLoaded(idx) {\n      return this.views[idx] &&\n      //!this.views[idx].real &&\n      this.views[idx].load && this.urls[this.views[idx].uid] && this.urls[this.views[idx].uid].isLoaded;\n    },\n    /**\n    * @method reload\n    * @param {Number} idx\n    * @fires route\n    */\n    async reload(idx, force) {\n      if (this.isValidIndex(idx) && this.checkLoaded(idx)) {\n        let url = this.views[idx].current;\n        let rurl = this.views[idx].url;\n        _bbn_bbn__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fn.log([\"RELOAD\", idx, url, rurl, this.baseURL]);\n        if (!force && !this.ignoreDirty && this.isDirty && this.views[idx].dirty) {\n          this.confirm(this.confirmLeave, () => {\n            if (this.checkLoaded(idx)) {\n              // Looking for dirty ones in registered forms of each container\n              let forms = this.urls[this.views[idx].uid].forms;\n              if (Array.isArray(forms) && forms.length) {\n                _bbn_bbn__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fn.each(forms, (f, k) => {\n                  f.reset();\n                });\n              }\n              if (this.urls[this.views[idx].uid].popups?.length) {\n                this.urls[this.views[idx].uid].popups.splice(0);\n              }\n              this.remove(idx).then(() => {\n                this.add({\n                  url: rurl,\n                  current: url,\n                  selected: true,\n                  load: true\n                }, idx);\n              });\n            }\n          });\n        } else {\n          this.remove(idx).then(() => {\n            this.add({\n              url: rurl,\n              current: url,\n              selected: true,\n              load: true\n            }, idx);\n          });\n        }\n      }\n    }\n  }\n});\n\n//# sourceURL=webpack://@bbn/bbn-cp/./src/components/router/_mixins/2move.js?");

/***/ }),

/***/ "./src/components/router/_mixins/breadcrumb.js":
/*!*****************************************************!*\
  !*** ./src/components/router/_mixins/breadcrumb.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  props: {\n    /**\n     * Set it to true if you want to show the breadcrumb instead of the tabs.\n     * @prop {Boolean} [false] breadcrumb\n     */\n    breadcrumb: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * Set it to true if you want to set this nav as a master.\n     * @prop {Boolean} [false] master\n     */\n    master: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    return {\n      /**\n       * Shows if the navigation mode is set to breacrumb.\n       * @data {Boolean} isBreadcrumb\n       */\n      isBreadcrumb: !!this.breadcrumb,\n      /**\n       * itsMaster.isBreadcrumb watcher.\n       * @data {Boolean} breadcrumbWatcher\n       */\n      breadcrumbWatcher: false,\n      /**\n       * List of breadcrumbs\n       * @data {Array} breadcrumbsList\n       */\n      breadcrumbsList: []\n    };\n  },\n  computed: {\n    /**\n     * Returns the breadcrumbs array\n     * @computed breadcrumbs\n     * @return {Array}\n     */\n    breadcrumbs() {\n      let res = [];\n      if (this.isBreadcrumb) {\n        res.push(this);\n      }\n      if (this.breadcrumbsList.length) {\n        res.push(...this.getBreadcrumbs(this.selected));\n      }\n      return res;\n    },\n    /**\n     * The master bbn-router of this one.\n     * @computed itsMaster\n     * @return {bbnCp}\n     */\n    itsMaster() {\n      let r = this;\n      if (this.master) {\n        return r;\n      }\n      if (this.parents.length) {\n        let i = 0;\n        while (this.parents[i] && this.parents[i].isBreadcrumb) {\n          r = this.parents[i];\n          i++;\n          if (r.master) {\n            break;\n          }\n        }\n      }\n      return r;\n    },\n    isBreadcrumbMaster() {\n      if (this.isBreadcrumb) {\n        return this.itsMaster === this;\n      }\n      return false;\n    }\n  },\n  methods: {\n    //Breadcrumb\n    /**\n     * @method registerBreadcrumb\n     * @param {bbnCp} bc\n     * @param {String} url\n     */\n    registerBreadcrumb(bc) {\n      let url = bbn.fn.substr(bc.baseURL, 0, bc.baseURL.length - 1);\n      this.breadcrumbsList.push(bc);\n      if (this.itsMaster && !this.master) {\n        this.itsMaster.breadcrumbsList.push(bc);\n      }\n    },\n    /**\n     * @method unregisterBreadcrumb\n     * @param {bbnCp} bc\n     * @param {String} url\n     */\n    unregisterBreadcrumb(bc) {\n      if (this.breadcrumbsList) {\n        let idx = bbn.fn.search(this.breadcrumbsList, {\n          baseURL: bc.baseURL\n        });\n        if (idx !== -1) {\n          this.breadcrumbsList.splice(idx, 1);\n        }\n        if (this.itsMaster && !this.master) {\n          idx = bbn.fn.search(this.itsMaster.breadcrumbsList, {\n            baseURL: bc.baseURL\n          });\n          if (idx !== -1) {\n            this.itsMaster.breadcrumbsList.splice(idx, 1);\n          }\n        }\n      }\n    },\n    getBreadcrumbs(idx) {\n      let ret = [];\n      if (bbn.fn.isNumber(idx) && this.views[idx]) {\n        let url = this.views[idx].url,\n          bc = bbn.fn.getRow(this.breadcrumbsList, {\n            baseURL: url + '/'\n          });\n        if (this.urls[this.views[idx].uid] && bc) {\n          ret.push(...bc.breadcrumbs);\n        }\n      }\n      return ret;\n    }\n  },\n  watch: {\n    /**\n     * @watch itsMaster\n     * @fires breadcrumbWatcher\n     */\n    itsMaster(newVal, oldVal) {\n      if (this.nav && newVal !== oldVal) {\n        this.isBreadcrumb = newVal ? newVal.isBreadcrumb : this.breadcrumb;\n        if (this.breadcrumbWatcher) {\n          this.breadcrumbWatcher();\n        }\n        if (newVal) {\n          /**\n           * @watch itsMaster.isBreadcrumb\n           */\n          this.breadcrumbWatcher = this.$watch('itsMaster.isBreadcrumb', isB => {\n            this.isBreadcrumb = isB;\n          });\n        }\n      }\n    },\n    breadcrumb(v) {\n      this.isBreadcrumb = v;\n    },\n    /**\n     * @watch isBreadcrumb\n     * @fires setConfig\n     */\n    isBreadcrumb(newVal) {\n      this.$nextTick(() => {\n        if (this.ready) {\n          this.setConfig();\n          this.onResize();\n        }\n      });\n    }\n  },\n  beforeMount() {\n    //Breadcrumb\n    //bbn.fn.warning(\"BEFORE MOUNT ROUTER\")\n\n    //Get config from the storage\n    if (!this.single & this.nav) {\n      let storage = this.getStorage(this.parentContainer ? this.parentContainer.getFullURL() : this.storageName);\n      if (storage) {\n        if (storage.breadcrumb !== undefined) {\n          this.isBreadcrumb = storage.breadcrumb;\n        }\n      }\n      if (!this.master && this.parent && this.parentContainer) {\n        this.parent.registerBreadcrumb(this);\n        bbn.fn.log(\"VIEW ON BREADCUMB\");\n        this.parentContainer.$on('view', () => {\n          this.parent.registerBreadcrumb(this);\n        }, true);\n        this.parentContainer.$on('unview', () => {\n          this.parent.unregisterBreadcrumb(this);\n        }, true);\n        if (this.parentContainer.isVisible) {\n          this.parent.registerBreadcrumb(this);\n        }\n      }\n    }\n  },\n  beforeDestroy() {\n    if (!this.single & this.nav && !this.master && this.parent) {\n      this.parent.unregisterBreadcrumb(this);\n    }\n  }\n});\n\n//# sourceURL=webpack://@bbn/bbn-cp/./src/components/router/_mixins/breadcrumb.js?");

/***/ }),

/***/ "./src/components/router/_mixins/component.js":
/*!****************************************************!*\
  !*** ./src/components/router/_mixins/component.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  props: {\n    /**\n     * If this is set, along with componentSource and componentUrl a single container with this component will be created.\n     * @prop {(String|Object)} component\n     */\n    component: {\n      type: [String, Object]\n    },\n    /**\n     * The source for the component.\n     * @prop {Object} componentSource\n     */\n    componentSource: {\n      type: Object\n    },\n    /**\n     * The property to get from the componentSource to use for setting the URL.\n     * @prop {String} componentUrl\n     */\n    componentUrl: {\n      type: String\n    }\n  },\n  methods: {}\n});\n\n//# sourceURL=webpack://@bbn/bbn-cp/./src/components/router/_mixins/component.js?");

/***/ }),

/***/ "./src/components/router/_mixins/config.js":
/*!*************************************************!*\
  !*** ./src/components/router/_mixins/config.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  data() {\n    return {\n      /**\n       * If true the configuration will be shown\n       * @data {Boolean} visual\n       */\n      showRouterCfg: false\n    };\n  },\n  methods: {\n    /**\n     * @method setconfig\n     * @fires setStorage\n     * @fires getConfig\n     */\n    setConfig() {\n      if (this.autoload && this.isInit) {\n        this.setStorage(this.getConfig(), this.parentContainer ? this.parentContainer.getFullURL() : this.storageName);\n        //this.$forceUpdate();\n      }\n    },\n    /**\n     * @method getConfig\n     * @return {Object}\n     */\n    getConfig() {\n      let cfg = {\n        baseURL: this.parentContainer ? this.parentContainer.getFullURL() : this.storageName,\n        views: [],\n        breadcrumb: this.isBreadcrumb,\n        visual: this.isVisual,\n        orientation: this.lockedOrientation ? this.visualOrientation : null,\n        panes: this.currentPanes.map(a => {\n          return {\n            id: a.id,\n            tabs: a.tabs.map(b => b.url),\n            selected: a.selected\n          };\n        })\n      };\n      bbn.fn.each(this.views, (obj, i) => {\n        if (obj.url && obj.load) {\n          let res = {\n            url: obj.url,\n            icon: obj.icon || false,\n            notext: obj.notext || false,\n            load: true,\n            loaded: false,\n            title: obj.title ? obj.title : bbn._('Untitled'),\n            fixed: !!obj.fixed,\n            pinned: !!obj.pinned,\n            pane: obj.pane || false,\n            current: obj.current ? obj.current : obj.url,\n            cfg: {},\n            real: obj.real,\n            last: obj.last\n          };\n          if (obj.bcolor) {\n            res.bcolor = obj.bcolor;\n          }\n          if (obj.fcolor) {\n            res.fcolor = obj.fcolor;\n          }\n          cfg.views.push(res);\n        }\n      });\n      return cfg;\n    },\n    /**\n     * @method unsetConfig\n     * @fires unsetStorage\n     */\n    unsetConfig() {\n      if (this.autoload) {\n        this.unsetStorage(this.parentContainer ? this.parentContainer.getFullURL() : this.storageName);\n      }\n    }\n  }\n});\n\n//# sourceURL=webpack://@bbn/bbn-cp/./src/components/router/_mixins/config.js?");

/***/ }),

/***/ "./src/components/router/_mixins/elements.js":
/*!***************************************************!*\
  !*** ./src/components/router/_mixins/elements.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  methods: {\n    /**\n     * @method getVue\n     * @fires isValidIndex\n     * @return {Vue|Boolean}\n     */\n    getVue(idx) {\n      return this.getContainer(idx);\n    },\n    /**\n     * Returns the corresponding container's component's DOM element.\n     * @method getContainer\n     * @param {Number} idx\n     * @return {bbnCp}\n     */\n    getContainer(idx) {\n      if (idx === undefined) {\n        idx = this.selected;\n      }\n      return this.urls[this.views[idx]?.uid];\n    },\n    /**\n     * Returns the corresponding container's component's DOM element.\n     * @method getDOMContainer\n     * @param {Number} idx\n     * @fires getContainer\n     * @return {HTMLElement|Boolean}\n     */\n    getDOMContainer(idx) {\n      if (idx === undefined) {\n        idx = this.selected;\n      }\n      let c = this.getContainer(idx);\n      return c ? c.$el : false;\n    },\n    /**\n     * @method getFinalContainer\n     * @param misc\n     * @fires getIndex\n     * @fires getSubRouter\n     * @fires getContainer\n     * @return {bbnCp}\n     */\n    getFinalContainer(misc) {\n      let idx = this.getIndex(misc);\n      if (idx === undefined) {\n        idx = this.selected;\n      }\n      let router = this.urls[this.views[idx].uid].subrouter;\n      if (router) {\n        return router.getFinalContainer();\n      }\n      return this.getContainer(idx);\n    },\n    /**\n     * @method getRealVue\n     * @param misc\n     * @fires getFinalContainer\n     * @return {bbnCp}\n     */\n    getRealVue(misc) {\n      return this.getFinalContainer(misc);\n    }\n  }\n});\n\n//# sourceURL=webpack://@bbn/bbn-cp/./src/components/router/_mixins/elements.js?");

/***/ }),

/***/ "./src/components/router/_mixins/getters.js":
/*!**************************************************!*\
  !*** ./src/components/router/_mixins/getters.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  methods: {\n    /**\n    * @method getTitle\n    * @param {Number} idx\n    * @return {String}\n    */\n    getTitle(idx) {\n      let cp = this,\n        res = '';\n      if (idx === undefined) {\n        idx = this.selected;\n      }\n      if (cp.views[idx]) {\n        res += cp.views[idx].title || bbn._('Untitled');\n        if (cp.parentTab) {\n          idx = cp.parentTab.currentIndex;\n          cp = cp.parentTab.router;\n          while (cp) {\n            res += ' < ' + (cp.views[idx].title || bbn._('Untitled'));\n            if (cp.parentTab) {\n              idx = cp.parentTab.currentIndex;\n              cp = cp.parentTab.router;\n            } else {\n              cp = false;\n            }\n          }\n        }\n        res += ' - ';\n      }\n      res += bbn.env.siteTitle || bbn._(\"Untitled site\");\n      return res;\n    },\n    /**\n    * Returns the full title (combination of title and ftitle if any)\n    * \n    * @method getFullTitle\n    * @param {Object} obj\n    * @return {String|null}\n    */\n    getFullTitle(obj) {\n      let t = '';\n      if (obj.title) {\n        t += obj.title;\n      }\n      if (obj.ftitle) {\n        t += (t.length ? ' - ' : '') + obj.ftitle;\n      }\n      return t;\n    },\n    /**\n    * @method getFontColor\n    * @param {Number} idx\n    * @fires getRef\n    * @return {String}\n    */\n    getFontColor(idx) {\n      return this.views[idx]?.fcolor || '';\n      //this.views[idx].fcolor = window.getComputedStyle(el.$el ? el.$el : el).color;\n    },\n    /**s\n    * @method getBackgroundColor\n    * @param {Number} idx\n    * @fires getRef\n    * @return {String}\n    */\n    getBackgroundColor(idx) {\n      return this.views[idx]?.bcolor || '';\n      /*\n      if (this.$isMounted && this.views[idx]) {\n        if (!this.views[idx].bcolor) {\n          let el = this.getRef('title-' + idx);\n          if (el) {\n            this.views[idx].bcolor = window.getComputedStyle(el.$el ? el.$el : el).backgroundColor;\n            bbn.fn.log([\"GETTING BCOLOR\", idx, this.views[idx].bcolor]);\n          }\n        }\n         return this.views[idx].bcolor;\n      }\n       return '';\n      */\n    },\n    /**\n    * @method getTab\n    * @param {Number} idx\n    * @fires getRef\n    * @return {HTMLElement}\n    */\n    getTab(idx) {\n      if (idx === undefined) {\n        idx = this.selected;\n      }\n      return this.getRef('tabs').getRef('tab-' + idx);\n    },\n    /**\n    * Returns the breadcrumb's source list.\n    * @method getList\n    * @param {bbnCp} bc\n    * @fires close\n    * @return {Array}\n    */\n    getList(idx) {\n      let list = [],\n        parents = bbn.fn.map(idx && this.itsMaster && this.baseURL !== this.itsMaster.baseURL ? this.getParents() : [], p => {\n          return {\n            view: p.views[p.selected],\n            maxTitleLength: p.maxTitleLength\n          };\n        });\n      if (parents.length > idx) {\n        parents.splice(0, parents.length - idx);\n      }\n      bbn.fn.each(this.views, (t, i) => {\n        if (!t.hidden && t.idx !== this.selected && !t.pane) {\n          list.push({\n            view: t,\n            key: t.url,\n            parents: parents,\n            children: bbn.fn.map(this.getBreadcrumbs(i), c => {\n              return {\n                view: c.views[c.selected],\n                maxTitleLength: c.maxTitleLength\n              };\n            }),\n            maxTitleLength: this.maxTitleLength,\n            action: () => {\n              this.activateIndex(t.idx);\n            },\n            closeAction: () => {\n              return this.close(t.idx);\n            }\n          });\n        }\n      });\n      return list;\n    },\n    /**\n    * @method getParents\n    * @return {Array}\n    */\n    getParents() {\n      return this.parent ? [...this.parent.getParents(), this.parent] : [];\n    },\n    /**\n    * @method getView\n    * @return {Object|null}\n    */\n    getView(url) {\n      return bbn.fn.getRow(this.views, {\n        url: url\n      });\n    }\n  }\n});\n\n//# sourceURL=webpack://@bbn/bbn-cp/./src/components/router/_mixins/getters.js?");

/***/ }),

/***/ "./src/components/router/_mixins/misc.js":
/*!***********************************************!*\
  !*** ./src/components/router/_mixins/misc.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  props: {\n    /**\n     * Sets if the views' titles will be scrollable in case they have a greater width than the page (true), or if they will be shown multilines (false, default).\n     * @prop {Boolean} [false] scrollable\n     */\n    scrollable: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * Sets if the router and the ocntainers inside it should be themselves scrollable or part of the global scroll.\n     * @prop {Boolean} [false] scrollContent\n     */\n    scrollContent: {\n      type: Boolean,\n      default: true\n    },\n    /**\n     * The name used for the storage.\n     * @prop {String} ['__ROOT__'] storageName\n     */\n    storageName: {\n      type: String,\n      default: '__ROOT__'\n    },\n    /**\n     * The max length for the titles\n     * @prop {Number} [20] maxTitleLength\n     */\n    maxTitleLength: {\n      type: Number,\n      default: 20\n    },\n    /**\n     * The default background color for the title bar\n     * @prop {String} [#666] bcolor\n     */\n    bcolor: {\n      type: String,\n      default: '#666'\n    },\n    /**\n     * The default text color for the title bar\n     * @prop {String} [#EEE] fcolor\n     */\n    fcolor: {\n      type: String,\n      default: '#EEE'\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    return {};\n  },\n  computed: {\n    hasVerticalTabs() {\n      return !this.isVisual && !this.isBreadcrumb && (this.orientation === 'left' || this.orientation === 'right');\n    }\n  },\n  methods: {\n    /**\n     * @method updateVisualStyleContainer\n     * @return {Object}\n     */\n    updateVisualStyleContainer() {\n      if (!this.visualStyleContainer) {\n        this.visualStyleContainer = bbn.fn.createObject();\n      } else if (!this.isVisual) {\n        this.visualStyleContainer = bbn.fn.createObject();\n      }\n      if (!this.isVisual) {\n        return;\n      }\n\n      //bbn.fn.warning(\"updateVisualStyleContainer\");\n      bbn.fn.iterate(this.views, view => {\n        if (view.view) {\n          view = view.view;\n        }\n        if (!this.visualStyleContainer[view.url]) {\n          this.visualStyleContainer[view.url] = {};\n        }\n        if (!this.urls[view.uid]) {\n          return;\n        }\n        const ct = this.urls[view.uid];\n        if (!ct?.isVisible || this.visualShowAll) {\n          if (this.visualStyleContainer[view.uid].zoom != 0.5) {\n            this.visualStyleContainer[view.uid] = {\n              zoom: 0.1\n            };\n          }\n          return;\n        }\n        let num = this.numVisuals + 1;\n        let coord = [1, num, 1, num];\n        switch (this.visualOrientation) {\n          case 'up':\n            coord[2] = 2;\n            break;\n          case 'down':\n            coord[3] = num - 1;\n            break;\n          case 'left':\n            coord[0] = 2;\n            break;\n          case 'right':\n            coord[1] = num - 1;\n            break;\n        }\n        if (this.visualStyleContainer[view.uid].zoom != 1 || this.visualStyleContainer[view.uid].gridColumnStart != coord[0] || this.visualStyleContainer[view.uid].gridColumnEnd != coord[1] || this.visualStyleContainer[view.uid].gridRowStart != coord[2] || this.visualStyleContainer[view.uid].gridRowEnd != coord[3]) {\n          this.visualStyleContainer[view.uid] = {\n            gridColumnStart: coord[0],\n            gridColumnEnd: coord[1],\n            gridRowStart: coord[2],\n            gridRowEnd: coord[3],\n            zoom: 1\n          };\n        }\n      });\n      return this.visualStyleContainer;\n    },\n    /**\n     * @method onEscape\n     * @param {Event} e\n     */\n    onEscape(e) {\n      if (this.isVisual && this.visualShowAll) {\n        this.visualShowAll = false;\n        e.stopPropagation();\n        e.preventDefault();\n      }\n    },\n    /**\n     * Function triggered every time a container is shown (at the start of the animation) to change the URL if needed.\n     * @method enter\n     * @param container\n     */\n    enter(container) {\n      //bbn.fn.log(\"THE CONTAINER WILL BE SHOWN: \", container);\n    },\n    //Tabs\n    /**\n     * Cuts the given string by 'maxTitleLength' property value\n     * @method cutTitle\n     * @param {String} title\n     * @return {String}\n     */\n    cutTitle(title) {\n      return bbn.fn.shorten(title, this.maxTitleLength);\n    },\n    /**\n     * @method onResize\n     * @return {Promise}\n     */\n    onResize() {\n      this.keepCool(() => {\n        let m = this.setResizeMeasures();\n        let c = this.setContainerMeasures();\n        if (m || c) {\n          this.$emit('resize');\n        }\n        if (this.isVisual && this.orientation === 'auto' && !this.lockedOrientation) {\n          this.visualOrientation = this.lastKnownWidth > this.lastKnownHeight ? 'left' : 'top';\n        }\n      }, 'resize', 50);\n    },\n    slashToHyphen(str) {\n      return bbn.fn.replaceAll('/', '-', str);\n    }\n  }\n});\n\n//# sourceURL=webpack://@bbn/bbn-cp/./src/components/router/_mixins/misc.js?");

/***/ }),

/***/ "./src/components/router/_mixins/observers.js":
/*!****************************************************!*\
  !*** ./src/components/router/_mixins/observers.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  methods: {\n    /*\n    observerEmit(newVal, obs){\n      bbn.fn.log(\"OBS EMIT\", newVal, obs);\n      let ele = $(\".bbn-observer-\" + obs.element, this.$el);\n      if ( ele.length ){\n        let idx = this.getIndex(ele);\n        if ( idx !== false ){\n          let i = bbn.fn.search(this.observers, {id: obs.id, element: obs.element});\n          if ( (i > -1) && (this.observers[i].value !== newVal) ){\n            if ( idx === this.selected ){\n              this.$emit('bbnobs' + obs.element + obs.id, newVal);\n              this.observers[i].value = newVal;\n            }\n            else{\n              this.observers[i].value = newVal;\n              this.$set(this.views[idx].events, 'bbnObs' + obs.element + obs.id, newVal);\n            }\n          }\n        }\n      }\n    },\n    */\n\n    /**\n     * @method observerEmit\n     * @param newVal\n     * @param obs\n     * @fires getIndex\n     */\n    observerEmit(newVal, obs) {\n      if (bbn.cp.mixins.observer.methods.observerEmit.apply(this, [newVal, obs])) {\n        let ele = this.$el.querySelector(\".bbn-observer-\" + obs.element);\n        if (ele) {\n          let idx = this.getIndex(ele);\n          if (idx !== false) {\n            this.$set(this.views[idx].events, 'bbnObs' + obs.element + obs.id, newVal);\n            this.$nextTick(() => {\n              //this.$forceUpdate();\n            });\n          }\n        }\n      }\n    },\n    /**\n     * The called method on the switching to false of the \"observer Dirty\" property value\n     * @method observerClear\n     * @param {Object} obs\n     * @fires getIndex\n     * @fires $delete\n     * @fires $nextTick\n     * @fires $forceUpdate\n     * @fires observationTower.observerClear\n     */\n    observerClear(obs) {\n      let ele = this.$el.querySelector(\".bbn-observer-\" + obs.element);\n      if (ele) {\n        let idx = this.getIndex(ele);\n        if (idx !== false && this.views[idx].events['bbnObs' + obs.element + obs.id] !== undefined) {\n          this.$delete(this.views[idx].events, 'bbnObs' + obs.element + obs.id);\n          this.$nextTick(() => {\n            //this.$forceUpdate();\n          });\n        }\n      } else if (this.observationTower) {\n        this.observationTower.observerClear(obs);\n      }\n    }\n  }\n});\n\n//# sourceURL=webpack://@bbn/bbn-cp/./src/components/router/_mixins/observers.js?");

/***/ }),

/***/ "./src/components/router/_mixins/panes.js":
/*!************************************************!*\
  !*** ./src/components/router/_mixins/panes.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  props: {\n    /**\n     * A list of panes used by default if splittable is true\n     * @prop {Array} [[]] panes\n     */\n    panes: {\n      type: Array,\n      default() {\n        return [];\n      }\n    },\n    /**\n     * If true another tab can be opened aside\n     * @prop {Boolean} [false] splittable\n     */\n    splittable: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * If true when splittable the extra panes can be collapsed\n     * @prop {Boolean} [false] collapsible\n     */\n    collapsible: {\n      type: Boolean,\n      default: true\n    },\n    /**\n     * If true when splittable the extra panes can be resized\n     * @prop {Boolean} [false] resizable\n     */\n    resizable: {\n      type: Boolean,\n      default: true\n    }\n  },\n  data() {\n    return {\n      /**\n       * The panes for when splittable is true\n       * @data {Array} currentPanes\n       */\n      currentPanes: this.panes.slice(),\n      /**\n       * Becomes true once the pane splitter is mounted\n       * @data {Boolean} visual\n       */\n      splitterMounted: false\n    };\n  },\n  computed: {\n    isSplittable() {\n      return this.splittable && !this.single;\n    },\n    /**\n     * The number of tabs which are not in a pane\n     * \n     * @returns {Number}\n     */\n    numOutOfPane() {\n      return bbn.fn.filter(this.views, {\n        pane: false\n      }).length;\n    },\n    /**\n     * The number of panes displayed\n     * @computed numPanes\n     * @return {Number} \n     */\n    numPanes() {\n      return this.currentPanes.length;\n    }\n  },\n  methods: {\n    getPane(obj) {\n      if (!obj) {\n        return false;\n      }\n      if (this.isVisual) {\n        return obj.view.pane || false;\n      }\n      return obj.pane || false;\n    },\n    addPane(paneId) {\n      if (this.splittable) {\n        if (!paneId) {\n          paneId = bbn.fn.randomString().toLowerCase();\n        }\n        if (!bbn.fn.getRow(this.currentPanes, {\n          id: paneId\n        })) {\n          this.currentPanes.push({\n            id: paneId,\n            tabs: [],\n            selected: -1\n          });\n        }\n      }\n      return paneId;\n    },\n    selectPaneTab(pane) {\n      let view = pane.tabs[pane.selected];\n      if (view) {\n        view.last = bbn.fn.timestamp();\n      }\n    },\n    removePane(paneId) {\n      if (this.splittable && this.currentPanes) {\n        let paneIndex = bbn.fn.search(this.currentPanes, {\n          id: paneId\n        });\n        let pane = this.currentPanes[paneIndex];\n        if (!pane) {\n          throw Error(bbn._(\"Impossible to find the pane with ID %s\", paneId));\n        }\n        if (pane.tabs.length) {\n          throw Error(bbn._(\"Impossible to remove the pane with ID %s as it has still containers inside\", paneId));\n        }\n        this.currentPanes.splice(paneIndex, 1);\n        if (this.routed) {\n          this.$nextTick(() => {\n            this.currentPanes.length ? this.getRef('splitter').init() : this.getRef('topSplitter').init();\n          });\n        }\n      }\n    },\n    addToPane(containerIdx, paneId) {\n      let view = this.views[containerIdx];\n      if (!view) {\n        throw Error(bbn._(\"Impossible to find the view with index\") + ' ' + containerIdx);\n      }\n      if (view.dirty) {\n        this.alert(bbn._(\"Save your changes or discard them before moving the container\"));\n        return;\n      }\n      let pane = bbn.fn.getRow(this.currentPanes, {\n        id: paneId\n      });\n      if (!pane) {\n        paneId = this.addPane(paneId);\n        pane = bbn.fn.getRow(this.currentPanes, {\n          id: paneId\n        });\n      }\n      this.$set(this.views[containerIdx], \"pane\", paneId);\n      pane.tabs.push(view);\n      //this.$forceUpdate();\n      if (containerIdx === this.selected) {\n        this.selectClosest(containerIdx);\n      }\n      pane.selected = pane.tabs.length - 1;\n    },\n    removeFromPane(containerIdx) {\n      let view = this.views[containerIdx];\n      if (view) {\n        if (view.dirty) {\n          this.alert(bbn._(\"Save your changes or discard them before moving the container\"));\n          return;\n        }\n        let paneId = view.pane;\n        if (paneId) {\n          let pane = bbn.fn.getRow(this.currentPanes, {\n            id: paneId\n          });\n          if (pane && pane.tabs) {\n            let idx = bbn.fn.search(pane.tabs, {\n              idx: containerIdx\n            });\n            if (idx > -1) {\n              this.selected = containerIdx;\n              view.pane = false;\n              this.$nextTick(() => {\n                pane.tabs.splice(idx, 1);\n                if (!pane.tabs.length) {\n                  this.removePane(paneId);\n                } else if (pane.selected >= idx) {\n                  pane.selected--;\n                  this.getRef('pane' + pane.id).onResize(true);\n                }\n              });\n            }\n          }\n        }\n      }\n    },\n    /**\n     * @event created\n     */\n    panesCreated() {\n      if (!this.single) {\n        let storage = this.getStorage(this.parentContainer ? this.parentContainer.getFullURL() : this.storageName);\n        if (storage && storage.panes) {\n          bbn.fn.each(storage.panes, a => {\n            this.addPane(a.id);\n          });\n        }\n      }\n    }\n  },\n  /**\n   * @event mounted\n   * @fires getStorage\n   * @fires getDefaultURL\n   * @fires add\n   */\n  beforeMount() {\n    if (this.splittable) {\n      if (storage && storage.panes) {\n        bbn.fn.each(storage.panes, pane => {\n          bbn.fn.each(pane.tabs, tab => {\n            let view = bbn.fn.getRow(this.views, {\n              url: tab\n            });\n            let realPane = bbn.fn.getRow(this.currentPanes, {\n              id: pane.id\n            });\n            if (view && realPane) {\n              if (!view.pane) {\n                view.pane = pane.id;\n              }\n              realPane.tabs.push(view);\n            }\n          });\n        });\n      }\n      bbn.fn.each(this.views, a => {\n        if (a.pane) {\n          let pane = bbn.fn.getRow(this.currentPanes, {\n            id: a.pane\n          });\n          if (pane && !bbn.fn.getRow(pane.tabs, {\n            url: a.url\n          })) {\n            pane.tabs.push(a);\n          }\n        }\n      });\n      bbn.fn.each(this.currentPanes, pane => {\n        let done = false;\n        if (storage && storage.panes) {\n          let p = bbn.fn.getRow(storage.panes, {\n            id: pane.id\n          });\n          if (p && pane.tabs[p.selected]) {\n            pane.selected = p.selected;\n            done = true;\n          }\n        }\n        if (!done) {\n          pane.selected = pane.tabs.length ? 0 : -1;\n        }\n      });\n    }\n  },\n  watch: {\n    numPanes() {\n      this.onResize();\n    },\n    currentPanes: {\n      deep: true,\n      handler() {\n        if (this.ready) {\n          this.setConfig();\n        }\n      }\n    }\n  }\n});\n\n//# sourceURL=webpack://@bbn/bbn-cp/./src/components/router/_mixins/panes.js?");

/***/ }),

/***/ "./src/components/router/_mixins/registration.js":
/*!*******************************************************!*\
  !*** ./src/components/router/_mixins/registration.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _bbn_bbn__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @bbn/bbn */ \"./node_modules/@bbn/bbn/dist/index.js\");\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  data() {\n    return {\n      /**\n      * Number of conatainers registered - as they say it.\n      * @data {Number} [0] numRegistered\n      */\n      numRegistered: 0,\n      /**\n       * Real containers are the bbn-container in the slot.\n       * @data {Boolean} [false] hasRealContainers\n       */\n      hasRealContainers: false,\n      /**\n       * Fake containers are the bbns-container in the slot.\n       * @data {Boolean} [false] hasFakeContainers\n       */\n      hasFakeContainers: false\n    };\n  },\n  methods: {\n    filterIsContainer(ele) {\n      return ele?.tagName === 'BBN-CONTAINER';\n    },\n    /**\n     * used by container to make themselves known when they are mounted.\n     * @method register\n     * @param {bbnCp} cp\n     * @param {Boolean} fake\n     * @fires add\n     * @fires search\n     * @fires route\n     * @fires getDefaultURL\n     */\n    register(cp, fake) {\n      _bbn_bbn__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fn.checkType(cp, bbnContainerCp);\n      if (cp.isRegistered) {\n        _bbn_bbn__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fn.log([\"It exists\", this.urls[cp.routerUid].$numBuild, this.numRegistered, this.views[0].real]);\n        if (this.urls[cp.routerUid]) {\n          //this.urls[cp.url].$el.parentNode.removeChild(this.urls[cp.url].$el);\n          throw Error(_bbn_bbn__WEBPACK_IMPORTED_MODULE_0__[\"default\"]._('Two containers cannot have the same URL defined (' + cp.url + ')'));\n        } else {\n          throw Error(_bbn_bbn__WEBPACK_IMPORTED_MODULE_0__[\"default\"]._(\"The container shouldn't register twice\"));\n        }\n      }\n      let idx = this.search(cp.url);\n      if (idx === false) {\n        throw Error(_bbn_bbn__WEBPACK_IMPORTED_MODULE_0__[\"default\"]._('Impossible to find the view for URL %s', cp.url));\n      }\n      cp.isRegistered = true;\n      if (!cp.routerUid) {\n        cp.routerUid = this.views[idx].uid;\n      }\n      this.numRegistered++;\n      this.urls[cp.routerUid] = cp;\n      //bbn.fn.log(\"VIEW ON VISUAL\")\n      cp.$on('view', () => {\n        if (this.isVisual) {\n          this.visualShowAll = false;\n        }\n      });\n      this.$emit('registered', cp);\n      if (!this.isInit && this.numRegistered === this.numOutOfPane) {\n        this.init();\n      }\n    },\n    /**\n     * used by container to make themselves known when they are destroyed\n     * @method unregister\n     * @fires search\n     * @fires remove\n     * @param {bbnCp} cp\n     */\n    unregister(cp) {\n      _bbn_bbn__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fn.log(\"UNREGISTERING \" + cp.url);\n      if (!_bbn_bbn__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fn.isString(cp.url)) {\n        throw Error(_bbn_bbn__WEBPACK_IMPORTED_MODULE_0__[\"default\"]._('The component bbn-container must have a URL defined'));\n      }\n      this.numRegistered--;\n      let idx = this.search(cp.url),\n        dataObj = this.postBaseUrl ? {\n          _bbn_baseURL: this.fullBaseURL\n        } : {},\n        requestID = _bbn_bbn__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fn.getRequestId(cp.url, dataObj);\n      if (_bbn_bbn__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fn.getLoader(requestID)) {\n        _bbn_bbn__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fn.abort(requestID);\n      }\n      if (this.urls[cp.routerUid] !== undefined) {\n        delete this.urls[cp.routerUid];\n      }\n      if (idx !== false) {\n        //this.remove(idx);\n      }\n    }\n  },\n  beforeMount() {\n    if (this.parentContainer) {\n      this.parentContainer.registerRouter(this);\n    }\n  },\n  /**\n   * @event beforeDestroy\n   */\n  beforeDestroy() {\n    if (this.parentContainer) {\n      this.parentContainer.unregisterRouter(this);\n    }\n  }\n});\n\n//# sourceURL=webpack://@bbn/bbn-cp/./src/components/router/_mixins/registration.js?");

/***/ }),

/***/ "./src/components/router/_mixins/search.js":
/*!*************************************************!*\
  !*** ./src/components/router/_mixins/search.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  methods: {\n    getPortalSelector(view) {\n      if (!this.disabled && this.panes.length) {\n        let pane = this.getPane(view);\n        if (pane) {\n          return '#' + pane + slashToHyphen(this.isVisual ? view.view.url : view.url);\n        }\n      }\n      return undefined;\n    },\n    selectClosest(idx) {\n      if (idx === this.selected && this.views[idx] && !this.views[idx].pane) {\n        return;\n      }\n      if (this.selected === idx) {\n        if (this.views.length) {\n          let newIdx = false;\n          bbn.fn.each(this.history, a => {\n            let tmp = this.getIndex(a);\n            if (tmp !== false && !this.views[tmp].pane) {\n              newIdx = tmp;\n              return false;\n            }\n          });\n          if (newIdx === false) {\n            let tmp = idx;\n            while (tmp >= 0) {\n              if (this.views[tmp] && !this.views[tmp].pane) {\n                newIdx = tmp;\n                break;\n              }\n              tmp--;\n            }\n            if (newIdx === false) {\n              tmp = idx;\n              while (tmp < this.views.length) {\n                if (this.views[tmp] && !this.views[tmp].pane) {\n                  newIdx = tmp;\n                  break;\n                }\n                tmp++;\n              }\n            }\n          }\n          if (this.views[newIdx]) {\n            this.activateIndex(newIdx);\n          }\n        } else {\n          this.selected = false;\n        }\n      }\n    },\n    /**\n     * @method getIndex\n     * @fires isValidIndex\n     * @fires search\n     * @return {Number|Boolean}\n     */\n    getIndex(misc) {\n      if (!this.views.length) {\n        return false;\n      }\n      if ([undefined, null].includes(misc)) {\n        return this.selected;\n      }\n      if (!this.isValidIndex(misc)) {\n        if (typeof misc === 'string') {\n          misc = this.search(misc);\n        } else if (typeof misc === 'object') {\n          // Vue\n          if (misc.$el) {\n            misc = misc.$el;\n          }\n          if (misc.tagName) {\n            bbn.fn.each(this.$children, ct => {\n              if (ct.$vnode && ct.$vnode.componentOptions && ct.$vnode.componentOptions.tag === 'bbn-container' && (ct.$el === misc || ct.$el.contains(misc))) {\n                misc = ct.currentIndex;\n                return false;\n              }\n            });\n          }\n        }\n      }\n      return this.isValidIndex(misc) ? misc : false;\n    },\n    fixIndexes() {\n      bbn.fn.each(this.views, (v, i) => {\n        if (v.idx !== i) {\n          v.idx = i;\n        }\n      });\n    },\n    /**\n     * @method search\n     * @param {String} url\n     * @return {Number|Boolean}\n     */\n    search(url) {\n      if (!bbn.fn.isString(url)) {\n        throw Error(bbn._('The component bbn-container must have a valid URL defined (Search)'));\n      }\n      let r = bbn.fn.search(this.views, \"url\", url);\n      if (r === -1) {\n        bbn.fn.each(this.views, (tab, index) => {\n          if (url.indexOf(tab.url + '/') === 0) {\n            r = index;\n            return false;\n          }\n        });\n      }\n      return r > -1 ? r : false;\n    },\n    searchForString(needle) {\n      let res = [];\n      let st = needle.toLowerCase().trim();\n      bbn.fn.each(this.views, a => {\n        let found = false;\n        bbn.fn.iterate(this.routers, router => {\n          let tmp = router.searchForString(needle);\n          if (tmp.length) {\n            bbn.fn.each(tmp, t => {\n              t.url = this.getBaseURL() + t.url;\n              if (!bbn.fn.getRow(res, {\n                url: t.url\n              })) {\n                found = true;\n                res.push(t);\n              }\n            });\n          }\n        });\n        if (!found) {\n          let match = false;\n          let idx = -1;\n          let obj = {\n            url: a.current || a.url,\n            title: this.getFullTitle(a)\n          };\n          if ((idx = obj.url.toLowerCase().indexOf(st)) > -1) {\n            match = \"url\";\n          } else if ((idx = obj.title.toLowerCase().indexOf(st)) > -1) {\n            match = \"title\";\n          }\n          if (match) {\n            let url = this.getBaseURL() + obj.url;\n            res.push({\n              url: url,\n              title: obj.title,\n              score: match === 'url' ? 10 : 20,\n              icon: a.icon || null,\n              hash: url,\n              bcolor: a.bcolor || null,\n              fcolor: a.fcolor || null,\n              component: this.$options.components.searchResult,\n              match: bbn.fn.substr(obj[match], 0, idx) + '<strong><em>' + bbn.fn.substr(obj[match], idx, st.length) + '</em></strong>' + bbn.fn.substr(obj[match], idx + st.length)\n            });\n          }\n        }\n      });\n      return res;\n    },\n    /**\n     * @method searchContainer\n     * @param {String} url\n     * @param {Boolean} deep\n     * @fires search\n     * @fires getContainer\n     * @return {Vue|Boolean}\n     */\n    searchContainer(url, deep) {\n      let container = false,\n        idx = this.search(url);\n      if (idx !== false) {\n        container = this.getContainer(idx);\n        if (deep && container) {\n          let router = container.find('bbn-router');\n          if (router) {\n            let real = router.searchContainer(bbn.fn.substr(url, router.baseURL.length), true);\n            if (real) {\n              return real;\n            }\n          }\n        }\n      }\n      return container;\n    }\n  }\n});\n\n//# sourceURL=webpack://@bbn/bbn-cp/./src/components/router/_mixins/search.js?");

/***/ }),

/***/ "./src/components/router/_mixins/visual.js":
/*!*************************************************!*\
  !*** ./src/components/router/_mixins/visual.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  props: {\n    /**\n     * Set it to true if you want to see the visual navigation bar\n     * @prop {Boolean} [false] visual\n     */\n    visual: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * The size of every grid cell on which is based the visual view\n     * @prop {Number} [180] visualSize\n     */\n    visualSize: {\n      type: Number,\n      default() {\n        return Math.max(60, Math.min(120, Math.round(Math.min(bbn.env.width, bbn.env.height) / 7)));\n      }\n    },\n    /**\n     * The position of the visual mini containers\n     * @prop {Number} [180] visualSize\n     */\n    orientation: {\n      type: String,\n      default() {\n        return 'auto';\n      },\n      validator(v) {\n        return !!bbn.fn.getRow(bbnRouterCp.possibleOrientations, {\n          name: v\n        });\n      }\n    }\n  },\n  data() {\n    return {\n      /**\n       * If true and visual will show all the containers as icons.\n       * Starts at true for better updating when displays changes\n       * @data {Boolean} visualShowAll\n       */\n      visualShowAll: false,\n      /**\n       * In visual mode the side on which the thumbnails are shown.\n       * If auto (default) the bar will be top if H > W, left otherwise\n       * @data {String} ['auto'] visualOrientation\n       */\n      visualOrientation: this.orientation !== 'auto' ? this.orientation : null,\n      /**\n       * If true the auto orientation won't be taken into account.\n       * @data {Boolean} lockedOrientation\n       */\n      lockedOrientation: false,\n      /**\n       * If true visual mode is used for nav (instead of tabs or breadcrumbs)\n       * @data {Boolean} visual\n       */\n      isVisual: this.visual,\n      visualStyleContainer: bbn.fn.createObject()\n    };\n  },\n  computed: {\n    visualContainerStyle() {\n      if (!this.isVisual) {\n        return {};\n      }\n      let coord = [1, this.numVisualCols + 1, 1, this.numVisualRows + 1];\n      if (this.views.length > 1) {\n        switch (this.visualOrientation) {\n          case 'top':\n            coord[2] = 2;\n            break;\n          case 'bottom':\n            coord[3] = coord[3] - 1;\n            break;\n          case 'left':\n            coord[0] = 2;\n            break;\n          case 'right':\n            coord[1] = coord[1] - 1;\n            break;\n        }\n      }\n      return {\n        position: 'relative',\n        top: null,\n        left: null,\n        right: null,\n        bottom: null,\n        gridColumnStart: coord[0],\n        gridColumnEnd: coord[1],\n        gridRowStart: coord[2],\n        gridRowEnd: coord[3],\n        zoom: 1\n      };\n    },\n    /**\n     * The grid style for showing the router in visual mode\n     * @computed visualStyle\n     * @return {Object} \n     */\n    visualStyle() {\n      if (!this.isVisual) {\n        return {};\n      }\n      return {\n        minHeight: '100%',\n        display: 'grid',\n        gridColumnGap: '0.5rem',\n        gridRowGap: '0.5rem',\n        gridTemplateRows: 'repeat(' + this.numVisualRows + ', 1fr)',\n        gridTemplateColumns: 'repeat(' + this.numVisualCols + ', 1fr)'\n      };\n    },\n    /**\n     * Returns true if the visual blocks are on top or bottom of the selected container\n     * @computed visualIsOnHeight\n     * @return {Boolean} \n     */\n    visualIsOnHeight() {\n      if (this.isVisual) {\n        return ['top', 'bottom'].includes(this.visualOrientation);\n      }\n      return false;\n    },\n    /**\n     * The ratio between height and width for each block\n     * @computed visualRatio\n     * @return {Object} \n     */\n    visualRatio() {\n      if (!this.isVisual) {\n        return 1;\n      }\n      let diffW = this.visualIsOnHeight ? 0 : this.visualSize;\n      let diffH = this.visualIsOnHeight ? this.visualSize : 0;\n      let ratio = (this.lastKnownWidth - diffW) / (this.lastKnownHeight - diffH);\n      if (ratio > 2) {\n        return 2;\n      }\n      return Math.max(0.5, ratio);\n    },\n    /**\n     * The number of columns (width) for the visual mode\n     * @computed numVisualCols\n     * @return {Number} \n     */\n    numVisualCols() {\n      if (this.isVisual && this.ready) {\n        // Width greater or equal to height\n        let w = this.lastKnownWidth - (this.visualIsOnHeight ? 0 : this.visualSize);\n        if (this.splitterMounted) {\n          let splitter = this.getRef('splitter');\n          if (splitter.$el.clientWidth < w) {\n            w -= splitter.$el.clientWidth;\n          }\n        }\n        if (this.visualRatio >= 1) {\n          return Math.floor(w / this.visualSize);\n        } else {\n          return Math.floor(w / (this.visualSize * 1));\n        }\n      }\n      return 1;\n    },\n    /**\n     * The number of rows (height) for the visual mode\n     * @computed numVisualRows\n     * @return {Number} \n     */\n    numVisualRows() {\n      if (this.isVisual && this.ready) {\n        let h = this.lastKnownHeight - (this.visualIsOnHeight ? this.visualSize : 0);\n        if (this.splitterMounted) {\n          let splitter = this.getRef('splitter');\n          if (splitter.$el.clientHeight < h) {\n            h -= splitter.$el.clientHeight;\n          }\n        }\n        if (this.visualRatio > 1) {\n          return Math.floor(h / this.visualSize * 1);\n        } else {\n          return Math.floor(h / this.visualSize);\n        }\n      }\n      return 1;\n    },\n    /**\n     * The number of cells on the side where the thumbnails are shown in the visual mode\n     * @computed numVisuals\n     * @return {Number} \n     */\n    numVisuals() {\n      if (this.isVisual) {\n        if (['left', 'right'].includes(this.visualOrientation)) {\n          return this.numVisualRows;\n        } else {\n          return this.numVisualCols;\n        }\n      }\n      return 0;\n    },\n    /**\n     * The number of cells on the side where the thumbnails are shown in the visual mode\n     * @computed numVisualReals\n     * @return {Number} \n     */\n    numVisualReals() {\n      if (this.isVisual) {\n        return bbn.fn.filter(this.visualList, a => a.view.idx !== this.selected && !a.view.pane).length;\n      }\n      return 0;\n    },\n    /**\n     * The views to show, in a specific different order, for the visual mode\n     * @computed visualList\n     * @return {Array} \n     */\n    visualList() {\n      if (!this.isVisual) {\n        return [];\n      }\n      let moreViewsThanSlots = this.numVisuals < bbn.fn.filter(this.views, {\n        pane: false\n      }).length;\n      let numAvailableSlots = this.numVisuals - (moreViewsThanSlots ? 1 : 0);\n      let order = this.visualShowAll ? {\n        selected: 'asc',\n        fixed: 'desc',\n        pinned: 'desc',\n        last: 'desc',\n        idx: 'asc'\n      } : {\n        selected: 'desc',\n        last: 'desc',\n        fixed: 'desc',\n        pinned: 'desc',\n        idx: 'asc'\n      };\n      let idx = 0;\n      return bbn.fn.map(bbn.fn.multiorder(this.views, order), a => {\n        let visible = false;\n        if (this.visualShowAll || idx <= numAvailableSlots || this.selected === a.idx) {\n          visible = true;\n          if (!a.pane) {\n            idx++;\n          }\n        } else if (a.pane) {\n          visible = true;\n        }\n        return {\n          view: a,\n          visible: visible\n        };\n      });\n    }\n  },\n  watch: {\n    numVisuals() {\n      this.onResize();\n    },\n    visualShowAll(v) {\n      if (v && this.isVisual) {\n        this.getRef('visualRouter').focus();\n      }\n    },\n    /**\n     * @watch isVisual\n     * @fires setConfig\n     */\n    isVisual(v) {\n      this.$nextTick(() => {\n        if (this.ready) {\n          this.setConfig();\n          this.onResize();\n        }\n      });\n    }\n  },\n  beforeMount() {\n    if (!this.single) {\n      let storage = this.getStorage(this.parentContainer ? this.parentContainer.getFullURL() : this.storageName);\n      if (storage) {\n        if (storage.visual !== undefined) {\n          this.isVisual = storage.visual;\n        }\n        if (storage.orientation) {\n          this.visualOrientation = storage.orientation;\n          this.lockedOrientation = true;\n        }\n      }\n      this.updateVisualStyleContainer();\n    }\n  }\n});\n\n//# sourceURL=webpack://@bbn/bbn-cp/./src/components/router/_mixins/visual.js?");

/***/ }),

/***/ "./src/components/router/router.js":
/*!*****************************************!*\
  !*** ./src/components/router/router.js ***!
  \*****************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _mixins_elements_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_mixins/elements.js */ \"./src/components/router/_mixins/elements.js\");\n/* harmony import */ var _mixins_navigation_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_mixins/navigation.js */ \"./src/components/router/_mixins/navigation.js\");\n/* harmony import */ var _mixins_registration_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_mixins/registration.js */ \"./src/components/router/_mixins/registration.js\");\n/* harmony import */ var _mixins_panes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./_mixins/panes.js */ \"./src/components/router/_mixins/panes.js\");\n/* harmony import */ var _mixins_views_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./_mixins/views.js */ \"./src/components/router/_mixins/views.js\");\n/* harmony import */ var _mixins_config_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./_mixins/config.js */ \"./src/components/router/_mixins/config.js\");\n/* harmony import */ var _mixins_search_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./_mixins/search.js */ \"./src/components/router/_mixins/search.js\");\n/* harmony import */ var _mixins_menu_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./_mixins/menu.js */ \"./src/components/router/_mixins/menu.js\");\n/* harmony import */ var _mixins_getters_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./_mixins/getters.js */ \"./src/components/router/_mixins/getters.js\");\n/* harmony import */ var _mixins_breadcrumb_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./_mixins/breadcrumb.js */ \"./src/components/router/_mixins/breadcrumb.js\");\n/* harmony import */ var _mixins_observers_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./_mixins/observers.js */ \"./src/components/router/_mixins/observers.js\");\n/* harmony import */ var _mixins_2move_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./_mixins/2move.js */ \"./src/components/router/_mixins/2move.js\");\n/* harmony import */ var _mixins_visual_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./_mixins/visual.js */ \"./src/components/router/_mixins/visual.js\");\n/* harmony import */ var _mixins_misc_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./_mixins/misc.js */ \"./src/components/router/_mixins/misc.js\");\n/* harmony import */ var _mixins_component_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./_mixins/component.js */ \"./src/components/router/_mixins/component.js\");\n/* harmony import */ var _components_listItem_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./_components/listItem.js */ \"./src/components/router/_components/listItem.js\");\n/* harmony import */ var _components_searchResult_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./_components/searchResult.js */ \"./src/components/router/_components/searchResult.js\");\n/* harmony import */ var _bbn_bbn__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @bbn/bbn */ \"./node_modules/@bbn/bbn/dist/index.js\");\n/* harmony import */ var _router_html__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./router.html */ \"./src/components/router/router.html\");\n/* harmony import */ var _router_less__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./router.less */ \"./src/components/router/router.less\");\n/**\r\n * @file bbn-router component\r\n * @description bbn-router is a component that allows and manages the navigation (url) between the various containers of an application\r\n * @copyright BBN Solutions\r\n * @author BBN Solutions\r\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst cpDef = {\n  name: 'bbn-router',\n  statics() {\n    // IndexedDb access for storing thumbnails in visual mode\n    let db = false;\n    if (_bbn_bbn__WEBPACK_IMPORTED_MODULE_17__[\"default\"].db && _bbn_bbn__WEBPACK_IMPORTED_MODULE_17__[\"default\"].db.ok && window.html2canvas) {\n      db = true;\n      if (!_bbn_bbn__WEBPACK_IMPORTED_MODULE_17__[\"default\"].db._structures.bbn || !_bbn_bbn__WEBPACK_IMPORTED_MODULE_17__[\"default\"].db._structures.bbn.containers) {\n        _bbn_bbn__WEBPACK_IMPORTED_MODULE_17__[\"default\"].db.add('bbn', 'containers', {\n          keys: {\n            PRIMARY: {\n              columns: ['url'],\n              unique: true\n            }\n          },\n          fields: {\n            url: {},\n            image: {}\n          }\n        });\n      }\n    }\n    return {\n      db,\n      possibleOrientations: [{\n        name: 'auto',\n        text: _bbn_bbn__WEBPACK_IMPORTED_MODULE_17__[\"default\"]._(\"Position automatically\")\n      }, {\n        name: 'left',\n        text: _bbn_bbn__WEBPACK_IMPORTED_MODULE_17__[\"default\"]._(\"Position on the left side\")\n      }, {\n        name: 'top',\n        text: _bbn_bbn__WEBPACK_IMPORTED_MODULE_17__[\"default\"]._(\"Position on the top side\")\n      }, {\n        name: 'bottom',\n        text: _bbn_bbn__WEBPACK_IMPORTED_MODULE_17__[\"default\"]._(\"Position on the bottom side\")\n      }, {\n        name: 'right',\n        text: _bbn_bbn__WEBPACK_IMPORTED_MODULE_17__[\"default\"]._(\"Position on the right side\")\n      }]\n    };\n  },\n  /**\r\n   * @mixin bbn.cp.mixins.basic\r\n   * @mixin bbn.cp.mixins.localStorage\r\n   * @mixin bbn.cp.mixins.close\r\n   * @mixin bbn.cp.mixins.observer\r\n   * @mixin bbn.cp.mixins.resizer\r\n   */\n  mixins: [_bbn_bbn__WEBPACK_IMPORTED_MODULE_17__[\"default\"].cp.mixins.basic, _bbn_bbn__WEBPACK_IMPORTED_MODULE_17__[\"default\"].cp.mixins.localStorage, _bbn_bbn__WEBPACK_IMPORTED_MODULE_17__[\"default\"].cp.mixins.close, _bbn_bbn__WEBPACK_IMPORTED_MODULE_17__[\"default\"].cp.mixins.observer, _bbn_bbn__WEBPACK_IMPORTED_MODULE_17__[\"default\"].cp.mixins.resizer, _bbn_bbn__WEBPACK_IMPORTED_MODULE_17__[\"default\"].cp.mixins.keepCool, _mixins_elements_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"], _mixins_navigation_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"], _mixins_registration_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"], _mixins_panes_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"], _mixins_views_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"], _mixins_config_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"], _mixins_search_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"], _mixins_menu_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"], _mixins_getters_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"], _mixins_breadcrumb_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"], _mixins_observers_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"], _mixins_2move_js__WEBPACK_IMPORTED_MODULE_11__[\"default\"], _mixins_visual_js__WEBPACK_IMPORTED_MODULE_12__[\"default\"], _mixins_misc_js__WEBPACK_IMPORTED_MODULE_13__[\"default\"], _mixins_component_js__WEBPACK_IMPORTED_MODULE_14__[\"default\"]],\n  methods: {\n    /**\r\n     * Alias of bbn.fn.isNumber\r\n     * @method isNumber\r\n     * @return {Boolean}\r\n     */\n    isNumber: _bbn_bbn__WEBPACK_IMPORTED_MODULE_17__[\"default\"].fn.isNumber,\n    /**\r\n     * Alias of bbn.fn.numProperties\r\n     * @method numProperties\r\n     * @return {Number|Boolean}\r\n     */\n    numProperties: _bbn_bbn__WEBPACK_IMPORTED_MODULE_17__[\"default\"].fn.numProperties\n  },\n  /**\r\n   * @event created\r\n   */\n  async created() {\n    this.componentClass.push('bbn-resize-emitter');\n  },\n  /**\r\n   * @event mounted\r\n   * @fires getStorage\r\n   * @fires getDefaultURL\r\n   * @fires add\r\n   */\n  async beforeMount() {\n    this.navigationInit();\n    await this.viewsInit();\n    this.panesCreated();\n    this.navigationCreated();\n    this.ready = true;\n    await this.$forceUpdate();\n  },\n  components: {\n    listItem: _components_listItem_js__WEBPACK_IMPORTED_MODULE_15__[\"default\"],\n    searchResult: _components_searchResult_js__WEBPACK_IMPORTED_MODULE_16__[\"default\"]\n  }\n};\n\n\n\nlet cpLang = {};\nif (_bbn_bbn__WEBPACK_IMPORTED_MODULE_17__[\"default\"].env.lang) {\n  try {\n    const lang = _bbn_bbn__WEBPACK_IMPORTED_MODULE_17__[\"default\"].env.lang || 'en';\n    cpLang = await __webpack_require__(\"./src/components/router/_i18n lazy recursive ^\\\\.\\\\/router\\\\..*\\\\.lang$\")(`./router.${lang}.lang`);\n    if (cpLang.default) {\n      cpLang = cpLang.default;\n    }\n  } catch (err) {}\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  name: 'bbn-router',\n  definition: cpDef,\n  template: _router_html__WEBPACK_IMPORTED_MODULE_18__[\"default\"],\n  style: _router_less__WEBPACK_IMPORTED_MODULE_19__[\"default\"],\n  lang: cpLang\n});\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://@bbn/bbn-cp/./src/components/router/router.js?");

/***/ })

}]);