/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_bbn_bbn_cp"] = self["webpackChunk_bbn_bbn_cp"] || []).push([["components/router-router-js"],{

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/less-loader/dist/cjs.js!./src/components/router/router.less":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/less-loader/dist/cjs.js!./src/components/router/router.less ***!
  \************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/noSourceMaps.js */ \"./node_modules/css-loader/dist/runtime/noSourceMaps.js\");\n/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/api.js */ \"./node_modules/css-loader/dist/runtime/api.js\");\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.bbn-router {\n  border: 0 !important;\n  overflow: hidden;\n  position: relative;\n  box-sizing: border-box;\n  margin: 0;\n}\n.bbn-router > .bbn-router-scroller::-webkit-scrollbar {\n  height: 0px;\n  width: 0px;\n  background: transparent;\n}\n.bbn-router .bbn-router-nav .bbn-router-nav:not(.bbn-router-nav-bc) {\n  padding-top: var(--sspace);\n  height: 100%;\n}\n.bbn-router .bbn-router-nav.bbn-router-nav-bc .bbn-router-breadcrumb-master {\n  height: 2.5rem;\n}\n.bbn-router .bbn-router-nav .bbn-pane .bbn-router-nav:not(.bbn-router-nav-bc) {\n  padding-top: 0;\n}\n.bbn-router .bbn-router-nav .bbn-pane .bbn-router-nav:not(.bbn-router-nav-bc) .bbn-router-nav:not(.bbn-router-nav-bc) {\n  padding-top: var(--sspace);\n}\n.bbn-router .bbn-router-nav .bbn-router-nav.bbn-router-nav-verticaltabs {\n  padding-top: 0 !important;\n}\n.bbn-router .bbn-router-nav .bbn-router-breadcrumb {\n  border: 0 !important;\n  overflow: hidden;\n  position: relative;\n  width: 100%;\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n  zoom: 1;\n}\n.bbn-router .bbn-router-nav .bbn-router-breadcrumb > .bbn-router-breadcrumb-container {\n  height: 100%;\n  /* .bbn-list > ul > li .text i:not(.bbn-router-breadcrumb-arrow) {\n          margin-right: 0 !important;\n        } */\n}\n.bbn-router .bbn-router-nav .bbn-router-breadcrumb > .bbn-router-breadcrumb-container .bbn-router-breadcrumb-badge-container {\n  position: absolute;\n  top: 0;\n  left: 1px;\n  bottom: 0px;\n}\n.bbn-router .bbn-router-nav .bbn-router-breadcrumb > .bbn-router-breadcrumb-container .bbn-router-breadcrumb-loader {\n  display: inline-block;\n  width: 12px;\n  height: 12px;\n  position: absolute;\n  top: 0.4rem;\n  left: 2px;\n}\n.bbn-router .bbn-router-nav .bbn-router-breadcrumb > .bbn-router-breadcrumb-container .bbn-router-breadcrumb-loader:after {\n  content: \" \";\n  display: block;\n  width: 8px;\n  height: 8px;\n  margin: 1px;\n  border-radius: 50%;\n  border-style: solid;\n  border-width: 2px;\n  border-right-color: transparent !important;\n  border-left-color: transparent !important;\n  animation: bbn-router-loader 1.2s linear infinite;\n}\n.bbn-router .bbn-router-nav .bbn-router-breadcrumb > .bbn-router-breadcrumb-container div.bbn-router-breadcrumb-element {\n  color: inherit;\n  padding: 0 0.8rem;\n  vertical-align: middle;\n}\n.bbn-router .bbn-router-nav .bbn-router-breadcrumb > .bbn-router-breadcrumb-container div.bbn-router-breadcrumb-element > .bbn-router-breadcrumb-element-icon {\n  line-height: 100%;\n}\n.bbn-router .bbn-router-nav .bbn-router-breadcrumb > .bbn-router-breadcrumb-container div.bbn-router-breadcrumb-element::after,\n.bbn-router .bbn-router-nav .bbn-router-breadcrumb > .bbn-router-breadcrumb-container div.bbn-router-breadcrumb-element::before {\n  font-family: monospace;\n  content: \" \";\n  white-space: pre;\n}\n.bbn-router .bbn-router-nav .bbn-router-breadcrumb > .bbn-router-breadcrumb-container div.bbn-router-breadcrumb-element.bbn-router-breadcrumb-dirty::after {\n  content: \"*\";\n}\n.bbn-router .bbn-router-nav .bbn-router-breadcrumb > .bbn-router-breadcrumb-container .bbn-router-breadcrumb-icon {\n  display: block;\n  position: absolute;\n  right: 2px;\n  font-size: 1rem;\n  cursor: pointer;\n  margin: 0;\n}\n.bbn-router .bbn-router-nav .bbn-router-breadcrumb > .bbn-router-breadcrumb-container .bbn-router-breadcrumb-icon.bbn-router-breadcrumb-close {\n  top: 1px;\n}\n.bbn-router .bbn-router-nav .bbn-router-breadcrumb > .bbn-router-breadcrumb-container .bbn-router-breadcrumb-icon.bbn-router-breadcrumb-menu {\n  bottom: -2px;\n}\n.bbn-router .bbn-router-nav .bbn-router-breadcrumb > .bbn-router-breadcrumb-container .bbn-router-breadcrumb-arrow {\n  margin-right: 0.7rem;\n  margin-left: 0.7rem;\n  vertical-align: middle;\n}\n.bbn-router .bbn-router-nav .bbn-router-breadcrumb > .bbn-router-breadcrumb-container > .bbn-loader {\n  align-items: center;\n  justify-content: center;\n  opacity: 0.5;\n  background-color: black;\n  color: white;\n}\n.bbn-router .bbn-router-nav .bbn-router-breadcrumb > .bbn-router-breadcrumb-container > .bbn-loader div.loader-animation {\n  margin-top: 2rem;\n}\n.bbn-router .bbn-router-nav .bbn-router-breadcrumb > .bbn-router-breadcrumb-container > .bbn-loader div.loader-animation h1 {\n  font-size: 3.5rem !important;\n  text-align: center;\n  margin-top: 1rem;\n  color: white;\n}\n.bbn-router .bbn-router-nav .bbn-router-breadcrumb > .bbn-router-breadcrumb-container > .bbn-loader div.loader-animation .sk-cube-grid {\n  width: 120px;\n  height: 120px;\n  margin: auto;\n}\n.bbn-router .bbn-router-nav .bbn-router-breadcrumb > .bbn-router-breadcrumb-container > .bbn-loader div.loader-animation .sk-cube-grid .sk-cube {\n  width: 33%;\n  height: 33%;\n  float: left;\n  background-color: white;\n  -webkit-animation: sk-cubeGridScaleDelay 1.3s infinite ease-in-out;\n  animation: sk-cubeGridScaleDelay 1.3s infinite ease-in-out;\n}\n.bbn-router .bbn-router-nav .bbn-router-breadcrumb > .bbn-router-breadcrumb-container > .bbn-loader div.loader-animation .sk-cube-grid .sk-cube.sk-cube1 {\n  -webkit-animation-delay: 0.2s;\n  animation-delay: 0.2s;\n}\n.bbn-router .bbn-router-nav .bbn-router-breadcrumb > .bbn-router-breadcrumb-container > .bbn-loader div.loader-animation .sk-cube-grid .sk-cube.sk-cube2 {\n  -webkit-animation-delay: 0.3s;\n  animation-delay: 0.3s;\n}\n.bbn-router .bbn-router-nav .bbn-router-breadcrumb > .bbn-router-breadcrumb-container > .bbn-loader div.loader-animation .sk-cube-grid .sk-cube.sk-cube3 {\n  -webkit-animation-delay: 0.4s;\n  animation-delay: 0.4s;\n}\n.bbn-router .bbn-router-nav .bbn-router-breadcrumb > .bbn-router-breadcrumb-container > .bbn-loader div.loader-animation .sk-cube-grid .sk-cube.sk-cube4 {\n  -webkit-animation-delay: 0.1s;\n  animation-delay: 0.1s;\n}\n.bbn-router .bbn-router-nav .bbn-router-breadcrumb > .bbn-router-breadcrumb-container > .bbn-loader div.loader-animation .sk-cube-grid .sk-cube.sk-cube5 {\n  -webkit-animation-delay: 0.2s;\n  animation-delay: 0.2s;\n}\n.bbn-router .bbn-router-nav .bbn-router-breadcrumb > .bbn-router-breadcrumb-container > .bbn-loader div.loader-animation .sk-cube-grid .sk-cube.sk-cube6 {\n  -webkit-animation-delay: 0.3s;\n  animation-delay: 0.3s;\n}\n.bbn-router .bbn-router-nav .bbn-router-breadcrumb > .bbn-router-breadcrumb-container > .bbn-loader div.loader-animation .sk-cube-grid .sk-cube.sk-cube7 {\n  -webkit-animation-delay: 0s;\n  animation-delay: 0s;\n}\n.bbn-router .bbn-router-nav .bbn-router-breadcrumb > .bbn-router-breadcrumb-container > .bbn-loader div.loader-animation .sk-cube-grid .sk-cube.sk-cube8 {\n  -webkit-animation-delay: 0.1s;\n  animation-delay: 0.1s;\n}\n.bbn-router .bbn-router-nav .bbn-router-breadcrumb > .bbn-router-breadcrumb-container > .bbn-loader div.loader-animation .sk-cube-grid .sk-cube.sk-cube9 {\n  -webkit-animation-delay: 0.2s;\n  animation-delay: 0.2s;\n}\n@keyframes bbn-router-loader {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n@-webkit-keyframes sk-cubeGridScaleDelay {\n  0%,\n  70%,\n  100% {\n    -webkit-transform: scale3D(1, 1, 1);\n    transform: scale3D(1, 1, 1);\n  }\n  35% {\n    -webkit-transform: scale3D(0, 0, 1);\n    transform: scale3D(0, 0, 1);\n  }\n}\n@keyframes sk-cubeGridScaleDelay {\n  0%,\n  70%,\n  100% {\n    -webkit-transform: scale3D(1, 1, 1);\n    transform: scale3D(1, 1, 1);\n  }\n  35% {\n    -webkit-transform: scale3D(0, 0, 1);\n    transform: scale3D(0, 0, 1);\n  }\n}\n.bbn-state-hover .bbn-router-search-result,\n.bbn-state-selected .bbn-router-search-result {\n  filter: saturate(1.8);\n}\n`, \"\"]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n\n\n//# sourceURL=webpack://@bbn/bbn-cp/./src/components/router/router.less?./node_modules/css-loader/dist/cjs.js!./node_modules/less-loader/dist/cjs.js");

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\nmodule.exports = function (cssWithMappingToString) {\n  var list = [];\n\n  // return the list of modules as css string\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = \"\";\n      var needLayer = typeof item[5] !== \"undefined\";\n      if (item[4]) {\n        content += \"@supports (\".concat(item[4], \") {\");\n      }\n      if (item[2]) {\n        content += \"@media \".concat(item[2], \" {\");\n      }\n      if (needLayer) {\n        content += \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\");\n      }\n      content += cssWithMappingToString(item);\n      if (needLayer) {\n        content += \"}\";\n      }\n      if (item[2]) {\n        content += \"}\";\n      }\n      if (item[4]) {\n        content += \"}\";\n      }\n      return content;\n    }).join(\"\");\n  };\n\n  // import a list of modules into the list\n  list.i = function i(modules, media, dedupe, supports, layer) {\n    if (typeof modules === \"string\") {\n      modules = [[null, modules, undefined]];\n    }\n    var alreadyImportedModules = {};\n    if (dedupe) {\n      for (var k = 0; k < this.length; k++) {\n        var id = this[k][0];\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n    for (var _k = 0; _k < modules.length; _k++) {\n      var item = [].concat(modules[_k]);\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        continue;\n      }\n      if (typeof layer !== \"undefined\") {\n        if (typeof item[5] === \"undefined\") {\n          item[5] = layer;\n        } else {\n          item[1] = \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\").concat(item[1], \"}\");\n          item[5] = layer;\n        }\n      }\n      if (media) {\n        if (!item[2]) {\n          item[2] = media;\n        } else {\n          item[1] = \"@media \".concat(item[2], \" {\").concat(item[1], \"}\");\n          item[2] = media;\n        }\n      }\n      if (supports) {\n        if (!item[4]) {\n          item[4] = \"\".concat(supports);\n        } else {\n          item[1] = \"@supports (\".concat(item[4], \") {\").concat(item[1], \"}\");\n          item[4] = supports;\n        }\n      }\n      list.push(item);\n    }\n  };\n  return list;\n};\n\n//# sourceURL=webpack://@bbn/bbn-cp/./node_modules/css-loader/dist/runtime/api.js?");

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/noSourceMaps.js":
/*!**************************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/noSourceMaps.js ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = function (i) {\n  return i[1];\n};\n\n//# sourceURL=webpack://@bbn/bbn-cp/./node_modules/css-loader/dist/runtime/noSourceMaps.js?");

/***/ }),

/***/ "./src/components/router/router.html":
/*!*******************************************!*\
  !*** ./src/components/router/router.html ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n// Module\nvar code = \"<div :class=\\\"[componentClass, {\\n             'bbn-invisible': !ready,\\n             'bbn-overlay': (nav || scrollContent),\\n             'bbn-w-100': !scrollContent\\n             }]\\\">\\n  <bbn-splitter :resizable=\\\"resizable\\\"\\n                :collapsible=\\\"collapsible\\\"\\n                :full-size=\\\"scrollContent\\\"\\n                bbn-forget=\\\"!splittable\\\"\\n                ref=\\\"topSplitter\\\">\\n    <bbn-pane :scrollable=\\\"false\\\"\\n              bbn-forget=\\\"!splittable\\\">\\n      <div :class=\\\"{\\n                  'bbn-overlay': scrollContent,\\n                  'bbn-flex-height': scrollContent && !hasVerticalTabs,\\n                  'bbn-flex-width': hasVerticalTabs,\\n                  'bbn-router-nav': nav,\\n                  'bbn-router-nav-bc': nav && isBreadcrumb,\\n                  'bbn-router-nav-verticaltabs': hasVerticalTabs,\\n                  'bbn-w-100': !scrollContent\\n                  }\\\">\\n        <!-- START OF BREADCRUMB -->\\n        <div v-if=\\\"nav && isBreadcrumb && !isVisual\\\"\\n            ref=\\\"breadcrumb\\\"\\n            :class=\\\"['bbn-router-breadcrumb', {'bbn-router-breadcrumb-master': master}]\\\">\\n          <div v-if=\\\"isBreadcrumbMaster\\\"\\n              class=\\\"bbn-router-breadcrumb-container\\\">\\n            <div class=\\\"bbn-transition-bcolor bbn-h-100 bbn-alt bbn-bordered-bottom bbn-no-border-top bbn-no-border-right bbn-vmiddle\\\"\\n                :style=\\\"{\\n                        backgroundColor: getBackgroundColor(selected),\\n                        color: getFontColor(selected)\\n                        }\\\">\\n              <div class=\\\"bbn-flex-width bbn-h-100 bbn-vmiddle\\\">\\n                <template v-if=\\\"breadcrumbs.length\\\"\\n                          v-for=\\\"(bc, i) in breadcrumbs\\\">\\n                  <div v-if=\\\"i > 0\\\">\\n                    <i class=\\\"nf nf-fa-angle_right bbn-hsmargin bbn-router-breadcrumb-arrow\\\"/>\\n                  </div>\\n                  <bbn-context :source=\\\"bc.getList(i)\\\"\\n                              tag=\\\"div\\\"\\n                              min-width=\\\"10rem\\\"\\n                              tabindex=\\\"0\\\"\\n                              :item-component=\\\"$options.components.listItem\\\"\\n                              :class=\\\"['bbn-h-100', 'bbn-vmiddle', {\\n                                'bbn-flex-fill': i === breadcrumbs.length - 1\\n                              }]\\\"\\n                              :attach=\\\"itsMaster ? (itsMaster.getRef('breadcrumb') || undefined) : undefined\\\"\\n                              :autobind=\\\"false\\\"\\n                              :style=\\\"{\\n                                      backgroundColor: bc.getBackgroundColor(bc.selected),\\n                                      color: bc.getFontColor(bc.selected)\\n                                      }\\\">\\n                    <bbn-context :source=\\\"bc.getMenuFn\\\"\\n                                :source-index=\\\"isNumber(bc.selected) ? bc.selected : undefined\\\"\\n                                tag=\\\"div\\\"\\n                                min-width=\\\"10rem\\\"\\n                                tabindex=\\\"0\\\"\\n                                :context=\\\"true\\\"\\n                                :autobind=\\\"false\\\"\\n                                class=\\\"bbn-vmiddle bbn-h-100\\\">\\n                      <div class=\\\"bbn-vmiddle bbn-h-100\\\">\\n                        <div class=\\\"bbn-router-breadcrumb-badge-container bbn-middle\\\"\\n                            v-if=\\\"isNumber(bc.selected) && bc.views[bc.selected] && numProperties(bc.views[bc.selected].events)\\\">\\n                          <span class=\\\"bbn-badge bbn-small bbn-bg-red\\\"\\n                                v-text=\\\"numProperties(bc.views[bc.selected].events)\\\"/>\\n                        </div>\\n                        <div class=\\\"bbn-router-breadcrumb-loader bbn-border-text\\\"\\n                            :style=\\\"{borderColor: isNumber(bc.selected) && bc.views[bc.selected] && bc.views[bc.selected].fcolor ? bc.views[bc.selected].fcolor : null}\\\"\\n                            v-show=\\\"isNumber(bc.selected) && bc.views[bc.selected] && bc.views[bc.selected].loading\\\"/>\\n                        <div :class=\\\"[\\n                                    'bbn-router-breadcrumb-element',\\n                                    'bbn-h-100',\\n                                    'bbn-vmiddle',\\n                                    {\\n                                    'bbn-router-breadcrumb-dirty': isNumber(bc.selected)\\n                                    && bc.views[bc.selected]\\n                                    && !!bc.views[bc.selected].dirty\\n                                    }\\n                                    ]\\\">\\n                          <span v-if=\\\"isNumber(bc.selected) && bc.views[bc.selected] && bc.views[bc.selected].icon\\\"\\n                                :title=\\\"bc.views[bc.selected].title\\\"\\n                                :class=\\\"'bbn-router-breadcrumb-element-icon bbn-h-100 bbn-vmiddle bbn-right-xsspace' + (bc.views[bc.selected].notext ? ' bbn-lg' : ' bbn-m')\\\">\\n                            <i :class=\\\"bc.views[bc.selected].icon\\\"/>\\n                          </span>\\n                          <span v-if=\\\"isNumber(bc.selected) && bc.views[bc.selected] && !bc.views[bc.selected].notext\\\"\\n                                :class=\\\"['bbn-router-breadcrumb-element-text', {'bbn-b': !breadcrumbs[i+1]}]\\\"\\n                                :title=\\\"bc.views[bc.selected].title && (bc.views[bc.selected].title.length > bc.maxTitleLength) ? bc.views[bc.selected].title : ''\\\"\\n                                v-html=\\\"bc.views[bc.selected].title ? bc.cutTitle(bc.views[bc.selected].title) : _('Untitled')\\\"/>\\n                        </div>\\n                        <span v-if=\\\"isNumber(bc.selected)\\n                                && bc.views[bc.selected]\\n                                && !bc.views[bc.selected].fixed\\n                                && !bc.views[bc.selected].pinned\\\"\\n                          class=\\\"bbn-p bbn-iblock bbn-top-right bbn-hxspadded bbn-xs\\\"\\n                          @mousedown.prevent.stop=\\\"bc.close(bc.selected)\\\"\\n                          @mouseup.prevent.stop>\\n                          <i class=\\\"nf nf-fa-times\\\"/>\\n                        </span>\\n                        <bbn-context v-if=\\\"isNumber(bc.selected) && bc.views[bc.selected] && bc.views[bc.selected].menu\\\"\\n                                    :source=\\\"() => bc.getMenuFn(bc.selected)\\\"\\n                                    tag=\\\"span\\\"\\n                                    class=\\\"bbn-p bbn-iblock bbn-bottom-right bbn-hxspadded bbn-xs\\\">\\n                          <i class=\\\"nf nf-fa-caret_down\\\"/>\\n                        </bbn-context>\\n\\n                      </div>\\n                    </bbn-context>\\n                  </bbn-context>\\n                </template>\\n              </div>\\n            </div>\\n          </div>\\n        </div>\\n        <!-- END OF BREADCRUMB -->\\n        <!-- START OF LEFT|TOP TABS -->\\n        <bbn-tabs v-else-if=\\\"nav && !isBreadcrumb && !isVisual && !['right', 'bottom'].includes(orientation)\\\"\\n                  ref=\\\"tabs\\\"\\n                  v-model=\\\"selectedTab\\\"\\n                  @close=\\\"closeTab\\\"\\n                  :scrollable=\\\"scrollable\\\"\\n                  :max-title-length=\\\"maxTitleLength\\\"\\n                  :source=\\\"tabsList\\\"\\n                  :position=\\\"orientation === 'auto' ? undefined : orientation\\\"/>\\n        <!-- END OF LEFT|TOP TABS -->\\n        <!-- START OF CONTENT -->\\n        <bbn-scroll v-if=\\\"ready\\\"\\n            :class=\\\"{\\n                    'bbn-router-scroller': isVisual,\\n                    'bbn-flex-fill': scrollContent,\\n                    }\\\"\\n            :scrollable=\\\"visualShowAll\\\"\\n            :style=\\\"{\\n              overflow: 'auto',\\n              height: visualShowAll ? '100%' : 'auto'\\n            }\\\"\\n            bbn-forget=\\\"!scrollContent\\\">\\n          <div :class=\\\"{\\n                      'bbn-overlay': scrollContent && !visualShowAll,\\n                      'bbn-w-100': isVisual && !scrollContent || visualShowAll,\\n                      'bbn-router-visual': isVisual\\n                    }\\\"\\n              :style=\\\"isVisual ? visualStyle : {}\\\"\\n              v-if=\\\"ready\\\"\\n              ref=\\\"visualRouter\\\"\\n              @keydown.esc=\\\"onEscape\\\"\\n              :tabindex=\\\"isVisual && visualShowAll ? 0 : -1\\\">\\n            <div v-if=\\\"isVisual && (selected !== null) && (views.length > numVisuals)\\\"\\n                :class=\\\"'bbn-bg-black bbn-white bbn-p' + (visualShowAll ? '  bbn-container-ratio' : '')\\\"\\n                @click=\\\"visualShowAll = !visualShowAll\\\">\\n              <div class=\\\"bbn-100 bbn-middle\\\">\\n                <div class=\\\"bbn-block bbn-xxxl\\\">\\n                  <i :class=\\\"'nf nf-fa-' + (visualShowAll ? 'minus' : 'plus')\\\"/>\\n                </div>\\n              </div>\\n            </div>\\n            <template v-for=\\\"a in (isVisual ? visualList : views)\\\"\\n                      :key=\\\"isVisual ? a.view.url : a.url\\\">\\n              <slot v-if=\\\"(isVisual && a.view.real) || a.real\\\"\\n                    class=\\\"bbn-router-container-fake\\\"\\n                    :style=\\\"visualStyleContainer[a.view.url || a.url]\\\"\\n                    :ref=\\\"'ct-' + (isVisual ? a.view.url : a.url)\\\"/>\\n              <bbn-container v-else-if=\\\"!component\\\"\\n                            :visual=\\\"isVisual\\\"\\n                            :portal=\\\"routed && getPane(a) ? '#' + (a.view?.pane || a.pane) + slashToHyphen(a.view?.url || a.url) : false\\\"\\n                            :style=\\\"visualStyleContainer[a.view?.url || a.url]\\\"\\n                            v-bind=\\\"isVisual ? a.view : a\\\"/>\\n              <bbn-container v-else-if=\\\"component\\\"\\n                            :source=\\\"componentSource\\\"\\n                            :portal=\\\"routed && getPane(a) ? '#' + (a.view?.pane || a.pane) + slashToHyphen(a.view?.url || a.url) : false\\\"\\n                            :visual=\\\"isVisual\\\"\\n                            :style=\\\"visualStyleContainer[a.view?.url || a.url]\\\"\\n                            :component=\\\"component\\\"\\n                            :url=\\\"a.view?.url || a.url || componentSource[componentUrl]\\\"/>\\n            </template>\\n          </div>\\n        </bbn-scroll>\\n        <!-- END OF CONTENT -->\\n        <!-- START OF RIGHT|BOTTOM TABS -->\\n        <bbn-tabs v-if=\\\"nav && !isBreadcrumb && !isVisual && ['right', 'bottom'].includes(orientation)\\\"\\n                  ref=\\\"tabs\\\"\\n                  v-model=\\\"selectedTab\\\"\\n                  @close=\\\"closeTab\\\"\\n                  :scrollable=\\\"scrollable\\\"\\n                  :max-title-length=\\\"maxTitleLength\\\"\\n                  :source=\\\"tabsList\\\"\\n                  :position=\\\"orientation\\\"/>\\n        <!-- END OF RIGHT|BOTTOM TABS -->\\n      </div>\\n    </bbn-pane>\\n    <!-- START FOR SPLITTABLE MODE -->\\n    <bbn-pane v-if=\\\"!single && splittable && currentPanes.length && ready\\\"\\n              :scrollable=\\\"false\\\"\\n              size=\\\"30%\\\">\\n      <bbn-splitter :resizable=\\\"resizable\\\"\\n                    :collapsible=\\\"collapsible\\\"\\n                    @resize=\\\"splitterMounted = true\\\"\\n                    ref=\\\"splitter\\\">\\n        <bbn-pane v-for=\\\"(pane, i) in currentPanes\\\"\\n                  :key=\\\"i\\\"\\n                  :ref=\\\"'pane' + pane.id\\\"\\n                  :title=\\\"pane.tabs[pane.selected] ? pane.tabs[pane.selected].title : null\\\"\\n                  :size=\\\"i ? Math.floor(100/currentPanes.length) + '%' : null\\\"\\n                  :scrollable=\\\"false\\\">\\n          <div class=\\\"bbn-overlay bbn-flex-height bbn-router-nav\\\">\\n            <!-- PANE TABS -->\\n            <bbn-tabs :scrollable=\\\"true\\\"\\n                      :source=\\\"pane.tabs\\\"\\n                      :key=\\\"pane.url\\\"\\n                      :closable=\\\"false\\\"\\n                      v-model=\\\"pane.selected\\\"\\n                      v-if=\\\"routed\\\"\\n                      @input=\\\"selectPaneTab(pane)\\\"\\n                      :limit=\\\"5\\\"/>\\n            <!-- PANE CONTENT -->\\n            <div class=\\\"bbn-flex-fill\\\">\\n              <div v-for=\\\"(tab, tabIndex) in pane.tabs\\\"\\n                   class=\\\"bbn-overlay\\\"\\n                   v-show=\\\"pane.selected === tabIndex\\\"\\n                   :id=\\\"pane.id + slashToHyphen(tab.url)\\\"/>\\n            </div>\\n          </div>\\n        </bbn-pane>\\n      </bbn-splitter>\\n\\n    </bbn-pane>\\n  </bbn-splitter>\\n  <bbn-floater v-if=\\\"!single && showRouterCfg\\\"\\n               :title=\\\"_('Router configuration')\\\"\\n               :closable=\\\"true\\\"\\n               ref=\\\"cfgwindow\\\">\\n    <div class=\\\"bbn-overlay bbn-middle\\\"\\n         @click=\\\"showRouterCfg = false\\\">\\n      <div class=\\\"bbn-block bbn-background\\\"\\n           @click.stop>\\n        <bbn-router-config :router=\\\"_self\\\"\\n                           :visual=\\\"!parent\\\"/>\\n      </div>\\n    </div>\\n  </bbn-floater>\\n  <bbn-loader v-if=\\\"!ready\\\"/>\\n</div>\";\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (code);\n\n//# sourceURL=webpack://@bbn/bbn-cp/./src/components/router/router.html?");

/***/ }),

/***/ "./src/components/router/router.less":
/*!*******************************************!*\
  !*** ./src/components/router/router.less ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ \"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ \"./node_modules/style-loader/dist/runtime/styleDomAPI.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertBySelector.js */ \"./node_modules/style-loader/dist/runtime/insertBySelector.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ \"./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ \"./node_modules/style-loader/dist/runtime/insertStyleElement.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ \"./node_modules/style-loader/dist/runtime/styleTagTransform.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _node_modules_css_loader_dist_cjs_js_node_modules_less_loader_dist_cjs_js_router_less__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/less-loader/dist/cjs.js!./router.less */ \"./node_modules/css-loader/dist/cjs.js!./node_modules/less-loader/dist/cjs.js!./src/components/router/router.less\");\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());\noptions.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());\n\n      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, \"head\");\n    \noptions.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());\noptions.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());\n\nvar update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_node_modules_less_loader_dist_cjs_js_router_less__WEBPACK_IMPORTED_MODULE_6__[\"default\"], options);\n\n\n\n\n       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_node_modules_less_loader_dist_cjs_js_router_less__WEBPACK_IMPORTED_MODULE_6__[\"default\"] && _node_modules_css_loader_dist_cjs_js_node_modules_less_loader_dist_cjs_js_router_less__WEBPACK_IMPORTED_MODULE_6__[\"default\"].locals ? _node_modules_css_loader_dist_cjs_js_node_modules_less_loader_dist_cjs_js_router_less__WEBPACK_IMPORTED_MODULE_6__[\"default\"].locals : undefined);\n\n\n//# sourceURL=webpack://@bbn/bbn-cp/./src/components/router/router.less?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nvar stylesInDOM = [];\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n  for (var i = 0; i < stylesInDOM.length; i++) {\n    if (stylesInDOM[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n}\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var indexByIdentifier = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3],\n      supports: item[4],\n      layer: item[5]\n    };\n    if (indexByIdentifier !== -1) {\n      stylesInDOM[indexByIdentifier].references++;\n      stylesInDOM[indexByIdentifier].updater(obj);\n    } else {\n      var updater = addElementStyle(obj, options);\n      options.byIndex = i;\n      stylesInDOM.splice(i, 0, {\n        identifier: identifier,\n        updater: updater,\n        references: 1\n      });\n    }\n    identifiers.push(identifier);\n  }\n  return identifiers;\n}\nfunction addElementStyle(obj, options) {\n  var api = options.domAPI(options);\n  api.update(obj);\n  var updater = function updater(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {\n        return;\n      }\n      api.update(obj = newObj);\n    } else {\n      api.remove();\n    }\n  };\n  return updater;\n}\nmodule.exports = function (list, options) {\n  options = options || {};\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDOM[index].references--;\n    }\n    var newLastIdentifiers = modulesToDom(newList, options);\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n      var _index = getIndexByIdentifier(_identifier);\n      if (stylesInDOM[_index].references === 0) {\n        stylesInDOM[_index].updater();\n        stylesInDOM.splice(_index, 1);\n      }\n    }\n    lastIdentifiers = newLastIdentifiers;\n  };\n};\n\n//# sourceURL=webpack://@bbn/bbn-cp/./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertBySelector.js":
/*!********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertBySelector.js ***!
  \********************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nvar memo = {};\n\n/* istanbul ignore next  */\nfunction getTarget(target) {\n  if (typeof memo[target] === \"undefined\") {\n    var styleTarget = document.querySelector(target);\n\n    // Special case to return head of iframe instead of iframe itself\n    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n      try {\n        // This will throw an exception if access to iframe is blocked\n        // due to cross-origin restrictions\n        styleTarget = styleTarget.contentDocument.head;\n      } catch (e) {\n        // istanbul ignore next\n        styleTarget = null;\n      }\n    }\n    memo[target] = styleTarget;\n  }\n  return memo[target];\n}\n\n/* istanbul ignore next  */\nfunction insertBySelector(insert, style) {\n  var target = getTarget(insert);\n  if (!target) {\n    throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n  }\n  target.appendChild(style);\n}\nmodule.exports = insertBySelector;\n\n//# sourceURL=webpack://@bbn/bbn-cp/./node_modules/style-loader/dist/runtime/insertBySelector.js?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertStyleElement.js":
/*!**********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertStyleElement.js ***!
  \**********************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/* istanbul ignore next  */\nfunction insertStyleElement(options) {\n  var element = document.createElement(\"style\");\n  options.setAttributes(element, options.attributes);\n  options.insert(element, options.options);\n  return element;\n}\nmodule.exports = insertStyleElement;\n\n//# sourceURL=webpack://@bbn/bbn-cp/./node_modules/style-loader/dist/runtime/insertStyleElement.js?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\n/* istanbul ignore next  */\nfunction setAttributesWithoutAttributes(styleElement) {\n  var nonce =  true ? __webpack_require__.nc : 0;\n  if (nonce) {\n    styleElement.setAttribute(\"nonce\", nonce);\n  }\n}\nmodule.exports = setAttributesWithoutAttributes;\n\n//# sourceURL=webpack://@bbn/bbn-cp/./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleDomAPI.js":
/*!***************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleDomAPI.js ***!
  \***************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/* istanbul ignore next  */\nfunction apply(styleElement, options, obj) {\n  var css = \"\";\n  if (obj.supports) {\n    css += \"@supports (\".concat(obj.supports, \") {\");\n  }\n  if (obj.media) {\n    css += \"@media \".concat(obj.media, \" {\");\n  }\n  var needLayer = typeof obj.layer !== \"undefined\";\n  if (needLayer) {\n    css += \"@layer\".concat(obj.layer.length > 0 ? \" \".concat(obj.layer) : \"\", \" {\");\n  }\n  css += obj.css;\n  if (needLayer) {\n    css += \"}\";\n  }\n  if (obj.media) {\n    css += \"}\";\n  }\n  if (obj.supports) {\n    css += \"}\";\n  }\n  var sourceMap = obj.sourceMap;\n  if (sourceMap && typeof btoa !== \"undefined\") {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  }\n\n  // For old IE\n  /* istanbul ignore if  */\n  options.styleTagTransform(css, styleElement, options.options);\n}\nfunction removeStyleElement(styleElement) {\n  // istanbul ignore if\n  if (styleElement.parentNode === null) {\n    return false;\n  }\n  styleElement.parentNode.removeChild(styleElement);\n}\n\n/* istanbul ignore next  */\nfunction domAPI(options) {\n  if (typeof document === \"undefined\") {\n    return {\n      update: function update() {},\n      remove: function remove() {}\n    };\n  }\n  var styleElement = options.insertStyleElement(options);\n  return {\n    update: function update(obj) {\n      apply(styleElement, options, obj);\n    },\n    remove: function remove() {\n      removeStyleElement(styleElement);\n    }\n  };\n}\nmodule.exports = domAPI;\n\n//# sourceURL=webpack://@bbn/bbn-cp/./node_modules/style-loader/dist/runtime/styleDomAPI.js?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleTagTransform.js":
/*!*********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleTagTransform.js ***!
  \*********************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/* istanbul ignore next  */\nfunction styleTagTransform(css, styleElement) {\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css;\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild);\n    }\n    styleElement.appendChild(document.createTextNode(css));\n  }\n}\nmodule.exports = styleTagTransform;\n\n//# sourceURL=webpack://@bbn/bbn-cp/./node_modules/style-loader/dist/runtime/styleTagTransform.js?");

/***/ }),

/***/ "./src/components/router lazy recursive ^\\.\\/router\\..*\\.lang$":
/*!************************************************************************************!*\
  !*** ./src/components/router/ lazy ^\.\/router\..*\.lang$ strict namespace object ***!
  \************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var map = {\n\t\"./router.fr.lang\": [\n\t\t\"./src/components/router/router.fr.lang\",\n\t\t\"src_components_router_router_fr_lang\"\n\t],\n\t\"./router.it.lang\": [\n\t\t\"./src/components/router/router.it.lang\",\n\t\t\"src_components_router_router_it_lang\"\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(() => {\n\t\treturn __webpack_require__.t(id, 1 | 16);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = \"./src/components/router lazy recursive ^\\\\.\\\\/router\\\\..*\\\\.lang$\";\nmodule.exports = webpackAsyncContext;\n\n//# sourceURL=webpack://@bbn/bbn-cp/./src/components/router/_lazy_^\\.\\/router\\..*\\.lang$_strict_namespace_object?");

/***/ }),

/***/ "./src/components/router/router.js":
/*!*****************************************!*\
  !*** ./src/components/router/router.js ***!
  \*****************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _router_html__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./router.html */ \"./src/components/router/router.html\");\n/* harmony import */ var _router_less__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./router.less */ \"./src/components/router/router.less\");\n/**\r\n * @file bbn-router component\r\n * @description bbn-router is a component that allows and manages the navigation (url) between the various containers of an application\r\n * @copyright BBN Solutions\r\n * @author BBN Solutions\r\n */\nconst cpDef = {\n  name: 'bbn-router',\n  statics() {\n    // IndexedDb access for storing thumbnails in visual mode\n    let db = false;\n    if (bbn.db && bbn.db.ok && window.html2canvas) {\n      db = true;\n      if (!bbn.db._structures.bbn || !bbn.db._structures.bbn.containers) {\n        bbn.db.add('bbn', 'containers', {\n          keys: {\n            PRIMARY: {\n              columns: ['url'],\n              unique: true\n            }\n          },\n          fields: {\n            url: {},\n            image: {}\n          }\n        });\n      }\n    }\n    return {\n      db,\n      possibleOrientations: [{\n        name: 'auto',\n        text: bbn._(\"Position automatically\")\n      }, {\n        name: 'left',\n        text: bbn._(\"Position on the left side\")\n      }, {\n        name: 'top',\n        text: bbn._(\"Position on the top side\")\n      }, {\n        name: 'bottom',\n        text: bbn._(\"Position on the bottom side\")\n      }, {\n        name: 'right',\n        text: bbn._(\"Position on the right side\")\n      }]\n    };\n  },\n  /**\r\n   * @mixin bbn.cp.mixins.basic\r\n   * @mixin bbn.cp.mixins.localStorage\r\n   * @mixin bbn.cp.mixins.close\r\n   * @mixin bbn.cp.mixins.observer\r\n   * @mixin bbn.cp.mixins.resizer\r\n   */\n  mixins: [bbn.cp.mixins.basic, bbn.cp.mixins.localStorage, bbn.cp.mixins.close, bbn.cp.mixins.observer, bbn.cp.mixins.resizer, bbn.cp.mixins.keepCool],\n  props: {\n    /**\r\n     * Routes automatically after mount.\r\n     * @prop {Boolean} [true] auto\r\n     */\n    auto: {\n      type: Boolean,\n      default: true\n    },\n    /**\r\n     * The URL on which the router will be initialized.\r\n     * @prop {String} ['] url\r\n     */\n    url: {\n      type: String,\n      default: ''\n    },\n    /**\r\n     * Defines if the container will be automatically loaded based on URLs.\r\n     * @prop {Boolean} [true] autoload\r\n     */\n    autoload: {\n      type: Boolean,\n      default: true\n    },\n    /**\r\n     * The root URL of the router, will be only taken into account for the top parents' router, will be automatically calculated for the children.\r\n     * @prop {String} ['] root\r\n     */\n    root: {\n      type: String,\n      default: ''\n    },\n    /**\r\n     * @prop {String} def\r\n     */\n    def: {\n      type: String\n    },\n    /**\r\n     * The views shown at init.\r\n     * @prop {Array} [[]] source\r\n     */\n    source: {\n      type: Array,\n      default() {\n        return [];\n      }\n    },\n    /**\r\n     * @prop {Boolean} [false] single\r\n     */\n    single: {\n      type: Boolean,\n      default: false\n    },\n    maxTotal: {\n      type: Number,\n      default: 25\n    },\n    /**\r\n     * Set it to true if you want to see the navigation bar (tabs or breadcrumb).\r\n     * @prop {Boolean} [false] nav\r\n     */\n    nav: {\n      type: Boolean,\n      default: false\n    },\n    /**\r\n     * Set it to true if you want to see the visual navigation bar\r\n     * @prop {Boolean} [false] visual\r\n     */\n    visual: {\n      type: Boolean,\n      default: false\n    },\n    /**\r\n     * Sets if the views' titles will be scrollable in case they have a greater width than the page (true), or if they will be shown multilines (false, default).\r\n     * @prop {Boolean} [false] scrollable\r\n     */\n    scrollable: {\n      type: Boolean,\n      default: false\n    },\n    /**\r\n     * Sets if the router and the ocntainers inside it should be themselves scrollable or part of the global scroll.\r\n     * @prop {Boolean} [false] scrollContent\r\n     */\n    scrollContent: {\n      type: Boolean,\n      default: true\n    },\n    /**\r\n     * The name used for the storage.\r\n     * @prop {String} ['__ROOT__'] storageName\r\n     */\n    storageName: {\n      type: String,\n      default: '__ROOT__'\n    },\n    /**\r\n     * The confirm message when you close an unsaved container.\r\n     * @prop {(Boolean|String|Function)} ['Are you sure you want to discard the changes you made in this tab?'] confirmLeave\r\n     */\n    confirmLeave: {\n      type: [Boolean, String, Function],\n      default: bbn._(\"Are you sure you want to discard the changes you made in this page?\")\n    },\n    /**\r\n     * The max length of the history.\r\n     * @prop {Number} [10] historyMaxLength\r\n     */\n    historyMaxLength: {\n      type: Number,\n      default: 10\n    },\n    /**\r\n     * @todo Integrates Boolean to have a default with no menu\r\n     * @prop {Array|Function} [[]] menu\r\n     */\n    menu: {\n      type: [Array, Function],\n      default: function () {\n        return [];\n      }\n    },\n    /**\r\n     * Set it to true if you want to show the breadcrumb instead of the tabs.\r\n     * @prop {Boolean} [false] breadcrumb\r\n     */\n    breadcrumb: {\n      type: Boolean,\n      default: false\n    },\n    /**\r\n     * Set it to true if you want to set this nav as a master.\r\n     * @prop {Boolean} [false] master\r\n     */\n    master: {\n      type: Boolean,\n      default: false\n    },\n    /**\r\n     * Set it to true if you want to send the variable _baseUrl.\r\n     * @prop {Boolean} [true] postBaseUrl\r\n     */\n    postBaseUrl: {\n      type: Boolean,\n      default: true\n    },\n    /**\r\n     * If this is set, along with componentSource and componentUrl a single container with this component will be created.\r\n     * @prop {(String|Object)} component\r\n     */\n    component: {\n      type: [String, Object]\n    },\n    /**\r\n     * The source for the component.\r\n     * @prop {Object} componentSource\r\n     */\n    componentSource: {\n      type: Object\n    },\n    /**\r\n     * The property to get from the componentSource to use for setting the URL.\r\n     * @prop {String} componentUrl\r\n     */\n    componentUrl: {\n      type: String\n    },\n    /**\r\n     * The max length for the titles\r\n     * @prop {Number} [20] maxTitleLength\r\n     */\n    maxTitleLength: {\n      type: Number,\n      default: 20\n    },\n    /**\r\n     * @prop {Boolean} [true] urlNavigation\r\n     */\n    urlNavigation: {\n      type: Boolean,\n      default: true\n    },\n    /**\r\n     * Will be passed to router in order to ignore the dirty parameter.\r\n     * @prop {Boolean} ignoreDirty\r\n     */\n    ignoreDirty: {\n      type: Boolean,\n      default: false\n    },\n    /**\r\n     * The size of every grid cell on which is based the visual view\r\n     * @prop {Number} [180] visualSize\r\n     */\n    visualSize: {\n      type: Number,\n      default() {\n        return Math.max(60, Math.min(120, Math.round(Math.min(bbn.env.width, bbn.env.height) / 7)));\n      }\n    },\n    /**\r\n     * The position of the visual mini containers\r\n     * @prop {Number} [180] visualSize\r\n     */\n    orientation: {\n      type: String,\n      default() {\n        return 'auto';\n      },\n      validator(v) {\n        return !!bbn.fn.getRow(bbnRouterCp.possibleOrientations, {\n          name: v\n        });\n      }\n    },\n    /**\r\n     * The default background color for the title bar\r\n     * @prop {String} [#666] bcolor\r\n     */\n    bcolor: {\n      type: String,\n      default: '#666'\n    },\n    /**\r\n     * The default text color for the title bar\r\n     * @prop {String} [#EEE] fcolor\r\n     */\n    fcolor: {\n      type: String,\n      default: '#EEE'\n    },\n    /**\r\n     * A list of panes used by default if splittable is true\r\n     * @prop {Array} [[]] panes\r\n     */\n    panes: {\n      type: Array,\n      default() {\n        return [];\n      }\n    },\n    /**\r\n     * Decides if real bbn-container are shown before or after the ones in the config or fake container 9bbns-container)\r\n     * @prop {String} ['real] first\r\n     */\n    first: {\n      type: String,\n      default: 'real'\n    },\n    /**\r\n     * If true another tab can be opened aside\r\n     * @prop {Boolean} [false] splittable\r\n     */\n    splittable: {\n      type: Boolean,\n      default: false\n    },\n    /**\r\n     * If true when splittable the extra panes can be collapsed\r\n     * @prop {Boolean} [false] collapsible\r\n     */\n    collapsible: {\n      type: Boolean,\n      default: true\n    },\n    /**\r\n     * If true when splittable the extra panes can be resized\r\n     * @prop {Boolean} [false] resizable\r\n     */\n    resizable: {\n      type: Boolean,\n      default: true\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    return {\n      /**\r\n       * IndexedDb connection\r\n       * @return {Object} \r\n       */\n      db: null,\n      /**\r\n      * Number of conatainers registered - as they say it.\r\n      * @data {Number} [0] numRegistered\r\n      */\n      numRegistered: 0,\n      /**\r\n       * Real containers are the bbn-container in the slot.\r\n       * @data {Boolean} [false] hasRealContainers\r\n       */\n      hasRealContainers: false,\n      /**\r\n       * Fake containers are the bbns-container in the slot.\r\n       * @data {Boolean} [false] hasFakeContainers\r\n       */\n      hasFakeContainers: false,\n      /**\r\n       * True if one of the initial containers' URL is an empty string.\r\n       * @data {Boolean} [false] hasEmptyURL\r\n       */\n      hasEmptyURL: false,\n      /**\r\n       * The array of containers defined in the source.\r\n       * @data {Array} cfgViews\r\n       */\n      cfgViews: [].concat(this.source),\n      /**\r\n       * The views from the slot.\r\n       * @data {Array} [[]] slotViews\r\n       */\n      slotViews: [],\n      /**\r\n       * All the views.\r\n       * @data {Array} [[]] views\r\n      */\n      views: [],\n      /**\r\n       * All the URLS of the views.\r\n       * @data {Object} [{}] urls\r\n       */\n      urls: {},\n      /**\r\n       * Current URL of the router.\r\n       * @data {String} currentURL\r\n       */\n      currentTitle: '',\n      /**\r\n       * Current URL of the router.\r\n       * @data {String} currentURL\r\n       */\n      currentURL: this.url || '',\n      /**\r\n       * Relative root of the router (set by user or by parent router).\r\n       * @data {String} baseURL\r\n       */\n      baseURL: this.formatBaseURL(this.root),\n      /**\r\n      * An array of the parents router.\r\n      * @data {Array} [[]] parents\r\n      */\n      parents: [],\n      /**\r\n      * An object with each mounted children router.\r\n      * @data {Object} [{}] routers\r\n      */\n      routers: {},\n      /**\r\n      * The direct parent router if there is one.\r\n      * @data {bbnCp} [null] parent\r\n      */\n      parent: null,\n      /**\r\n       * The root router or the current one it's the same.\r\n       * @data {bbnCp} [null] router\r\n       */\n      router: null,\n      /**\r\n       * The container having the router in if there is one.\r\n       * @data {bbnCp} [null] parentContainer\r\n       */\n      parentContainer: null,\n      /**\r\n       * ????\r\n       * @data {Boolean} [ture] visible\r\n       */\n      visible: true,\n      /**\r\n       * The currently visible container.\r\n       * @data {bbnCp} [null] activeContainer\r\n       */\n      activeContainer: null,\n      /**\r\n       * Set to true each time the router is loading (can only load once at a time).\r\n       * @data {Boolean} [false] isLoading\r\n       */\n      isLoading: false,\n      /**\r\n       * This will remain false until the first routing.\r\n       * @data {Boolean} [false] routed\r\n       */\n      routed: false,\n      /**\r\n       * True while the component is in the action of routing.\r\n       * @data {Boolean} [false] isRouting\r\n       */\n      isRouting: false,\n      /**\r\n       * False until the first routing.\r\n       * @data {Boolean} [false] isInit\r\n       */\n      isInit: false,\n      /**\r\n       * The index of the currently selected view.\r\n       * @data {Number} [null] selected\r\n       */\n      selected: null,\n      /**\r\n       * The list of the dirty containers.\r\n       * @data {Array} [[]] dirtyContainers\r\n       */\n      dirtyContainers: [],\n      /**\r\n       * The navigation history.\r\n       * @data {Array} [[]] history\r\n       */\n      history: [],\n      /**\r\n       * @data {Boolean} [false] iconsReady\r\n       */\n      iconsReady: false,\n      /**\r\n       * Shows if the navigation mode is set to breacrumb.\r\n       * @data {Boolean} isBreadcrumb\r\n       */\n      isBreadcrumb: !!this.breadcrumb,\n      /**\r\n       * itsMaster.isBreadcrumb watcher.\r\n       * @data {Boolean} breadcrumbWatcher\r\n       */\n      breadcrumbWatcher: false,\n      /**\r\n       * List of breadcrumbs\r\n       * @data {Array} breadcrumbsList\r\n       */\n      breadcrumbsList: [],\n      /**\r\n       * If true and visual will show all the containers as icons.\r\n       * Starts at true for better updating when displays changes\r\n       * @data {Boolean} visualShowAll\r\n       */\n      visualShowAll: false,\n      /**\r\n       * In visual mode the side on which the thumbnails are shown.\r\n       * If auto (default) the bar will be top if H > W, left otherwise\r\n       * @data {String} ['auto'] visualOrientation\r\n       */\n      visualOrientation: this.orientation !== 'auto' ? this.orientation : null,\n      /**\r\n       * If true the auto orientation won't be taken into account.\r\n       * @data {Boolean} lockedOrientation\r\n       */\n      lockedOrientation: false,\n      /**\r\n       * If true visual mode is used for nav (instead of tabs or breadcrumbs)\r\n       * @data {Boolean} visual\r\n       */\n      isVisual: this.visual,\n      /**\r\n       * The panes for when splittable is true\r\n       * @data {Array} currentPanes\r\n       */\n      currentPanes: this.panes.slice(),\n      /**\r\n       * If true the configuration will be shown\r\n       * @data {Boolean} visual\r\n       */\n      showRouterCfg: false,\n      /**\r\n       * Becomes true once the pane splitter is mounted\r\n       * @data {Boolean} visual\r\n       */\n      splitterMounted: false,\n      visualStyleContainer: bbn.fn.createObject()\n    };\n  },\n  computed: {\n    selectedTab: {\n      get() {\n        return bbn.fn.search(this.tabsList, {\n          idx: this.selected\n        });\n      },\n      set(v) {\n        bbn.fn.log(\"SETING SELECTED TAB\");\n        let done = false;\n        let i = v;\n        while (i > -1) {\n          if (this.tabsList[i]) {\n            this.selected = this.tabsList[i].idx;\n            done = true;\n            break;\n          }\n          i--;\n        }\n        if (!done) {\n          i = v;\n          while (i < this.tabsList.length) {\n            if (this.tabsList[i]) {\n              this.selected = this.tabsList[i].idx;\n              done = true;\n              break;\n            }\n            i++;\n          }\n        }\n        if (!done) {\n          this.selected = null;\n        }\n      }\n    },\n    isSplittable() {\n      return this.splittable && !this.single;\n    },\n    visualContainerStyle() {\n      if (!this.isVisual) {\n        return {};\n      }\n      let coord = [1, this.numVisualCols + 1, 1, this.numVisualRows + 1];\n      if (this.views.length > 1) {\n        switch (this.visualOrientation) {\n          case 'top':\n            coord[2] = 2;\n            break;\n          case 'bottom':\n            coord[3] = coord[3] - 1;\n            break;\n          case 'left':\n            coord[0] = 2;\n            break;\n          case 'right':\n            coord[1] = coord[1] - 1;\n            break;\n        }\n      }\n      return {\n        position: 'relative',\n        top: null,\n        left: null,\n        right: null,\n        bottom: null,\n        gridColumnStart: coord[0],\n        gridColumnEnd: coord[1],\n        gridRowStart: coord[2],\n        gridRowEnd: coord[3],\n        zoom: 1\n      };\n    },\n    /**\r\n     * Not only the baseURL but a combination of all the parent's baseURLs.\r\n     * @computed fullBaseURL\r\n     * @return {String}\r\n     */\n    fullBaseURL() {\n      let vm = this,\n        base = '',\n        tmp;\n      while (tmp = vm.baseURL) {\n        base = tmp + base;\n        if (!vm.parents.length) {\n          break;\n        }\n        vm = vm.parents[0];\n      }\n      return base;\n    },\n    /**\r\n     * Returns true if there are any unsaved views.\r\n     * @computed isDirty\r\n     * @return {Boolean}\r\n     */\n    isDirty() {\n      return !!this.dirtyContainers.length;\n    },\n    /**\r\n     * The master bbn-router of this one.\r\n     * @computed itsMaster\r\n     * @return {bbnCp}\r\n     */\n    itsMaster() {\n      let r = this;\n      if (this.master) {\n        return r;\n      }\n      if (this.parents.length) {\n        let i = 0;\n        while (this.parents[i] && this.parents[i].isBreadcrumb) {\n          r = this.parents[i];\n          i++;\n          if (r.master) {\n            break;\n          }\n        }\n      }\n      return r;\n    },\n    isBreadcrumbMaster() {\n      if (this.isBreadcrumb) {\n        return this.itsMaster === this;\n      }\n      return false;\n    },\n    /**\r\n     * Returns the bbn-tabs component of this router.\r\n     * @todo Kill this function, there is no anymore tabs component\r\n     * @computed itsTabs\r\n     * @fires getRef\r\n     * @return {Vue|Boolean}\r\n     */\n    itsTabs() {\n      if (!this.isBreadcrumb) {\n        return this.getRef('tabs');\n      }\n      return false;\n    },\n    /**\r\n     * The final Vue object for the active container (if it has sub-router).\r\n     * @computed activeRealContainer\r\n     * @fires getFinalContainer\r\n     * @return {Vue|Boolean}\r\n     */\n    activeRealContainer() {\n      return this.getFinalContainer();\n    },\n    /**\r\n     * The last router i.e. the deepest in the current active container - or this one if none\r\n     * @computed activeRouter\r\n     * @fires getSubRouter\r\n     * @return {bbnCp}\r\n     */\n    activeRouter() {\n      if (this.activeContainer) {\n        let sub = this.getSubRouter(this.selected);\n        if (bbn.cp.isComponent(sub)) {\n          return sub.activeRouter;\n        }\n      }\n      return this;\n    },\n    /**\r\n     * Returns the breadcrumbs array\r\n     * @computed breadcrumbs\r\n     * @return {Array}\r\n     */\n    breadcrumbs() {\n      let res = [];\n      if (this.isBreadcrumb) {\n        res.push(this);\n      }\n      if (this.breadcrumbsList.length) {\n        res.push(...this.getBreadcrumbs(this.selected));\n      }\n      return res;\n    },\n    /**\r\n     * The grid style for showing the router in visual mode\r\n     * @computed visualStyle\r\n     * @return {Object} \r\n     */\n    visualStyle() {\n      if (!this.isVisual) {\n        return {};\n      }\n      return {\n        minHeight: '100%',\n        display: 'grid',\n        gridColumnGap: '0.5rem',\n        gridRowGap: '0.5rem',\n        gridTemplateRows: 'repeat(' + this.numVisualRows + ', 1fr)',\n        gridTemplateColumns: 'repeat(' + this.numVisualCols + ', 1fr)'\n      };\n    },\n    /**\r\n     * Returns true if the visual blocks are on top or bottom of the selected container\r\n     * @computed visualIsOnHeight\r\n     * @return {Boolean} \r\n     */\n    visualIsOnHeight() {\n      if (this.isVisual) {\n        return ['top', 'bottom'].includes(this.visualOrientation);\n      }\n      return false;\n    },\n    /**\r\n     * The ratio between height and width for each block\r\n     * @computed visualRatio\r\n     * @return {Object} \r\n     */\n    visualRatio() {\n      if (!this.isVisual) {\n        return 1;\n      }\n      let diffW = this.visualIsOnHeight ? 0 : this.visualSize;\n      let diffH = this.visualIsOnHeight ? this.visualSize : 0;\n      let ratio = (this.lastKnownWidth - diffW) / (this.lastKnownHeight - diffH);\n      if (ratio > 2) {\n        return 2;\n      }\n      return Math.max(0.5, ratio);\n    },\n    /**\r\n     * The number of columns (width) for the visual mode\r\n     * @computed numVisualCols\r\n     * @return {Number} \r\n     */\n    numVisualCols() {\n      if (this.isVisual && this.ready) {\n        // Width greater or equal to height\n        let w = this.lastKnownWidth - (this.visualIsOnHeight ? 0 : this.visualSize);\n        if (this.splitterMounted) {\n          let splitter = this.getRef('splitter');\n          if (splitter.$el.clientWidth < w) {\n            w -= splitter.$el.clientWidth;\n          }\n        }\n        if (this.visualRatio >= 1) {\n          return Math.floor(w / this.visualSize);\n        } else {\n          return Math.floor(w / (this.visualSize * 1));\n        }\n      }\n      return 1;\n    },\n    /**\r\n     * The number of rows (height) for the visual mode\r\n     * @computed numVisualRows\r\n     * @return {Number} \r\n     */\n    numVisualRows() {\n      if (this.isVisual && this.ready) {\n        let h = this.lastKnownHeight - (this.visualIsOnHeight ? this.visualSize : 0);\n        if (this.splitterMounted) {\n          let splitter = this.getRef('splitter');\n          if (splitter.$el.clientHeight < h) {\n            h -= splitter.$el.clientHeight;\n          }\n        }\n        if (this.visualRatio > 1) {\n          return Math.floor(h / this.visualSize * 1);\n        } else {\n          return Math.floor(h / this.visualSize);\n        }\n      }\n      return 1;\n    },\n    /**\r\n     * The number of cells on the side where the thumbnails are shown in the visual mode\r\n     * @computed numVisuals\r\n     * @return {Number} \r\n     */\n    numVisuals() {\n      if (this.isVisual) {\n        if (['left', 'right'].includes(this.visualOrientation)) {\n          return this.numVisualRows;\n        } else {\n          return this.numVisualCols;\n        }\n      }\n      return 0;\n    },\n    /**\r\n     * The number of cells on the side where the thumbnails are shown in the visual mode\r\n     * @computed numVisualReals\r\n     * @return {Number} \r\n     */\n    numVisualReals() {\n      if (this.isVisual) {\n        return bbn.fn.filter(this.visualList, a => a.view.idx !== this.selected && !a.view.pane).length;\n      }\n      return 0;\n    },\n    /**\r\n     * The views to show, in a specific different order, for the visual mode\r\n     * @computed visualList\r\n     * @return {Array} \r\n     */\n    visualList() {\n      if (!this.isVisual) {\n        return [];\n      }\n      let moreViewsThanSlots = this.numVisuals < bbn.fn.filter(this.views, {\n        pane: false\n      }).length;\n      let numAvailableSlots = this.numVisuals - (moreViewsThanSlots ? 1 : 0);\n      let order = this.visualShowAll ? {\n        selected: 'asc',\n        fixed: 'desc',\n        pinned: 'desc',\n        last: 'desc',\n        idx: 'asc'\n      } : {\n        selected: 'desc',\n        last: 'desc',\n        fixed: 'desc',\n        pinned: 'desc',\n        idx: 'asc'\n      };\n      let idx = 0;\n      return bbn.fn.map(bbn.fn.multiorder(this.views, order), a => {\n        let visible = false;\n        if (this.visualShowAll || idx <= numAvailableSlots || this.selected === a.idx) {\n          visible = true;\n          if (!a.pane) {\n            idx++;\n          }\n        } else if (a.pane) {\n          visible = true;\n        }\n        return {\n          view: a,\n          visible: visible\n        };\n      });\n    },\n    /**\r\n     * The number of tabs which are not in a pane\r\n     * \r\n     * @returns {Number}\r\n     */\n    numOutOfPane() {\n      return bbn.fn.filter(this.views, {\n        pane: false\n      }).length;\n    },\n    /**\r\n     * The number of panes displayed\r\n     * @computed numPanes\r\n     * @return {Number} \r\n     */\n    numPanes() {\n      return this.currentPanes.length;\n    },\n    /**\r\n     * The views to show in the tabs, without the ones in the pane if splittable\r\n     * @computed tabsList\r\n     * @return {Array} \r\n     */\n    tabsList() {\n      return bbn.fn.multiorder(this.splittable ? bbn.fn.filter(this.views, a => !a.pane) : this.views, {\n        fixed: 'desc',\n        pinned: 'desc',\n        idx: 'asc'\n      });\n    },\n    hasVerticalTabs() {\n      return !this.isVisual && !this.isBreadcrumb && (this.orientation === 'left' || this.orientation === 'right');\n    }\n  },\n  methods: {\n    /**\r\n     * @method updateVisualStyleContainer\r\n     * @return {Object}\r\n     */\n    updateVisualStyleContainer() {\n      if (!this.visualStyleContainer) {\n        this.visualStyleContainer = bbn.fn.createObject();\n      } else if (!this.isVisual) {\n        this.visualStyleContainer = bbn.fn.createObject();\n      }\n      if (!this.isVisual) {\n        return;\n      }\n\n      //bbn.fn.warning(\"updateVisualStyleContainer\");\n      bbn.fn.iterate(this.views, view => {\n        if (view.view) {\n          view = view.view;\n        }\n        if (!this.visualStyleContainer[view.url]) {\n          this.visualStyleContainer[view.url] = {};\n        }\n        if (!this.urls[view.url]) {\n          return;\n        }\n        const ct = this.urls[view.url];\n        if (!ct?.isVisible || this.visualShowAll) {\n          if (this.visualStyleContainer[view.url].zoom != 0.5) {\n            this.visualStyleContainer[view.url] = {\n              zoom: 0.1\n            };\n          }\n          return;\n        }\n        let num = this.numVisuals + 1;\n        let coord = [1, num, 1, num];\n        switch (this.visualOrientation) {\n          case 'up':\n            coord[2] = 2;\n            break;\n          case 'down':\n            coord[3] = num - 1;\n            break;\n          case 'left':\n            coord[0] = 2;\n            break;\n          case 'right':\n            coord[1] = num - 1;\n            break;\n        }\n        if (this.visualStyleContainer[view.url].zoom != 1 || this.visualStyleContainer[view.url].gridColumnStart != coord[0] || this.visualStyleContainer[view.url].gridColumnEnd != coord[1] || this.visualStyleContainer[view.url].gridRowStart != coord[2] || this.visualStyleContainer[view.url].gridRowEnd != coord[3]) {\n          this.visualStyleContainer[view.url] = {\n            gridColumnStart: coord[0],\n            gridColumnEnd: coord[1],\n            gridRowStart: coord[2],\n            gridRowEnd: coord[3],\n            zoom: 1\n          };\n        }\n      });\n      return this.visualStyleContainer;\n    },\n    /**\r\n     * Alias of bbn.fn.isNumber\r\n     * @method isNumber\r\n     * @return {Boolean}\r\n     */\n    isNumber: bbn.fn.isNumber,\n    /**\r\n     * Alias of bbn.fn.numProperties\r\n     * @method numProperties\r\n     * @return {Number|Boolean}\r\n     */\n    numProperties: bbn.fn.numProperties,\n    getPortalSelector(view) {\n      if (!this.disabled && this.panes.length) {\n        let pane = this.getPane(view);\n        if (pane) {\n          return '#' + pane + slashToHyphen(this.isVisual ? view.view.url : view.url);\n        }\n      }\n      return undefined;\n    },\n    /**\r\n     * Removes an element from the views\r\n     * \r\n     * @method remove\r\n     * @param {*} misc Index, URL or element\r\n     * @param {Boolean} noCfg If set to true will not trigger the storage saving\r\n     * @fires getIndex\r\n     * @fires remove\r\n     * @emit close\r\n     * @return {Boolean}\r\n     */\n    remove(misc, force) {\n      let idx = this.getIndex(misc);\n      if (idx > -1) {\n        /** @var {Event} onBeforeClose beforeClose event, cancelable only if not force */\n        let onBeforeClose = new Event('beforeClose', {\n          cancelable: !force\n        });\n        /** @var {Event} onClose close event, cancelable only if not force */\n        let onClose = new Event('close');\n        this.$emit('beforeClose', idx, onBeforeClose);\n        bbn.fn.log(\"REMOVING \" + this.views[idx].url);\n        if (force || !onBeforeClose.defaultPrevented) {\n          if (!force && !this.ignoreDirty && this.isDirty && this.views[idx].dirty) {\n            this.confirm(this.confirmLeave, () => {\n              // Looking for dirty ones in registered forms of each container\n              let forms = this.urls[this.views[idx].url].forms;\n              if (Array.isArray(forms) && forms.length) {\n                bbn.fn.each(forms, (f, k) => {\n                  f.reset();\n                });\n              }\n              return this.close(idx, true);\n            });\n          } else if (this.views[idx] && !this.views[idx].real) {\n            bbn.fn.log(\"ERMOVE FROM ROUTER \" + idx);\n            this.$emit('close', idx, onClose);\n            let url = this.views[idx].url;\n            this.views.splice(idx, 1);\n            if (this.urls[url]) {\n              this.$removeDOM(this.urls[url].$el);\n            }\n            this.$delete(this.urls, url);\n            this.fixIndexes();\n            this.$forceUpdate();\n            return true;\n          }\n        }\n      }\n      return false;\n    },\n    getPane(obj) {\n      if (!obj) {\n        return false;\n      }\n      if (this.isVisual) {\n        return obj.view.pane || false;\n      }\n      return obj.pane || false;\n    },\n    selectClosest(idx) {\n      if (idx === this.selected && this.views[idx] && !this.views[idx].pane) {\n        return;\n      }\n      if (this.selected === idx) {\n        if (this.views.length) {\n          let newIdx = false;\n          bbn.fn.each(this.history, a => {\n            let tmp = this.getIndex(a);\n            if (tmp !== false && !this.views[tmp].pane) {\n              newIdx = tmp;\n              return false;\n            }\n          });\n          if (newIdx === false) {\n            let tmp = idx;\n            while (tmp >= 0) {\n              if (this.views[tmp] && !this.views[tmp].pane) {\n                newIdx = tmp;\n                break;\n              }\n              tmp--;\n            }\n            if (newIdx === false) {\n              tmp = idx;\n              while (tmp < this.views.length) {\n                if (this.views[tmp] && !this.views[tmp].pane) {\n                  newIdx = tmp;\n                  break;\n                }\n                tmp++;\n              }\n            }\n          }\n          if (this.views[newIdx]) {\n            this.activateIndex(newIdx);\n          }\n        } else {\n          this.selected = false;\n        }\n      }\n    },\n    /**\r\n     * @method close\r\n     * @param {Number}  idx   The index of the container to close\r\n     * @param {Boolean} force Will close the container without prevention\r\n     * @param {Boolean} noCfg If set to true will not trigger the storage saving\r\n     * @fires remove\r\n     * @fires getIndex\r\n     * @fires activateIndex\r\n     * @fires setConfig\r\n     * @return {Boolean}\r\n     */\n    close(idx, force, noCfg) {\n      bbn.fn.log(\"CLOSING CT\");\n      let res = this.remove(idx, force);\n      if (res) {\n        if (this.selected > idx) {\n          this.selected--;\n        } else if (idx === this.selected) {\n          this.selectClosest(idx);\n        }\n        if (!noCfg) {\n          this.setConfig();\n        }\n      }\n      return res;\n    },\n    /**\r\n     * Adds an object with a valid url to the views.\r\n     * @method add\r\n     * @param {Object} obj\r\n     * @param {Number} idx\r\n     * @fires getFullBaseURL\r\n     * @fires search\r\n     * @fires isValidIndex\r\n     * @fires getDefaultView\r\n     */\n    add(obj, idx) {\n      let index;\n      if (this.single && this.views.length) {\n        this.remove(0, true);\n        this.$forceUpdate();\n      }\n      //obj must be an object with property url\n      if (bbn.fn.isObject(obj) && bbn.fn.isString(obj.url)) {\n        // This is a component\n        if (obj.$options) {\n          if (!obj.current && !obj.currentURL) {\n            if (bbn.env.path.indexOf(this.getFullBaseURL() + (obj.url ? obj.url + '/' : '')) === 0) {\n              obj.currentURL = bbn.fn.substr(bbn.env.path, this.getFullBaseURL().length);\n            } else {\n              obj.currentURL = obj.url;\n            }\n          } else {\n            if (obj.currentURL) {\n              obj.currentURL = bbn.fn.replaceAll(obj.currentURL);\n            }\n          }\n          let obj2 = bbn.fn.extend(true, {}, obj.$options.propsData),\n            props = obj.$options.props;\n          bbn.fn.iterate(props, (v, i) => {\n            if (!(i in obj2) && 'default' in v) {\n              obj2[i] = v.default;\n            }\n          });\n          bbn.fn.iterate(this.getDefaultView(), (a, n) => {\n            if (obj2[n] === undefined) {\n              obj2[n] = a;\n            }\n          });\n          obj2.real = true;\n\n          // ---- ADDED 16/12/20 (Mirko) ----\n          if (!obj2.current) {\n            if (bbn.env.path.indexOf(this.getFullBaseURL() + (obj2.url ? obj2.url + '/' : '')) === 0) {\n              obj2.current = bbn.fn.substr(bbn.env.path, this.getFullBaseURL().length);\n            } else {\n              obj2.current = obj2.url;\n            }\n          } else if (obj2.current !== obj2.url && obj2.current.indexOf(obj2.url + '/') !== 0) {\n            obj2.current = obj2.url;\n          }\n          if (!obj2.current) {\n            obj2.current = obj2.url;\n          }\n          if (obj2.content) {\n            obj2.loaded = true;\n          }\n          // ---- END ----\n\n          if (obj2.real && !this.hasRealContainers) {\n            this.hasRealContainers = true;\n          }\n          if (obj2.url === '') {\n            this.hasEmptyURL = true;\n          }\n          if (this.search(obj2.url) === false) {\n            if (this.isValidIndex(idx)) {\n              this.views.splice(idx, 0, obj2);\n            } else if (this.hasRealContainers && this.first !== 'real' && !obj2.real) {\n              idx = bbn.fn.search(this.views, {\n                real: true\n              });\n              this.views.splice(idx, 0, obj2);\n            } else {\n              this.views.push(obj2);\n            }\n          }\n        } else {\n          if (!obj.current) {\n            if (bbn.env.path.indexOf(this.getFullBaseURL() + (obj.url ? obj.url + '/' : '')) === 0) {\n              obj.current = bbn.fn.substr(bbn.env.path, this.getFullBaseURL().length);\n            } else {\n              obj.current = obj.url;\n            }\n          } else if (obj.current !== obj.url && obj.current.indexOf(obj.url + '/') !== 0) {\n            obj.current = obj.url;\n          }\n          if (!obj.current) {\n            obj.current = obj.url;\n          }\n          if (obj.content) {\n            obj.loaded = true;\n          }\n          obj.events = {};\n          if (obj.menu === undefined) {\n            obj.menu = [];\n          }\n          index = this.search(obj.url);\n          if (index !== false) {\n            let o = this.views[index],\n              cn = this.urls[this.views[index].url];\n            if (idx === undefined) {\n              idx = index;\n            }\n            if (cn && this.isValidIndex(idx)) {\n              cn.currentIndex = idx;\n            }\n            if (obj.real) {\n              return;\n            }\n            bbn.fn.iterate(obj, (a, n) => {\n              if (o[n] !== a) {\n                // Each new property must be set with $set\n                this.$set(o, n, a);\n              }\n            });\n          } else {\n            let isValid = this.isValidIndex(idx);\n            obj.selected = false;\n            obj.idx = isValid ? idx : this.views.length;\n            bbn.fn.iterate(this.getDefaultView(), (a, n) => {\n              if (obj[n] === undefined) {\n                // Each new property must be set with $set\n                this.$set(obj, n, a);\n              }\n            });\n            obj.uid = obj.url + '-' + bbn.fn.randomString();\n            if (isValid) {\n              this.views.splice(obj.idx, 0, obj);\n            } else if (this.hasRealContainers && this.first !== 'real' && !obj.real) {\n              idx = bbn.fn.search(this.views, {\n                real: true\n              });\n              this.views.splice(idx, 0, obj);\n            } else {\n              this.views.push(obj);\n            }\n          }\n        }\n        this.fixIndexes();\n        this.$forceUpdate();\n      }\n    },\n    init(url) {\n      if (!this.isInit) {\n        if (this.numRegistered) {\n          this.isInit = true;\n        }\n        setTimeout(() => {\n          if (this.auto) {\n            this.route(url, true);\n          }\n        }, 50);\n      }\n    },\n    /**\r\n     * Function used by container to make themselves known when they are mounted.\r\n     * @method register\r\n     * @param {bbnCp} cp\r\n     * @param {Boolean} fake\r\n     * @fires add\r\n     * @fires search\r\n     * @fires route\r\n     * @fires getDefaultURL\r\n     */\n    register(cp, fake) {\n      if (fake) {\n        bbn.fn.log(\"ADDING FAKE\", cp);\n        this.add(cp);\n        return;\n      }\n      if (!bbn.fn.isString(cp.url)) {\n        bbn.fn.log(cp);\n        throw Error(bbn._('The component bbn-container must have a URL defined'));\n      }\n      //bbn.fn.log(\"REGISRTE\", cp.$el.bbnId, cp.url, this.urls[cp.url] ? this.urls[cp.url].$el.bbnId : \"NO\")\n      if (this.urls[cp.url]) {\n        bbn.fn.log(\"It exists\", this.urls[cp.url].$numBuild, this.numRegistered, this.views[0].real);\n        if (cp !== this.urls[cp.url]) {\n          throw Error(bbn._('Two containers cannot have the same URL defined (' + cp.url + ')'));\n        }\n        return;\n      }\n      this.numRegistered++;\n      this.urls[cp.url] = cp;\n      if (this.isVisual) {\n        //bbn.fn.log(\"VIEW ON VISUAL\")\n        cp.$on('view', () => {\n          this.visualShowAll = false;\n        });\n      }\n      let idx = this.search(cp.url);\n      if (idx === false) {\n        //bbn.fn.log(\"ADDING BECAUSE CAN'T FIND\", cp.url, this.views.map(a => a.url));\n        this.add(cp);\n      } else {\n        cp.currentIndex = idx;\n      }\n\n      //bbn.fn.log(this.numRegistered + \" OUT OF \" + this.numOutOfPane, cp.currentView.pane)\n      if (this.numRegistered === this.numOutOfPane) {\n        this.init(this.getDefaultURL());\n      }\n      this.$emit('registered', cp.url);\n    },\n    /**\r\n     * Function used by container to make themselves known when they are destroyed\r\n     * @method unregister\r\n     * @fires search\r\n     * @fires remove\r\n     * @param {bbnCp} cp\r\n     */\n    unregister(cp) {\n      //bbn.fn.log(\"UNREGISTERING \" + cp.url);\n      if (!bbn.fn.isString(cp.url)) {\n        throw Error(bbn._('The component bbn-container must have a URL defined'));\n      }\n      this.numRegistered--;\n      let idx = this.search(cp.url),\n        dataObj = this.postBaseUrl ? {\n          _bbn_baseURL: this.fullBaseURL\n        } : {},\n        requestID = bbn.fn.getRequestId(cp.url, dataObj);\n      if (bbn.fn.getLoader(requestID)) {\n        bbn.fn.abort(requestID);\n      }\n      if (this.urls[cp.url] !== undefined) {\n        delete this.urls[cp.url];\n      }\n      if (idx !== false) {\n        //this.remove(idx);\n      }\n    },\n    /**\r\n     * Given a URL returns the existing path of a corresponding view or false, or the default view if forced.\r\n     * @method getRoute\r\n     * @param {String} url\r\n     * @param {Boolean} force\r\n     * @fires parseURL\r\n     * @returns {String|false}\r\n     */\n    getRoute(url, force) {\n      if (!bbn.fn.isString(url)) {\n        throw Error(bbn._('The bbn-container must have a valid URL defined'));\n      }\n      if (!url && this.hasEmptyURL) {\n        return '';\n      }\n      if (!url && !this.parent) {\n        url = this.parseURL(bbn.env.path);\n      }\n      if (!url && force && this.parent) {\n        url = this.parseURL(this.router.getFullCurrentURL());\n      }\n      if (url) {\n        let bits = url.split('/');\n        while (bits.length) {\n          let st = bits.join('/');\n          if (this.urls[st]) {\n            return this.urls[st].disabled ? '' : st;\n          }\n          bits.pop();\n        }\n      }\n      if (this.def && force) {\n        return this.def;\n      }\n      if (this.views.length && force) {\n        return this.views[0].current;\n      }\n      return false;\n    },\n    /**\r\n     * Formats a baseURL correctly (without 1st slash and with end slash.\r\n     * @method formatBaseURL\r\n     * @param {String} baseURL\r\n     * @returns {String}\r\n     */\n    formatBaseURL(baseURL) {\n      while (bbn.fn.substr(baseURL, -1) === '/') {\n        baseURL = bbn.fn.substr(baseURL, 0, baseURL.length - 1);\n      }\n      while (bbn.fn.substr(baseURL, 0, 1) === '/') {\n        baseURL = bbn.fn.substr(baseURL, 1);\n      }\n      return baseURL ? baseURL + '/' : '';\n    },\n    /**\r\n     * Returns the default object for the view.\r\n     * @method getDefaultView\r\n     * @return {Object}\r\n     */\n    getDefaultView() {\n      return {\n        source: null,\n        title: bbn._(\"Untitled\"),\n        options: null,\n        cached: !this.single && this.nav,\n        scrollable: true,\n        component: null,\n        icon: '',\n        notext: false,\n        content: null,\n        menu: [],\n        loaded: null,\n        fcolor: null,\n        bcolor: null,\n        load: false,\n        pane: false,\n        selected: null,\n        css: '',\n        advert: null,\n        dirty: false,\n        help: null,\n        imessages: [],\n        script: null,\n        fixed: false,\n        pinned: false,\n        url: null,\n        current: null,\n        real: false,\n        cfg: {},\n        events: {},\n        real: false,\n        last: 0\n      };\n    },\n    /**\r\n     * Sends event beforeRoute (cancellable) and launch real routing.\r\n     * @method route\r\n     * @param {String} url\r\n     * @param {Boolean} force\r\n     * @fires realRoute\r\n     * @fires getRoute\r\n     * @fires load\r\n     * @emit beforeRoute\r\n     * @returns {void}\r\n     */\n    route(url, force) {\n      //bbn.fn.log(\"ROUTING ON \" + url);\n      if (!bbn.fn.isString(url)) {\n        throw Error(bbn._('The component bbn-container must have a valid URL defined (URL is not a string)'));\n      }\n      url = bbn.fn.replaceAll('//', '/', url);\n      /** @var {Boolean} ok Will prevent the route to happen if false */\n      let ok = true;\n\n      // Looking first in the opened panes if splittable\n      if (this.splittable) {\n        bbn.fn.each(this.currentPanes, a => {\n          bbn.fn.each(a.tabs, (v, i) => {\n            if (url.indexOf(v.url) === 0) {\n              /** @var {bbnCp} container The bbn-container component for the given URL if it's in a pane] */\n              let container = this.urls[v.url];\n              if (!container) {\n                ok = false;\n              }\n              if (a.selected !== i) {\n                a.selected = i;\n                ok = false;\n              }\n              if (v.current !== url) {\n                v.current = url;\n                if (container) {\n                  container.setCurrent(url);\n                }\n              }\n              return false;\n            }\n          });\n          if (!ok) {\n            return false;\n          }\n        });\n      }\n      if (ok && this.ready && (force || !this.activeContainer || url !== this.currentURL)) {\n        let event = new CustomEvent(\"beforeroute\", {\n          bubbles: false,\n          cancelable: true\n        });\n        this.$emit(\"beforeroute\", event, url);\n        if (!event.defaultPrevented) {\n          let bits = url.split('#');\n          url = bits[0];\n          if (url === '' && this.hasEmptyURL) {\n            this.urls[''].setCurrent(url);\n            this.realRoute('', '', force);\n            return;\n          }\n          // Checks weather the container is already there\n          if (!url) {\n            let idx = this.getRoute('', true);\n            if (idx && this.urls[idx]) {\n              url = this.urls[idx].currentURL;\n            }\n          }\n          let st = url ? this.getRoute(url) : '';\n          /** @todo There is asomething to do here */\n          //bbn.fn.log(\"ROUTING FUNCTION EXECUTING FOR \" + url + \" (CORRESPONDING TO \" + st + \")\");\n          if (!url || !force && this.currentURL === url) {\n            if (bits[1]) {}\n            //bbn.fn.log(\"SAME URL END ROUTING\");\n            return;\n          } else if (url && (!st && this.autoload || this.urls[st] && this.urls[st].load && !this.urls[st].isLoaded)) {\n            this.load(url);\n          }\n          // Otherwise the container is activated ie made visible\n          else {\n            //bbn.fn.log(\"LOADED \" + url);\n            if (!st && this.def && (!url || force)) {\n              st = this.getRoute(this.def);\n              if (st) {\n                url = this.def;\n              }\n            }\n            if (!st && force && this.views.length) {\n              st = this.views[0].url;\n              if (st) {\n                url = this.urls[st] ? this.urls[st].currentURL : st;\n              }\n            }\n            if (st) {\n              if (this.urls[st]) {\n                this.urls[st].setCurrent(url);\n              }\n              this.realRoute(url, st, force, bits[1]);\n            }\n          }\n        }\n      }\n    },\n    /**\r\n     * Routes the router.\r\n     * @method realRoute\r\n     * @param {String} url The URL to route to\r\n     * @param {String} st The URL/key of the container on which we will route\r\n     * @param {Boolean} force\r\n     * @fires activate\r\n     * @emit route1\r\n     */\n    realRoute(url, st, force, anchor) {\n      if (!bbn.fn.isString(url) && !bbn.fn.isNumber(url)) {\n        throw Error(bbn._('The component bbn-container must have a valid URL defined (URL given to route is not a string)'));\n      }\n      if (this.urls[st]) {\n        //bbn.fn.log(\"REAL ROUTING GOING ON FOR \" + url);\n        if (!this.urls[st].isPane && url !== this.currentURL) {\n          //bbn.fn.log(\"THE URL IS DIFFERENT FROM THE ORIGINAL \" + this.currentURL);\n          this.currentURL = url;\n        }\n        // First routing, triggered only once\n        if (this.urls[st].currentView.pane) {\n          let pane = bbn.fn.getRow(this.currentPanes, {\n            id: this.urls[st].currentView.pane\n          });\n          if (pane && pane.tabs) {\n            let idx = bbn.fn.search(pane.tabs, {\n              url: st\n            });\n            /*\r\n            if (pane.tabs[idx] && (pane.selected === idx)) {\r\n              this.activate(url, this.urls[st]);\r\n            }\r\n            */\n            if (pane.tabs[idx]) {\n              this.activate(url, this.urls[st]);\n            }\n          }\n        } else {\n          if (!this.routed) {\n            this.routed = true;\n            this.$emit(\"route1\", this);\n            this.$nextTick(this.onResize);\n          }\n          this.activate(url, this.urls[st]);\n        }\n        if (this.urls[st] && this.urls[st].isLoaded) {\n          this.urls[st].currentURL = url;\n          this.$nextTick(() => {\n            let child = this.urls[st].find('bbn-router');\n            //bbn.fn.log(\"LOOKING FOR CHILD\", child);\n            if (child) {\n              child.route(bbn.fn.substr(url, st.length + 1), force);\n            } else {\n              let ifr = this.urls[st].find('bbn-frame');\n              if (ifr) {\n                ifr.route(bbn.fn.substr(url, st.length + 1));\n              }\n            }\n          });\n        }\n      }\n    },\n    /**\r\n     * Routes to the next view if any.\r\n     * @method next\r\n     * @fires activateIndex\r\n     */\n    next(force) {\n      let next = this.selected + 1;\n      if (!this.views[next] && force) {\n        next = 0;\n      }\n      if (this.views[next]) {\n        this.activateIndex(next);\n      }\n    },\n    /**\r\n     * Routes to the previous view if any.\r\n     * @method prev\r\n     * @fires activateIndex\r\n     */\n    prev(force) {\n      let prev = this.selected - 1;\n      if (!this.views[prev] && force) {\n        prev = this.views.length - 1;\n      }\n      if (this.views[prev]) {\n        this.activateIndex(prev);\n      }\n    },\n    /**\r\n     * Shows the container with the corresponding URL and hide all others.\r\n     * @method activate\r\n     * @param url\r\n     * @param container\r\n     */\n    activate(url, container) {\n      if (!bbn.fn.isString(url)) {\n        throw Error(bbn._('The component bbn-container must have a valid URL defined (activate)'));\n      }\n      if (!container) {\n        let row = bbn.fn.getRow(this.views, {\n          current: url\n        });\n        if (!row) {\n          row = bbn.fn.getRow(this.views, {\n            url: url\n          });\n        }\n        if (!row) {\n          throw new Error(bbn._(\"Impossible to find a container for the URL %s\", url));\n        }\n        if (!this.urls[row.url]) {\n          throw new Error(bbn._(\"The container for the URL %s is not registered\", row.url));\n        }\n        container = this.urls[row.url];\n      }\n\n      //bbn.fn.log(\"ACTIVATING \" + url + \" AND SENDING FOLLOWING CONTAINER:\", container);\n      if (this.selected !== container.currentIndex) {\n        this.$emit('activate', url);\n        container.setCurrent(url);\n        if (!container.isPane) {\n          this.activeContainer = container;\n        }\n        container.show();\n        // Scrolling tabs\n        if (this.scrollable && this.nav && !this.breadcrumb && !this.isVisual) {\n          let scroll = this.getRef('horizontal-scroll');\n          let tab = this.getRef('tab-' + container.currentIndex);\n          if (scroll?.ready) {\n            scroll.scrollTo(tab);\n          } else if (scroll) {\n            scroll.$on('ready', sc => {\n              setTimeout(() => {\n                sc.scrollTo(this.getRef('tab-' + container.currentIndex));\n              }, 100);\n            });\n          }\n        }\n      } else if (url !== container.currentURL) {\n        if (container.routers) {\n          let rt;\n          bbn.fn.iterate(container.routers, (r, n) => {\n            if (!rt) {\n              rt = r;\n            }\n            if (url.indexOf(r.baseURL) === 0) {\n              rt = r;\n              return false;\n            }\n          });\n          if (rt) {\n            rt.route(url.indexOf(rt.baseURL) === 0 ? bbn.fn.substr(url, rt.baseURL.length) : '');\n          }\n        } else {\n          this.activeContainer.setCurrent(url);\n        }\n      }\n      //bbn.fn.log(\"ACTIVATED \" + url + \" AND ACTIVATED CONTAINER BELOW:\", this.activeContainer);\n    },\n\n    /**\r\n     * @method changeURL\r\n     * @param {String} url\r\n     * @param {String} title\r\n     * @param {Boolean} replace\r\n     * @fires getFullBaseURL\r\n     */\n    changeURL(url, title, replace) {\n      if (!bbn.fn.isString(url)) {\n        throw Error(bbn._('The component bbn-container must have a valid URL defined (change URL)'));\n      }\n      if (!bbn.env.isInit) {\n        return;\n      }\n      if (title && title !== this.currentTitle) {\n        this.currentTitle = title;\n      }\n      if (url !== this.currentURL) {\n        this.currentURL = url;\n        // Will fire again\n        return;\n      }\n\n      /*\r\n      bbn.fn.log([\r\n        \"changeURL\",\r\n        url,\r\n        title,\r\n        this,\r\n        this.parentContainer ? \r\n          [\"FROM PQARENT\", this.parentContainer.currentTitle, this.parentContainer.title]\r\n          : this.currentTitle\r\n      ]);\r\n      */\n      // Changing the current property of the view cascades on the container's currentURL\n      if (this.views[this.selected] && (url.indexOf(this.views[this.selected].url + '/') === 0 || url === this.views[this.selected].url)) {\n        this.$set(this.views[this.selected], 'current', url);\n      }\n      if (this.urlNavigation) {\n        if (this.parentContainer) {\n          //this.parentContainer.currentTitle = title + ' < ' + this.parentContainer.title;\n          if (!this.parentContainer.isPane) {\n            this.parent.currentURL = this.baseURL + url;\n          } else {\n            this.parentContainer.currentView.current = this.baseURL + url;\n          }\n        } else if (replace || url !== bbn.env.path) {\n          if (!replace) {\n            //bbn.fn.log(\"NO REPLAACE\", this.getFullBaseURL() + url, bbn.env.path);\n          }\n          if (!replace && (this.getFullBaseURL() + url).indexOf(bbn.env.path) === 0) {\n            //bbn.fn.log(\"REPLACING\");\n            replace = true;\n          }\n          bbn.fn.setNavigationVars(this.getFullBaseURL() + url, this.currentTitle, {}, replace);\n        }\n      }\n    },\n    /**\r\n     * Returns the baseURL property.\r\n     * @method getBaseURL\r\n     * @returns {String}\r\n     */\n    getBaseURL() {\n      return this.baseURL;\n    },\n    /**\r\n     * Returns a string of all the baseURL properties till root.\r\n     * @method getFullBaseURL\r\n     * @returns {String}\r\n     */\n    getFullBaseURL() {\n      return this.fullBaseURL;\n    },\n    /**\r\n     * Returns the full URL from the root router (without the hostname).\r\n     * @method getFullURL\r\n     * @fires getFullBaseURL\r\n     * @returns {String}\r\n     */\n    getFullURL() {\n      let url = this.getURL();\n      if (url !== false) {\n        return this.getFullBaseURL() + url;\n      }\n      return '';\n    },\n    /**\r\n     * Returns the current URL of the current router.\r\n     * @method getCurrentURL\r\n     * @returns {String}\r\n     */\n    getCurrentURL() {\n      return this.currentURL;\n    },\n    /**\r\n     * Returns the full current URL from the root router (without the hostname).\r\n     * @method getFullCurrentURL\r\n     * @fires getCurrentURL\r\n     * @fires getFullBaseURL\r\n     * @returns {String|Boolean}\r\n     */\n    getFullCurrentURL() {\n      let url = this.getCurrentURL();\n      if (url !== false) {\n        return this.getFullBaseURL() + url;\n      }\n      return false;\n    },\n    /**\r\n     * Returns the url relative to the current tabNav from the given url.\r\n     * @method parseURL\r\n     * @param fullURL\r\n     * @returns {String}\r\n     */\n    parseURL(fullURL) {\n      if (fullURL === undefined) {\n        return '';\n      }\n      if (!bbn.fn.isString(fullURL)) {\n        fullURL = fullURL.toString();\n      }\n      if (fullURL.indexOf(bbn.env.root) === 0) {\n        fullURL = bbn.fn.substr(fullURL, bbn.env.root.length);\n      }\n      fullURL = bbn.fn.removeTrailingChars(fullURL, '/');\n      if (this.fullBaseURL === fullURL + '/') {\n        return '';\n      }\n      if (this.fullBaseURL) {\n        if (fullURL.indexOf(this.fullBaseURL) === 0) {\n          fullURL = bbn.fn.substr(fullURL, this.fullBaseURL.length);\n        } else {\n          fullURL = '';\n        }\n      }\n      return fullURL;\n    },\n    /**\r\n     * @method isValidIndex\r\n     * @return {Boolean}\r\n     */\n    isValidIndex(idx) {\n      return typeof idx === 'number' && this.views[idx] !== undefined;\n    },\n    /**\r\n     * Activates the default view, or the first one if no default.\r\n     * @method activateDefault\r\n     * @fires getIndex\r\n     * @fires isValidIndex\r\n     * @fires activate\r\n     */\n    activateDefault() {\n      let idx = this.getIndex('', true);\n      if (this.isValidIndex(idx)) {\n        this.activate(this.views[idx].current ? this.views[idx].current : this.views[idx].url);\n      }\n    },\n    /**\r\n     * @method activateIndex\r\n     * @param {Number} idx\r\n     * @fires isValidIndex\r\n     * @fires route\r\n     */\n    activateIndex(idx) {\n      if (this.isValidIndex(idx)) {\n        this.route(this.urls[this.views[idx].url] ? this.urls[this.views[idx].url].currentURL : this.views[idx].current);\n      }\n    },\n    /**\r\n     * @method getVue\r\n     * @fires isValidIndex\r\n     * @return {Vue|Boolean}\r\n     */\n    getVue(idx) {\n      return this.getContainer(idx);\n    },\n    /**\r\n     * Returns the corresponding container's component's DOM element.\r\n     * @method getContainer\r\n     * @param {Number} idx\r\n     * @return {bbnCp}\r\n     */\n    getContainer(idx) {\n      if (idx === undefined) {\n        idx = this.selected;\n      }\n      return this.urls[this.views[idx]?.url];\n    },\n    /**\r\n     * Returns the corresponding container's component's DOM element.\r\n     * @method getDOMContainer\r\n     * @param {Number} idx\r\n     * @fires getContainer\r\n     * @return {HTMLElement|Boolean}\r\n     */\n    getDOMContainer(idx) {\n      if (idx === undefined) {\n        idx = this.selected;\n      }\n      let c = this.getContainer(idx);\n      return c ? c.$el : false;\n    },\n    /**\r\n     * Returns the next router in the corresponding container if there's any.\r\n     * @method getSubRouter\r\n     * @param misc\r\n     * @fires getIndex\r\n     * @fires getvue\r\n     * @return {Vue|null}\r\n     */\n    getSubRouter(misc) {\n      let idx = this.getIndex(misc);\n      if (idx === undefined) {\n        idx = this.selected;\n      }\n      let container = this.getContainer(idx);\n      if (container) {\n        return container.find('bbn-router') || null;\n      }\n      return null;\n    },\n    /**\r\n     * @method getFinalContainer\r\n     * @param misc\r\n     * @fires getIndex\r\n     * @fires getSubRouter\r\n     * @fires getContainer\r\n     * @return {bbnCp}\r\n     */\n    getFinalContainer(misc) {\n      let idx = this.getIndex(misc);\n      if (idx === undefined) {\n        idx = this.selected;\n      }\n      let router = this.getSubRouter(idx);\n      if (router) {\n        return router.getFinalContainer();\n      }\n      return this.getContainer(idx);\n    },\n    /**\r\n     * @method getRealVue\r\n     * @param misc\r\n     * @fires getFinalContainer\r\n     * @return {bbnCp}\r\n     */\n    getRealVue(misc) {\n      return this.getFinalContainer(misc);\n    },\n    /**\r\n     * @method getIndex\r\n     * @fires isValidIndex\r\n     * @fires search\r\n     * @return {Number|Boolean}\r\n     */\n    getIndex(misc) {\n      if (!this.views.length) {\n        return false;\n      }\n      if ([undefined, null].includes(misc)) {\n        return this.selected;\n      }\n      if (!this.isValidIndex(misc)) {\n        if (typeof misc === 'string') {\n          misc = this.search(misc);\n        } else if (typeof misc === 'object') {\n          // Vue\n          if (misc.$el) {\n            misc = misc.$el;\n          }\n          if (misc.tagName) {\n            bbn.fn.each(this.$children, ct => {\n              if (ct.$vnode && ct.$vnode.componentOptions && ct.$vnode.componentOptions.tag === 'bbn-container' && (ct.$el === misc || ct.$el.contains(misc))) {\n                misc = ct.currentIndex;\n                return false;\n              }\n            });\n          }\n        }\n      }\n      return this.isValidIndex(misc) ? misc : false;\n    },\n    fixIndexes() {\n      bbn.fn.each(this.views, (v, i) => {\n        if (v.idx !== i) {\n          v.idx = i;\n          if (this.urls[v.url]) {\n            this.urls[v.url].currentIndex = i;\n          }\n        }\n      });\n    },\n    /**\r\n     * Moves a container within the router, changes its idx.\r\n     * \r\n     * @method move\r\n     * @param {Number} from The index of the container to move\r\n     * @param {Number} to   The index to which the container must go\r\n     * @returns \r\n     */\n    move(from, to) {\n      if (!bbn.fn.isNumber(from, to) || from === to || !this.views[from] || !this.views[to]) {\n        return;\n      }\n      bbn.fn.move(this.views, from, to);\n      let selectedOk = false;\n      if (from === this.selected) {\n        this.selected = to;\n        selectedOk = true;\n      }\n      for (let i = Math.min(from, to); i <= Math.max(from, to); i++) {\n        if (this.views[i].idx !== i) {\n          if (!selectedOk && this.selected === this.views[i].idx) {\n            this.selected = i;\n          }\n          this.views[i].idx = i;\n        }\n      }\n      this.setConfig();\n    },\n    /**\r\n     * @method search\r\n     * @param {String} url\r\n     * @return {Number|Boolean}\r\n     */\n    search(url) {\n      if (!bbn.fn.isString(url)) {\n        throw Error(bbn._('The component bbn-container must have a valid URL defined (Search)'));\n      }\n      let r = bbn.fn.search(this.views, \"url\", url);\n      if (r === -1) {\n        bbn.fn.each(this.views, (tab, index) => {\n          if (url.indexOf(tab.url + '/') === 0) {\n            r = index;\n            return false;\n          }\n        });\n      }\n      return r > -1 ? r : false;\n    },\n    searchForString(needle) {\n      let res = [];\n      let st = needle.toLowerCase().trim();\n      bbn.fn.each(this.views, a => {\n        let found = false;\n        bbn.fn.iterate(this.routers, router => {\n          let tmp = router.searchForString(needle);\n          if (tmp.length) {\n            bbn.fn.each(tmp, t => {\n              t.url = this.getBaseURL() + t.url;\n              if (!bbn.fn.getRow(res, {\n                url: t.url\n              })) {\n                found = true;\n                res.push(t);\n              }\n            });\n          }\n        });\n        if (!found) {\n          let match = false;\n          let idx = -1;\n          let obj = {\n            url: a.current || a.url,\n            title: this.getFullTitle(a)\n          };\n          if ((idx = obj.url.toLowerCase().indexOf(st)) > -1) {\n            match = \"url\";\n          } else if ((idx = obj.title.toLowerCase().indexOf(st)) > -1) {\n            match = \"title\";\n          }\n          if (match) {\n            let url = this.getBaseURL() + obj.url;\n            res.push({\n              url: url,\n              title: obj.title,\n              score: match === 'url' ? 10 : 20,\n              icon: a.icon || null,\n              hash: url,\n              bcolor: a.bcolor || null,\n              fcolor: a.fcolor || null,\n              component: this.$options.components.searchResult,\n              match: bbn.fn.substr(obj[match], 0, idx) + '<strong><em>' + bbn.fn.substr(obj[match], idx, st.length) + '</em></strong>' + bbn.fn.substr(obj[match], idx + st.length)\n            });\n          }\n        }\n      });\n      return res;\n    },\n    /**\r\n     * @method callRouter\r\n     * @param {String} url\r\n     * @param st\r\n     * @fires getFullBaseURL\r\n     * @fires realRoute\r\n     */\n    callRouter(url, st) {\n      if (!bbn.fn.isString(url)) {\n        throw Error(bbn._('The component bbn-container must have a valid URL defined (from callRouter)'));\n      }\n      if (this.parent) {\n        let containers = this.ancestors('bbn-container');\n        url = bbn.fn.substr(this.getFullBaseURL(), this.router.baseURL.length) + url;\n        //bbn.fn.log(\"CALL ROOT ROUTER WITH URL \" + url);\n        // The URL of the last bbn-container as index of the root router\n        this.router.realRoute(url, containers[containers.length - 1].url, true);\n      } else {\n        this.realRoute(url, st, true);\n      }\n    },\n    /**\r\n     * @method searchContainer\r\n     * @param {String} url\r\n     * @param {Boolean} deep\r\n     * @fires search\r\n     * @fires getContainer\r\n     * @return {Vue|Boolean}\r\n     */\n    searchContainer(url, deep) {\n      let container = false,\n        idx = this.search(url);\n      if (idx !== false) {\n        container = this.getContainer(idx);\n        if (deep && container) {\n          let router = container.find('bbn-router');\n          if (router) {\n            let real = router.searchContainer(bbn.fn.substr(url, router.baseURL.length), true);\n            if (real) {\n              return real;\n            }\n          }\n        }\n      }\n      return container;\n    },\n    /**\r\n     * @method load\r\n     * @param {String} url\r\n     * @param {Boolean} force\r\n     * @fires search\r\n     * @fires add\r\n     * @fires parseURL\r\n     * @fires callRouter\r\n     * @fires navigate\r\n     * @fires activate\r\n     * @emit update\r\n    */\n    load(url, force, index) {\n      if (url) {\n        this.isLoading = true;\n        let finalURL = this.fullBaseURL + url;\n        let idx = this.search(url);\n        let toAdd = false;\n        let view;\n        if (idx !== false) {\n          //bbn.fn.log(\"INDEX RETRIEVED BEFORE LOAD: \" + idx.toString(), JSON.stringify(this.views[idx], null, 2));\n          if (this.views[idx].loading || !force && !this.views[idx].load) {\n            return;\n          }\n          view = this.views[idx];\n          //bbn.fn.log(finalURL, idx, JSON.stringify(view, null, 2), force, index);\n          //alert(\"STOP\");\n          if (force) {\n            let kept = {\n              loading: true,\n              loaded: false,\n              load: true,\n              url: view.url,\n              current: url,\n              selected: true,\n              cached: view.cached !== undefined ? view.cached : this.single || !this.nav ? false : true,\n              pane: view.pane,\n              title: view.title,\n              fixed: view.fixed,\n              pinned: view.pinned,\n              index: idx,\n              real: view.real || false,\n              last: bbn.fn.timestamp()\n            };\n            if (view.icon) {\n              kept.icon = view.icon;\n            }\n            if (view.bcolor) {\n              kept.bcolor = view.bcolor;\n            }\n            if (view.fcolor) {\n              kept.fcolor = view.fcolor;\n            }\n            bbn.fn.iterate(bbn.fn.extend(this.getDefaultView(), kept), (a, n) => {\n              if (view[n] !== a) {\n                this.$set(view, n, a);\n              }\n            });\n            if (this.urls[url]) {\n              this.urls[url].isLoaded = false;\n              this.urls[url].dirty = false;\n            }\n          }\n          if (index !== undefined && idx !== index) {\n            this.move(idx, index);\n            idx = index;\n          }\n        } else {\n          toAdd = true;\n          idx = index === undefined ? this.views.length : index;\n        }\n        if (this.single) {\n          idx = 0;\n        }\n        if (toAdd) {\n          bbn.fn.log(\"ADDING ON LOAD\");\n          this.add({\n            url: url,\n            title: view?.title ? view.title : bbn._('Loading'),\n            load: true,\n            loading: true,\n            real: view?.real || false,\n            pane: false,\n            scrollable: !this.single,\n            current: url,\n            error: false,\n            loaded: false,\n            hidden: false,\n            last: bbn.fn.timestamp()\n          }, idx);\n          view = this.views[this.search(url)];\n        } else if (!this.views[idx].loading) {\n          this.views[idx].loading = true;\n        }\n        if (!this.views[idx].pane) {\n          this.currentURL = this.parseURL(url);\n        }\n        this.$forceUpdate();\n        let portal = this.getRef('portal-' + url);\n        if (portal) {\n          portal.$forceUpdate();\n        }\n        this.$emit('update', this.views);\n        this.$emit(\"load\", finalURL);\n        let dataObj = this.postBaseUrl ? {\n          _bbn_baseURL: this.fullBaseURL\n        } : {};\n        return this.$nextTick(() => {\n          this.post(finalURL, dataObj, d => {\n            let callRealInit = true;\n            this.isLoading = false;\n            //this.remove(url);\n            if (d.url) {\n              d.url = this.parseURL(d.url);\n            }\n            if (!d.url) {\n              d.url = url;\n            }\n            //bbn.fn.warning(\"URLS\", url, d.url);\n            if (url.indexOf(d.url) === 0) {\n              d.current = url;\n              //bbn.fn.warning(\"CURRENT DEFINED AS \" + d.current);\n            } else {\n              bbn.fn.warning(url + ' != ' + d.url);\n              let searchIdx = this.search(url);\n              if (searchIdx !== false) {\n                idx = searchIdx;\n                bbn.fn.log(\"REMOVED\");\n                this.remove(searchIdx, true);\n              }\n            }\n            if (d.data && bbn.fn.numProperties(d.data)) {\n              d.source = d.data;\n              delete d.data;\n            }\n            if (!d.title || d.title === bbn._('Loading')) {\n              if (view && view.title) {\n                d.title = view.title;\n              } else {\n                let title = bbn._('Untitled');\n                let num = 0;\n                while (bbn.fn.search(this.views, {\n                  title: title\n                }) > -1) {\n                  num++;\n                  title = bbn._('Untitled') + ' ' + num;\n                }\n                d.title = title;\n              }\n            }\n            if (!d.current && d.url) {\n              d.current = d.url;\n            }\n            if (d.url !== d.current && this.urls[d.current]) {\n              let currentIndex = this.urls[d.current].currentIndex;\n              //bbn.fn.warning(\"DELETING VIEW CASE.... \" + d.url + ' / ' + d.current + ' ' + currentIndex);\n              //bbn.fn.log([d.url, this.urls[d.current], this.urls[d.url], Object.keys(this.urls), bbn.fn.search(this.views, {idx: this.urls[d.current].idx})]);\n              this.remove(currentIndex, true);\n              this.$forceUpdate().then(() => {\n                const onRegister = url => {\n                  //bbn.fn.log([\"REGISTERED\", url]);\n                  if (url === d.url) {\n                    this.$off('registered', onRegister);\n                    let view = bbn.fn.getRow(this.views, {\n                      url: url\n                    });\n                    if (this.selected === view.idx || view.pane) {\n                      this.realInit(url);\n                    }\n                  }\n                };\n                this.$on('registered', onRegister);\n                let o = bbn.fn.extend(view || bbn.fn.createObject(), d, {\n                  loading: false,\n                  load: true,\n                  real: view?.real || false,\n                  loaded: true\n                });\n                //bbn.fn.log([\"BEFORE\", this.views.length, Object.keys(this.urls)]);\n                this.add(o, currentIndex);\n                //bbn.fn.log([\"AFTER\", this.views.length, Object.keys(this.urls)]);\n                this.$forceUpdate().then(() => {\n                  //bbn.fn.log(this.search(o.url), o);\n                  let searchIndex = this.search(o.url);\n                  //bbn.fn.log(\"Looking for \" + o.url);\n                  if (searchIndex !== false) {\n                    //this.activateIndex(searchIndex);\n                    this.selected = searchIndex;\n                  }\n                });\n              });\n              //callRealInit = false;\n              /*\r\n              */\n            } else {\n              this.$forceUpdate().then(() => {\n                let o = bbn.fn.extend(view || bbn.fn.createObject(), d, {\n                  loading: false,\n                  load: true,\n                  real: view?.real || false,\n                  loaded: true\n                });\n                let searchIndex = this.search(o.url);\n                //bbn.fn.log(\"Looking for \" + o.url);\n                if (searchIndex !== false && this.urls[this.views[searchIndex].url]) {\n                  //this.remove(searchIndex);\n                  //bbn.fn.warning(\"FOUND AND NOT REMOVED \" + searchIndex);\n                  this.urls[this.views[searchIndex].url].isLoaded = true;\n                  this.urls[this.views[searchIndex].url].dirty = false;\n                  this.urls[this.views[searchIndex].url].ready = false;\n                  this.urls[this.views[searchIndex].url].init();\n                } else {\n                  //bbn.fn.warning(\"ADDEDD \" + idx);\n                  //bbn.fn.log(\"ADDING AFTER LOAD\");\n                  this.add(o, idx);\n                }\n                if (o.title && !o.pane) {\n                  this.currentTitle = o.title;\n                }\n                //this.$forceUpdate();\n                this.$nextTick(() => {\n                  if (callRealInit) {\n                    this.realInit(d.url);\n                  }\n                });\n              });\n            }\n          }, xhr => {\n            this.isLoading = false;\n            let idx = this.search(this.parseURL(finalURL));\n            if (idx !== false) {\n              let url = this.views[idx].url;\n              if (this.urls[url]) {\n                this.urls[url].errorStatus = xhr;\n                this.urls[url].setTitle(bbn._(\"Error\"));\n                this.urls[url].setIcon(\"nf nf-fa-warning\");\n                if (this.selected === idx) {\n                  this.callRouter(finalURL, url);\n                }\n              }\n            }\n          }, () => {\n            this.isLoading = false;\n            let idx = this.search(this.parseURL(finalURL));\n            if (idx !== false) {\n              let url = this.views[idx].url;\n              if (this.urls[url]) {\n                this.callRouter(finalURL, url);\n                this.$nextTick(() => {\n                  this.close(idx);\n                });\n              }\n            }\n          });\n        });\n      }\n    },\n    realInit(url) {\n      //bbn.fn.log(\"REAL INIT\", url, this.urls, this.views)\n      if (this.urls[url]) {\n        this.urls[url].setLoaded(true);\n        // Otherwise the changes we just did on the props wont be taken into account at container level\n        this.urls[url].init();\n        //bbn.fn.log(\"callRouter\", this.urls[url], this.urls[url].currentView);\n        this.callRouter(this.urls[url].currentURL || url, url);\n        this.$emit('update', this.views);\n      } else {\n        //bbn.fn.log(url, this.views[0].loading, this.views[0].url, JSON.stringify(Object.keys(this.urls), null, 2));\n        //throw new Error(bbn._(\"Impossible to find the container for URL\") + ' ' + url);\n      }\n    },\n    checkLoaded(idx) {\n      return this.views[idx] &&\n      //!this.views[idx].real &&\n      this.views[idx].load && this.urls[this.views[idx].url] && this.urls[this.views[idx].url].isLoaded;\n    },\n    /**\r\n     * @method reload\r\n     * @param {Number} idx\r\n     * @fires route\r\n     */\n    reload(idx, force) {\n      if (this.checkLoaded(idx)) {\n        let url = this.views[idx].current;\n        if (!force && !this.ignoreDirty && this.isDirty && this.views[idx].dirty) {\n          this.confirm(this.confirmLeave, () => {\n            if (this.checkLoaded(idx)) {\n              // Looking for dirty ones in registered forms of each container\n              let forms = this.urls[this.views[idx].url].forms;\n              if (Array.isArray(forms) && forms.length) {\n                bbn.fn.each(forms, (f, k) => {\n                  f.reset();\n                });\n              }\n              if (this.urls[this.views[idx].url] && this.urls[this.views[idx].url].popups && this.urls[this.views[idx].url].popups.length) {\n                this.urls[this.views[idx].url].popups.splice(0);\n              }\n              this.load(url, true, idx);\n            }\n          });\n        } else {\n          this.$nextTick(() => {\n            if (this.urls[this.views[idx].url] && this.urls[this.views[idx].url].popups && this.urls[this.views[idx].url].popups.length) {\n              this.urls[this.views[idx].url].popups.splice(0);\n            }\n            this.load(url, true, idx);\n          });\n        }\n      }\n    },\n    /**\r\n     * @method getDefaultURL\r\n     * @fires parseURL\r\n     * @return {String}\r\n     */\n    getDefaultURL() {\n      let url = this.parseURL(bbn.env.path);\n      if (!url && this.url) {\n        url = this.url;\n      }\n\n      // If there is a parent router we automatically give the proper baseURL\n      if (!url && this.parentContainer && this.parentContainer.currentURL !== this.parentContainer.url) {\n        url = bbn.fn.substr(this.parentContainer.currentURL, this.parentContainer.url.length + 1);\n      }\n      if (!url && this.def) {\n        url = this.def;\n      }\n      return url;\n    },\n    /**\r\n     * @method getTitle\r\n     * @param {Number} idx\r\n     * @return {String}\r\n     */\n    getTitle(idx) {\n      let cp = this,\n        res = '';\n      if (idx === undefined) {\n        idx = this.selected;\n      }\n      if (cp.views[idx]) {\n        res += cp.views[idx].title || bbn._('Untitled');\n        if (cp.parentTab) {\n          idx = cp.parentTab.currentIndex;\n          cp = cp.parentTab.router;\n          while (cp) {\n            res += ' < ' + (cp.views[idx].title || bbn._('Untitled'));\n            if (cp.parentTab) {\n              idx = cp.parentTab.currentIndex;\n              cp = cp.parentTab.router;\n            } else {\n              cp = false;\n            }\n          }\n        }\n        res += ' - ';\n      }\n      res += bbn.env.siteTitle || bbn._(\"Untitled site\");\n      return res;\n    },\n    /**\r\n     * Sets the 'dirtyContainers' property with the list of unsaved views\r\n     * @method retrieveDirtyContainers\r\n     */\n    retrieveDirtyContainers() {\n      this.dirtyContainers.splice(0, this.dirtyContainers.length);\n      bbn.fn.iterate(this.urls, v => {\n        if (v.dirty) {\n          this.dirtyContainers.push({\n            idx: v.currentIndex,\n            url: v.url\n          });\n        }\n      });\n    },\n    /**\r\n     * @method onEscape\r\n     * @param {Event} e\r\n     */\n    onEscape(e) {\n      if (this.isVisual && this.visualShowAll) {\n        this.visualShowAll = false;\n        e.stopPropagation();\n        e.preventDefault();\n      }\n    },\n    /**\r\n     * @method getMenuFn\r\n     * @param {Number} idx\r\n     * @fires getSubRouter\r\n     * @fires getContainer\r\n     * @fires reload\r\n     * @return {Array|Boolean}\r\n     */\n    getMenuFn(idx) {\n      if (!this.nav || !this.views[idx] || this.views[idx].menu === false) {\n        return [];\n      }\n      let items = [];\n      let tmp = ((bbn.fn.isFunction(this.views[idx].menu) ? this.views[idx].menu() : this.views[idx].menu) || []).slice();\n      let others = false;\n      let container = this.getContainer(idx);\n      bbn.fn.each(this.views, (a, i) => {\n        if (i !== idx && !a.fixed) {\n          others = true;\n          return false;\n        }\n      });\n      if (!this.views[idx].help) {\n        let sub = this.getSubRouter(idx);\n        if (sub && sub.views && sub.views.length) {\n          let helps = [];\n          sub.views.forEach(a => {\n            if (a.help) {\n              helps.push({\n                url: sub.fullBaseURL + a.url,\n                content: a.help,\n                title: a.title || a.url,\n                anchor: bbn.fn.randomString(15, 20).toLowerCase()\n              });\n            }\n          });\n          if (helps.length === 1) {\n            this.views[idx].help = helps[0].content;\n          } else if (helps.length) {\n            this.views[idx].help = '';\n            let slide1 = '';\n            helps.forEach(a => {\n              slide1 += '<h1><a href=\"#' + a.anchor + '\">' + a.title + '</a></h1>\\n';\n              this.views[idx].help += '---slide---' + '\\n<a name=\"' + a.anchor + '\">\\n' + a.content;\n            });\n            this.views[idx].help = slide1 + this.views[idx].help;\n          }\n        }\n      }\n      if (this.views[idx].help) {\n        items.push({\n          text: bbn._(\"Help\"),\n          key: \"help\",\n          icon: \"nf nf-mdi-help_circle_outline\",\n          action: () => {\n            let view = this.getContainer(idx),\n              span = document.createElement('span');\n            span.innerHTML = this.views[idx].title;\n            let title = span.innerText;\n            if (!title && span.querySelector(\"[title]\").length) {\n              title = span.querySelector(\"[title]\").getAttribute(\"title\");\n            }\n            view.getPopup({\n              scrollable: false,\n              component: {\n                props: ['source'],\n                template: `\n                  <bbn-slideshow :source=\"source.content\"\n                                class=\"bbn-bg-webblue bbn-white\"\n                                :full-slide=\"true\"\n                                separator=\"---slide---\"></bbn-slideshow>`\n              },\n              source: {\n                content: this.views[idx].help\n              },\n              title: '<i class=\"bbn-large nf nf-mdi-help_circle_outline\"> </i> <span class=\"bbn-iblock\">' + title + '</span>',\n              width: '90%',\n              height: '90%'\n            });\n          }\n        });\n      }\n      if (this.views[idx].load && !this.views[idx].component) {\n        items.push({\n          text: bbn._(\"Reload\"),\n          key: \"reload\",\n          icon: \"nf nf-mdi-sync\",\n          action: () => {\n            this.reload(idx);\n          }\n        });\n      }\n      if (container && container.fullScreen) {\n        items.push({\n          text: bbn._(\"Exit full screen\"),\n          key: \"reduce\",\n          icon: \"nf nf-mdi-arrow_collapse\",\n          action: () => {\n            container.fullScreen = false;\n          }\n        });\n      } else if (container && !container.isPane) {\n        items.push({\n          text: bbn._(\"Enlarge\"),\n          key: \"enlarge\",\n          icon: \"nf nf-mdi-arrow_expand_all\",\n          action: () => {\n            container.fullScreen = true;\n          }\n        });\n      }\n      if (tmp && tmp.length) {\n        bbn.fn.each(tmp, (a, i) => {\n          items.push(a);\n        });\n      }\n      if (this.views[idx].icon && this.views[idx].title && !this.isBreadcrumb && !this.isVisual) {\n        items.push({\n          text: this.views[idx].notext ? bbn._(\"Show text\") : bbn._(\"Show only icon\"),\n          key: \"notext\",\n          icon: this.views[idx].notext ? \"nf nf-fa-font\" : \"nf nf-fa-font_awesome\",\n          action: () => {\n            this.$set(this.views[idx], 'notext', !this.views[idx].notext);\n          }\n        });\n      }\n\n      // Adding a shortcut\n      if (window.appui) {\n        items.push({\n          text: bbn._(\"Create a shortcut\"),\n          key: \"shortcut\",\n          icon: \"nf nf-fa-link\",\n          action: () => {\n            this.$emit('shortcut', {\n              text: this.views[idx].title,\n              icon: this.views[idx].icon || 'nf nf-fa-link',\n              url: this.getFullBaseURL() + this.views[idx].url\n            });\n          }\n        });\n      }\n      if (container) {\n        items.push({\n          text: bbn._(\"Copy content text\"),\n          icon: \"nf nf-fa-copy\",\n          key: \"text_copy\",\n          action: () => {\n            let scroll = container.getRef('scroll');\n            let ok = false;\n            if (scroll) {\n              let scrollContent = scroll.getRef('scrollContent');\n              if (scrollContent) {\n                bbn.fn.copy(scrollContent.innerText);\n                ok = true;\n              }\n            }\n            if (ok) {\n              appui.success(bbn._(\"Copied!\"));\n            } else {\n              appui.error(bbn._(\"Not copied!\"));\n            }\n          }\n        });\n        items.push({\n          text: bbn._(\"Copy content HTML\"),\n          icon: \"nf nf-fa-html5\",\n          key: \"html_copy\",\n          action: () => {\n            let scroll = container.getRef('scroll');\n            let ok = false;\n            if (scroll) {\n              let scrollContent = scroll.getRef('scrollContent');\n              if (scrollContent) {\n                bbn.fn.copy(scrollContent.innerHTML);\n                ok = true;\n              }\n            }\n            if (ok) {\n              appui.success(bbn._(\"Copied!\"));\n            } else {\n              appui.error(bbn._(\"Not copied!\"));\n            }\n          }\n        });\n        items.push({\n          text: bbn._(\"Screenshot\"),\n          icon: \"nf nf-mdi-image_album\",\n          key: \"screenshot\",\n          items: [{\n            text: bbn._(\"Download\"),\n            key: \"screenshot_dl\",\n            icon: \"nf nf-mdi-arrow_expand_all\",\n            action: () => {\n              container.takeScreenshot().then(canvas => {\n                if (canvas) {\n                  bbn.fn.downloadContent(bbn.fn.replaceAll('/', '-', container.getFullCurrentURL() + '_' + bbn.fn.dateSQL(undefined, true) + '.png'), canvas);\n                }\n              });\n            }\n          }, {\n            text: bbn._(\"Copy\"),\n            key: \"screenshot_copy\",\n            icon: \"nf nf-mdi-image_multiple\",\n            action: () => {\n              container.takeScreenshot(0.5).then(canvas => {\n                if (canvas) {\n                  canvas.toBlob(blob => {\n                    bbn.fn.copy(blob).then(() => {\n                      appui.success();\n                    });\n                  });\n                }\n              });\n            }\n          }, {\n            text: bbn._(\"Copy full size\"),\n            key: \"screenshot_copy\",\n            icon: \"nf nf-mdi-image_multiple\",\n            action: () => {\n              container.takeScreenshot(1).then(canvas => {\n                if (canvas) {\n                  canvas.toBlob(blob => {\n                    bbn.fn.copy(blob).then(() => {\n                      appui.success();\n                    });\n                  });\n                }\n              });\n            }\n          }]\n        });\n      }\n      if (!this.views[idx].fixed && !this.views[idx].pane) {\n        if (this.isBreadcrumb) {\n          items.push({\n            text: bbn._(\"Close\"),\n            key: \"close\",\n            icon: \"nf nf-mdi-close\",\n            action: () => {\n              this.close(idx);\n            }\n          });\n        } else {\n          if (!this.views[idx].pinned) {\n            items.push({\n              text: bbn._(\"Pin\"),\n              key: \"pin\",\n              icon: \"nf nf-mdi-pin\",\n              action: () => {\n                this.pin(idx);\n              }\n            });\n            items.push({\n              text: bbn._(\"Close\"),\n              key: \"close\",\n              icon: \"nf nf-mdi-close\",\n              action: () => {\n                this.close(idx);\n              }\n            });\n          } else {\n            items.push({\n              text: bbn._(\"Unpin\"),\n              key: \"pin\",\n              icon: \"nf nf-mdi-pin_off\",\n              action: () => {\n                this.unpin(idx);\n              }\n            });\n          }\n        }\n      }\n      if (others && !this.views[idx].pane) {\n        items.push({\n          text: bbn._(\"Close Others\"),\n          key: \"close_others\",\n          icon: \"nf nf-mdi-close_circle_outline\",\n          action: () => {\n            this.closeAllBut(idx);\n          }\n        });\n        if (!this.isVisual) {\n          let directions = [];\n          if (idx) {\n            if (idx > 1) {\n              directions.push({\n                text: bbn._(\"First\"),\n                key: \"move_first\",\n                icon: \"nf nf-mdi-close_circle_outline\",\n                action: () => {\n                  this.move(idx, 0);\n                }\n              });\n            }\n            directions.push({\n              text: bbn._(\"Before\"),\n              key: \"move_before\",\n              icon: \"nf nf-mdi-close_circle_outline\",\n              action: () => {\n                this.move(idx, idx - 1);\n              }\n            });\n          }\n          if (idx < this.views.length - 1) {\n            directions.push({\n              text: bbn._(\"After\"),\n              key: \"move_after\",\n              icon: \"nf nf-mdi-close_circle_outline\",\n              action: () => {\n                this.move(idx, idx + 1);\n              }\n            });\n            if (idx < this.views.length - 2) {\n              directions.push({\n                text: bbn._(\"Last\"),\n                key: \"move_last\",\n                icon: \"nf nf-mdi-close_circle_outline\",\n                action: () => {\n                  this.move(idx, this.views.length - 1);\n                }\n              });\n            }\n          }\n          if (directions.length) {\n            if (directions.length === 1) {\n              directions[0].text = bbn._(\"Switch position\");\n              items.push(directions[0]);\n            } else {\n              items.push({\n                text: bbn._(\"Move\"),\n                key: \"move\",\n                icon: \"nf nf-mdi-close_circle_outline\",\n                items: directions\n              });\n            }\n          }\n        }\n      }\n      if (container && this.splittable) {\n        if (container.isPane) {\n          items.push({\n            text: bbn._(\"Remove from pane\"),\n            key: \"unpane\",\n            icon: \"nf nf-mdi-window_restore\",\n            action: () => {\n              this.removeFromPane(idx);\n            }\n          });\n        } else {\n          items.push({\n            text: bbn._(\"Show in a new pane\"),\n            key: \"split\",\n            icon: \"nf nf-mdi-format_horizontal_align_right\",\n            action: () => {\n              this.addToPane(idx);\n            }\n          });\n          if (this.currentPanes.length) {\n            let tmp = {\n              text: bbn._(\"Show in pane\"),\n              key: \"panes\",\n              icon: \"nf nf-mdi-checkbox_multiple_blank_outline\",\n              items: []\n            };\n            bbn.fn.each(this.currentPanes, (a, i) => {\n              tmp.items.push({\n                text: 'Pane <div class=\"bbn-badge\">' + (i + 1) + '</div>',\n                key: \"pane\" + (i + 1),\n                action: () => {\n                  this.addToPane(idx, a.id);\n                }\n              });\n            });\n            items.push(tmp);\n          }\n        }\n      }\n      if (others && !this.views[idx].fixed && !this.views[idx].pane) {\n        items.push({\n          text: bbn._(\"Close All\"),\n          key: \"close_all\",\n          icon: \"nf nf-mdi-close_circle\",\n          action: () => {\n            this.closeAll();\n          }\n        });\n      }\n      if (!this.views[idx].pane) {\n        items.push({\n          text: bbn._(\"Configuration\"),\n          key: \"config\",\n          icon: \"nf nf-fa-cogs\",\n          action: () => {\n            this.showRouterCfg = true;\n          }\n        });\n      }\n      let menu = bbn.fn.isArray(this.menu) ? this.menu : this.menu(this.views[idx], this);\n      if (menu.length) {\n        bbn.fn.each(menu, a => {\n          items.push(a);\n        });\n      }\n      return items;\n    },\n    /**\r\n     * @method setconfig\r\n     * @fires setStorage\r\n     * @fires getConfig\r\n     */\n    setConfig() {\n      if (this.autoload && this.isInit) {\n        this.setStorage(this.getConfig(), this.parentContainer ? this.parentContainer.getFullURL() : this.storageName);\n        //this.$forceUpdate();\n      }\n    },\n\n    /**\r\n     * @method getConfig\r\n     * @return {Object}\r\n     */\n    getConfig() {\n      let cfg = {\n        baseURL: this.parentContainer ? this.parentContainer.getFullURL() : this.storageName,\n        views: [],\n        breadcrumb: this.isBreadcrumb,\n        visual: this.isVisual,\n        orientation: this.lockedOrientation ? this.visualOrientation : null,\n        panes: this.currentPanes.map(a => {\n          return {\n            id: a.id,\n            tabs: a.tabs.map(b => b.url),\n            selected: a.selected\n          };\n        })\n      };\n      bbn.fn.each(this.views, (obj, i) => {\n        if (obj.url && obj.load) {\n          let res = {\n            url: obj.url,\n            icon: obj.icon || false,\n            notext: obj.notext || false,\n            load: true,\n            loaded: false,\n            title: obj.title ? obj.title : bbn._('Untitled'),\n            fixed: !!obj.fixed,\n            pinned: !!obj.pinned,\n            pane: obj.pane || false,\n            current: obj.current ? obj.current : obj.url,\n            cfg: {},\n            real: obj.real,\n            last: obj.last\n          };\n          if (obj.bcolor) {\n            res.bcolor = obj.bcolor;\n          }\n          if (obj.fcolor) {\n            res.fcolor = obj.fcolor;\n          }\n          cfg.views.push(res);\n        }\n      });\n      return cfg;\n    },\n    /**\r\n     * @method unsetConfig\r\n     * @fires unsetStorage\r\n     */\n    unsetConfig() {\n      if (this.autoload) {\n        this.unsetStorage(this.parentContainer ? this.parentContainer.getFullURL() : this.storageName);\n      }\n    },\n    /*\r\n    observerEmit(newVal, obs){\r\n      bbn.fn.log(\"OBS EMIT\", newVal, obs);\r\n      let ele = $(\".bbn-observer-\" + obs.element, this.$el);\r\n      if ( ele.length ){\r\n        let idx = this.getIndex(ele);\r\n        if ( idx !== false ){\r\n          let i = bbn.fn.search(this.observers, {id: obs.id, element: obs.element});\r\n          if ( (i > -1) && (this.observers[i].value !== newVal) ){\r\n            if ( idx === this.selected ){\r\n              this.$emit('bbnObs' + obs.element + obs.id, newVal);\r\n              this.observers[i].value = newVal;\r\n            }\r\n            else{\r\n              this.observers[i].value = newVal;\r\n              this.$set(this.views[idx].events, 'bbnObs' + obs.element + obs.id, newVal);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    },\r\n    */\n    /**\r\n     * @method observerEmit\r\n     * @param newVal\r\n     * @param obs\r\n     * @fires getIndex\r\n     */\n    observerEmit(newVal, obs) {\n      if (bbn.cp.mixins.observer.methods.observerEmit.apply(this, [newVal, obs])) {\n        let ele = this.$el.querySelector(\".bbn-observer-\" + obs.element);\n        if (ele) {\n          let idx = this.getIndex(ele);\n          if (idx !== false) {\n            this.$set(this.views[idx].events, 'bbnObs' + obs.element + obs.id, newVal);\n            this.$nextTick(() => {\n              //this.$forceUpdate();\n            });\n          }\n        }\n      }\n    },\n    /**\r\n     * The called method on the switching to false of the \"observer Dirty\" property value\r\n     * @method observerClear\r\n     * @param {Object} obs\r\n     * @fires getIndex\r\n     * @fires $delete\r\n     * @fires $nextTick\r\n     * @fires $forceUpdate\r\n     * @fires observationTower.observerClear\r\n     */\n    observerClear(obs) {\n      let ele = this.$el.querySelector(\".bbn-observer-\" + obs.element);\n      if (ele) {\n        let idx = this.getIndex(ele);\n        if (idx !== false && this.views[idx].events['bbnObs' + obs.element + obs.id] !== undefined) {\n          this.$delete(this.views[idx].events, 'bbnObs' + obs.element + obs.id);\n          this.$nextTick(() => {\n            //this.$forceUpdate();\n          });\n        }\n      } else if (this.observationTower) {\n        this.observationTower.observerClear(obs);\n      }\n    },\n    /**\r\n     * Function triggered every time a container is shown (at the start of the animation) to change the URL if needed.\r\n     * @method enter\r\n     * @param container\r\n     */\n    enter(container) {\n      //bbn.fn.log(\"THE CONTAINER WILL BE SHOWN: \", container);\n    },\n    //Tabs\n    /**\r\n     * Cuts the given string by 'maxTitleLength' property value\r\n     * @method cutTitle\r\n     * @param {String} title\r\n     * @return {String}\r\n     */\n    cutTitle(title) {\n      return bbn.fn.shorten(title, this.maxTitleLength);\n    },\n    /**\r\n     * Returns the full title (combination of title and ftitle if any)\r\n     * \r\n     * @method getFullTitle\r\n     * @param {Object} obj\r\n     * @return {String|null}\r\n     */\n    getFullTitle(obj) {\n      let t = '';\n      if (obj.title) {\n        t += obj.title;\n      }\n      if (obj.ftitle) {\n        t += (t.length ? ' - ' : '') + obj.ftitle;\n      }\n      return t;\n    },\n    /**\r\n     * @method getFontColor\r\n     * @param {Number} idx\r\n     * @fires getRef\r\n     * @return {String}\r\n     */\n    getFontColor(idx) {\n      return this.views[idx].fcolor || '';\n      //this.views[idx].fcolor = window.getComputedStyle(el.$el ? el.$el : el).color;\n    },\n\n    /**s\r\n     * @method getBackgroundColor\r\n     * @param {Number} idx\r\n     * @fires getRef\r\n     * @return {String}\r\n     */\n    getBackgroundColor(idx) {\n      return this.views[idx].bcolor || '';\n      /*\r\n      if (this.$isMounted && this.views[idx]) {\r\n        if (!this.views[idx].bcolor) {\r\n          let el = this.getRef('title-' + idx);\r\n          if (el) {\r\n            this.views[idx].bcolor = window.getComputedStyle(el.$el ? el.$el : el).backgroundColor;\r\n            bbn.fn.log([\"GETTING BCOLOR\", idx, this.views[idx].bcolor]);\r\n          }\r\n        }\r\n          return this.views[idx].bcolor;\r\n      }\r\n        return '';\r\n      */\n    },\n\n    /**\r\n     * @method getTab\r\n     * @param {Number} idx\r\n     * @fires getRef\r\n     * @return {HTMLElement}\r\n     */\n    getTab(idx) {\n      if (idx === undefined) {\n        idx = this.selected;\n      }\n      return this.getRef('tabs').getRef('tab-' + idx);\n    },\n    /**\r\n     * @method closeAll\r\n     * @fires close\r\n     */\n    closeAll(force) {\n      for (let i = this.views.length - 1; i >= 0; i--) {\n        if (!this.views[i].fixed && !this.views[i].pinned) {\n          this.close(i, force, true);\n        }\n      }\n      this.setConfig();\n    },\n    /**\r\n     * @method closeallBut\r\n     * @param {Number} idx\r\n     * @fires close\r\n     */\n    closeAllBut(idx, force) {\n      for (let i = this.views.length - 1; i >= 0; i--) {\n        if (!this.views[i].fixed && !this.views[i].pinned && i !== idx) {\n          this.close(i, force, true);\n        }\n      }\n      this.setConfig();\n    },\n    /**\r\n     * @method pin\r\n     * @param {Number} idx\r\n     * @fires isValidIndex\r\n     * @fires setConfig\r\n     * @emit beforePin\r\n     * @emit pin\r\n     */\n    pin(idx) {\n      if (this.isValidIndex(idx)) {\n        let ev = new CustomEvent('beforePin', {\n          cancelable: true\n        });\n        this.$emit('beforePin', idx, ev);\n        if (!ev.defaultPrevented) {\n          this.views[idx].pinned = true;\n          this.setConfig();\n          this.$emit('pin', idx);\n        }\n      }\n    },\n    /**\r\n     * @method unpin\r\n     * @param {Number} idx\r\n     * @fires isValidIndex\r\n     * @fires setConfig\r\n     * @emit beforeUnpin\r\n     * @emit unpin\r\n     */\n    unpin(idx) {\n      if (this.isValidIndex(idx)) {\n        let ev = new CustomEvent('beforeUnpin', {\n          cancelable: true\n        });\n        this.$emit('beforeUnpin', idx, ev);\n        if (!ev.defaultPrevented) {\n          this.views[idx].pinned = false;\n          this.setConfig();\n          this.$emit('unpin', idx);\n        }\n      }\n    },\n    /**\r\n     * @method registerRouter\r\n     * @param {bbnCp} bc\r\n     * @param {String} url\r\n     */\n    registerRouter(router) {\n      this.routers[bbn.fn.substr(router.getBaseURL(), 0, -1)] = router;\n    },\n    /**\r\n     * @method unregisterRouter\r\n     * @param {bbnCp} bc\r\n     * @param {String} url\r\n     */\n    unregisterRouter(router) {\n      delete this.routers[bbn.fn.substr(router.getBaseURL(), 0, -1)];\n    },\n    //Breadcrumb\n    /**\r\n     * @method registerBreadcrumb\r\n     * @param {bbnCp} bc\r\n     * @param {String} url\r\n     */\n    registerBreadcrumb(bc) {\n      let url = bbn.fn.substr(bc.baseURL, 0, bc.baseURL.length - 1);\n      this.breadcrumbsList.push(bc);\n      if (this.itsMaster && !this.master) {\n        this.itsMaster.breadcrumbsList.push(bc);\n      }\n    },\n    /**\r\n     * @method unregisterBreadcrumb\r\n     * @param {bbnCp} bc\r\n     * @param {String} url\r\n     */\n    unregisterBreadcrumb(bc) {\n      if (this.breadcrumbsList) {\n        let idx = bbn.fn.search(this.breadcrumbsList, {\n          baseURL: bc.baseURL\n        });\n        if (idx !== -1) {\n          this.breadcrumbsList.splice(idx, 1);\n        }\n        if (this.itsMaster && !this.master) {\n          idx = bbn.fn.search(this.itsMaster.breadcrumbsList, {\n            baseURL: bc.baseURL\n          });\n          if (idx !== -1) {\n            this.itsMaster.breadcrumbsList.splice(idx, 1);\n          }\n        }\n      }\n    },\n    getBreadcrumbs(idx) {\n      let ret = [];\n      if (bbn.fn.isNumber(idx) && this.views[idx]) {\n        let url = this.views[idx].url,\n          bc = bbn.fn.getRow(this.breadcrumbsList, {\n            baseURL: url + '/'\n          });\n        if (this.urls[url] && bc) {\n          ret.push(...bc.breadcrumbs);\n        }\n      }\n      return ret;\n    },\n    /**\r\n     * Returns the breadcrumb's source list.\r\n     * @method getList\r\n     * @param {bbnCp} bc\r\n     * @fires close\r\n     * @return {Array}\r\n     */\n    getList(idx) {\n      let list = [],\n        parents = bbn.fn.map(idx && this.itsMaster && this.baseURL !== this.itsMaster.baseURL ? this.getParents() : [], p => {\n          return {\n            view: p.views[p.selected],\n            maxTitleLength: p.maxTitleLength\n          };\n        });\n      if (parents.length > idx) {\n        parents.splice(0, parents.length - idx);\n      }\n      bbn.fn.each(this.views, (t, i) => {\n        if (!t.hidden && t.idx !== this.selected && !t.pane) {\n          list.push({\n            view: t,\n            key: t.url,\n            parents: parents,\n            children: bbn.fn.map(this.getBreadcrumbs(i), c => {\n              return {\n                view: c.views[c.selected],\n                maxTitleLength: c.maxTitleLength\n              };\n            }),\n            maxTitleLength: this.maxTitleLength,\n            action: () => {\n              this.activateIndex(t.idx);\n            },\n            closeAction: () => {\n              return this.close(t.idx);\n            }\n          });\n        }\n      });\n      return list;\n    },\n    /**\r\n     * @method getParents\r\n     * @return {Array}\r\n     */\n    getParents() {\n      return this.parent ? [...this.parent.getParents(), this.parent] : [];\n    },\n    /**\r\n     * @method onResize\r\n     * @return {Promise}\r\n     */\n    onResize() {\n      this.keepCool(() => {\n        let m = this.setResizeMeasures();\n        let c = this.setContainerMeasures();\n        if (m || c) {\n          this.$emit('resize');\n        }\n        if (this.isVisual && this.orientation === 'auto' && !this.lockedOrientation) {\n          this.visualOrientation = this.lastKnownWidth > this.lastKnownHeight ? 'left' : 'top';\n        }\n      }, 'resize', 50);\n    },\n    /**\r\n     * @method getView\r\n     * @return {Object|null}\r\n     */\n    getView(url) {\n      return bbn.fn.getRow(this.views, {\n        url: url\n      });\n    },\n    addPane(paneId) {\n      if (this.splittable) {\n        if (!paneId) {\n          paneId = bbn.fn.randomString().toLowerCase();\n        }\n        if (!bbn.fn.getRow(this.currentPanes, {\n          id: paneId\n        })) {\n          this.currentPanes.push({\n            id: paneId,\n            tabs: [],\n            selected: -1\n          });\n        }\n      }\n      return paneId;\n    },\n    selectPaneTab(pane) {\n      let view = pane.tabs[pane.selected];\n      if (view) {\n        view.last = bbn.fn.timestamp();\n      }\n    },\n    closeTab(idx) {\n      this.close(this.tabsList[idx].idx);\n    },\n    removePane(paneId) {\n      if (this.splittable && this.currentPanes) {\n        let paneIndex = bbn.fn.search(this.currentPanes, {\n          id: paneId\n        });\n        let pane = this.currentPanes[paneIndex];\n        if (!pane) {\n          throw new Error(bbn._(\"Impossible to find the pane with ID %s\", paneId));\n        }\n        if (pane.tabs.length) {\n          throw new Error(bbn._(\"Impossible to remove the pane with ID %s as it has still containers inside\", paneId));\n        }\n        this.currentPanes.splice(paneIndex, 1);\n        if (this.routed) {\n          this.$nextTick(() => {\n            this.currentPanes.length ? this.getRef('splitter').init() : this.getRef('topSplitter').init();\n          });\n        }\n      }\n    },\n    addToPane(containerIdx, paneId) {\n      let view = this.views[containerIdx];\n      if (!view) {\n        throw new Error(bbn._(\"Impossible to find the view with index\") + ' ' + containerIdx);\n      }\n      if (view.dirty) {\n        this.alert(bbn._(\"Save your changes or discard them before moving the container\"));\n        return;\n      }\n      let pane = bbn.fn.getRow(this.currentPanes, {\n        id: paneId\n      });\n      if (!pane) {\n        paneId = this.addPane(paneId);\n        pane = bbn.fn.getRow(this.currentPanes, {\n          id: paneId\n        });\n      }\n      this.$set(this.views[containerIdx], \"pane\", paneId);\n      pane.tabs.push(view);\n      //this.$forceUpdate();\n      if (containerIdx === this.selected) {\n        this.selectClosest(containerIdx);\n      }\n      pane.selected = pane.tabs.length - 1;\n    },\n    removeFromPane(containerIdx) {\n      let view = this.views[containerIdx];\n      if (view) {\n        if (view.dirty) {\n          this.alert(bbn._(\"Save your changes or discard them before moving the container\"));\n          return;\n        }\n        let paneId = view.pane;\n        if (paneId) {\n          let pane = bbn.fn.getRow(this.currentPanes, {\n            id: paneId\n          });\n          if (pane && pane.tabs) {\n            let idx = bbn.fn.search(pane.tabs, {\n              idx: containerIdx\n            });\n            if (idx > -1) {\n              this.selected = containerIdx;\n              view.pane = false;\n              this.$nextTick(() => {\n                pane.tabs.splice(idx, 1);\n                if (!pane.tabs.length) {\n                  this.removePane(paneId);\n                } else if (pane.selected >= idx) {\n                  pane.selected--;\n                  this.getRef('pane' + pane.id).onResize(true);\n                }\n              });\n            }\n          }\n        }\n      }\n    },\n    slashToHyphen(str) {\n      return bbn.fn.replaceAll('/', '-', str);\n    }\n  },\n  /**\r\n   * @event created\r\n   */\n  created() {\n    this.componentClass.push('bbn-resize-emitter');\n    /**\r\n    * @event route\r\n    * @fires setconfig\r\n    */\n    this.$on('route', url => {\n      if (this.nav) {\n        this.setConfig();\n        let i = this.history.indexOf(url);\n        if (i > -1) {\n          this.history.splice(i, 1);\n        }\n        this.history.unshift(url);\n        while (this.history.length > this.historyMaxLength) {\n          this.history.pop();\n        }\n      }\n    });\n    let storage = !this.single && this.getStorage(this.parentContainer ? this.parentContainer.getFullURL() : this.storageName);\n    if (storage && storage.panes) {\n      bbn.fn.each(storage.panes, a => {\n        this.addPane(a.id);\n      });\n    }\n  },\n  /**\r\n   * @event mounted\r\n   * @fires getStorage\r\n   * @fires getDefaultURL\r\n   * @fires add\r\n   */\n  beforeMount() {\n    // All routers above (which constitute the fullBaseURL)\n    this.parents = this.ancestors('bbn-router');\n    // The closest\n    this.parent = this.parents.length ? this.parents[0] : false;\n    // The root\n    this.router = this.parents.length ? this.parents[this.parents.length - 1] : this;\n    // Case where the rooter is not at the root level\n\n    if (this.parent) {\n      this.parentContainer = this.closest('bbn-container');\n      let uri = this.parentContainer.url;\n      if (this.root && uri !== this.root && this.root.indexOf(uri) === 0) {\n        uri = this.root;\n      }\n      this.baseURL = this.formatBaseURL(uri);\n    }\n    // Case where the rooter is at root level\n    else {\n      // Opening the database for the visual mode multiview\n      if (!this.single && bbnRouterCp.db) {\n        bbn.db.open('bbn').then(r => {\n          this.db = r;\n        }, err => {\n          bbn.fn.log(\"Connection error in router\", err);\n        });\n      }\n      window.addEventListener(\"beforeunload\", e => {\n        e = e || window.event;\n        //if ( $(\".bbn-tabnav-unsaved\").length ){\n        if (this.isDirty) {\n          // doesn't use that string but a default string...\n          let st = bbn._('You have unsaved data, are you sure you want to leave?');\n          // For IE and Firefox prior to version 4\n          if (e) {\n            e.returnValue = st;\n          }\n          // For Safari\n          return st;\n        }\n      });\n    }\n    let tmp = [];\n\n    //bbn.fn.warning(\"BEFORE MOUNT ROUTER\")\n\n    //Get config from the storage\n    let storage = !this.single && this.getStorage(this.parentContainer ? this.parentContainer.getFullURL() : this.storageName);\n    if (storage) {\n      if (storage.breadcrumb !== undefined) {\n        this.isBreadcrumb = storage.breadcrumb;\n      }\n      if (storage.visual !== undefined) {\n        this.isVisual = storage.visual;\n      }\n      if (storage.orientation) {\n        this.visualOrientation = storage.orientation;\n        this.lockedOrientation = true;\n      }\n    }\n\n    // ---- ADDED 16/12/20 (Mirko) ----\n    // Adding bbns-container from the slot\n    if (this.$slots.default) {\n      for (let item of this.$slots.default) {\n        let node = item.bbnSchema;\n        //bbn.fn.log(\"ROUTER SLOT\", node, '-------------');\n\n        if (['bbn-container', 'bbns-container'].includes(node?.tag)) {\n          if (node.props.url === undefined) {\n            throw new Error(bbn._(\"You cannot use containers in router without defining a URL property\"));\n          }\n          if (!this.hasRealContainers) {\n            this.hasRealContainers = true;\n          }\n          if (node.props.url === '') {\n            this.hasEmptyURL = true;\n          }\n          const obj = bbn.fn.createObject(bbn.fn.extend(true, {}, node.props));\n          bbn.fn.iterate(this.getDefaultView(), (a, n) => {\n            if (obj[n] === undefined) {\n              obj[n] = a;\n            }\n          });\n          if (node.tag === 'bbn-container') {\n            obj.real = true;\n          }\n          //let o = {real: true, load: false, loaded: true};\n          //tmp.push(bbn.fn.extend({}, node.componentOptions.propsData, o));\n          tmp.push(obj);\n        }\n      }\n    }\n    // ---- END ----\n\n    bbn.fn.each(this.source, (a, i) => {\n      if (a.url === '') {\n        if (a.load) {\n          throw new Error(bbn._(\"You cannot use containers with empty URL for loading\"));\n        }\n        this.hasEmptyURL = true;\n      }\n      tmp.push(bbn.fn.extendOut(a, {\n        real: false\n      }));\n    });\n\n    //Get config from the storage\n    if (storage && storage.views && tmp) {\n      bbn.fn.each(storage.views, a => {\n        let idx = bbn.fn.search(tmp, {\n          url: a.url\n        });\n        if (idx > -1) {\n          // Static comes only from configuration\n          let isFixed = tmp[idx].fixed;\n          bbn.fn.extend(tmp[idx], a, {\n            fixed: isFixed\n          });\n        } else {\n          tmp.push(a);\n        }\n      });\n    }\n\n    // Getting the default URL\n    let url = this.getDefaultURL();\n    if (this.first !== 'real') {\n      tmp = bbn.fn.multiorder(tmp, {\n        real: 'desc'\n      });\n    }\n\n    // Adding to the views\n    //bbn.fn.warning(\"ROUTER BEFORE MOUNT\");\n    bbn.fn.each(tmp, a => {\n      if (!bbn.fn.isString(a.url)) {\n        throw new Error(bbn._(\"The container must have a valid URL\"));\n      }\n\n      // Setting current if URL starts with default URL\n      if (url && url.indexOf(a.url) === 0) {\n        a.current = url;\n      }\n\n      //bbn.fn.warning(\"ADDING BEFORE MOUNT\");\n      //bbn.fn.log(a);\n      this.add(a);\n    });\n    if (this.splittable) {\n      if (storage && storage.panes) {\n        bbn.fn.each(storage.panes, pane => {\n          bbn.fn.each(pane.tabs, tab => {\n            let view = bbn.fn.getRow(this.views, {\n              url: tab\n            });\n            let realPane = bbn.fn.getRow(this.currentPanes, {\n              id: pane.id\n            });\n            if (view && realPane) {\n              if (!view.pane) {\n                view.pane = pane.id;\n              }\n              realPane.tabs.push(view);\n            }\n          });\n        });\n      }\n      bbn.fn.each(this.views, a => {\n        if (a.pane) {\n          let pane = bbn.fn.getRow(this.currentPanes, {\n            id: a.pane\n          });\n          if (pane && !bbn.fn.getRow(pane.tabs, {\n            url: a.url\n          })) {\n            pane.tabs.push(a);\n          }\n        }\n      });\n      bbn.fn.each(this.currentPanes, pane => {\n        let done = false;\n        if (storage && storage.panes) {\n          let p = bbn.fn.getRow(storage.panes, {\n            id: pane.id\n          });\n          if (p && pane.tabs[p.selected]) {\n            pane.selected = p.selected;\n            done = true;\n          }\n        }\n        if (!done) {\n          pane.selected = pane.tabs.length ? 0 : -1;\n        }\n      });\n    }\n\n    //Breadcrumb\n    if (!this.master && this.parent && this.parentContainer) {\n      this.parent.registerBreadcrumb(this);\n      bbn.fn.log(\"VIEW ON BREADCUMB\");\n      this.parentContainer.$on('view', () => {\n        this.parent.registerBreadcrumb(this);\n      }, true);\n      this.parentContainer.$on('unview', () => {\n        this.parent.unregisterBreadcrumb(this);\n      }, true);\n      if (this.parentContainer.isVisible) {\n        this.parent.registerBreadcrumb(this);\n      }\n    }\n    if (this.parentContainer) {\n      this.parentContainer.registerRouter(this);\n    }\n    this.updateVisualStyleContainer();\n    this.ready = true;\n    this.$forceUpdate();\n    this.$nextTick(() => {\n      if (this.$slots.default) {\n        for (let item of this.$slots.default) {\n          if (item.bbnSchema?.tag === 'bbn-container') {\n            let el = this.$refsElements['ct-' + item.bbnSchema.props.url];\n            if (el) {\n              el.parentNode.replaceChild(item, el);\n            }\n          }\n        }\n      }\n      if (!this.views.length) {\n        this.init(url);\n      }\n    });\n  },\n  /**\r\n   * @event beforeDestroy\r\n   */\n  beforeDestroy() {\n    if (!this.master && this.parent) {\n      this.parent.unregisterBreadcrumb(this);\n    }\n    if (this.parentContainer) {\n      this.parentContainer.unregisterRouter(this);\n    }\n  },\n  watch: {\n    numVisuals() {\n      this.onResize();\n    },\n    numPanes() {\n      this.onResize();\n    },\n    visualShowAll(v) {\n      if (v && this.isVisual) {\n        this.getRef('visualRouter').focus();\n      }\n    },\n    selected(idx) {\n      if (this.views[idx]) {\n        //bbn.fn.log(\"In selected watcher \" + idx, bbn.fn.filter(this.views, {selected: true}));\n        bbn.fn.map(bbn.fn.filter(this.views, {\n          selected: true\n        }), a => {\n          if (a.idx !== idx) {\n            a.selected = false;\n            if (this.urls[a.url]) {\n              this.urls[a.url].$tick();\n            }\n          }\n        });\n        if (!this.views[idx].selected && !this.views[idx].pane) {\n          this.views[idx].selected = true;\n        }\n        this.views[idx].last = bbn.fn.timestamp();\n        if (this.currentURL !== this.views[idx].current) {\n          bbn.fn.log(\"CHANGING URL \" + this.currentURL + \" TO \" + this.views[idx].current);\n          this.route(this.views[idx].current);\n        }\n      } else {\n        throw new Error(\"The view with index \" + idx + \" doesn't exist\");\n      }\n    },\n    currentTitle(v) {\n      if (!this.parent) {\n        document.title = v + ' - ' + bbn.env.siteTitle;\n      }\n    },\n    /**\r\n     * @watch currentURL\r\n     * @fires changeURL\r\n     * @fires search\r\n     * @emit change\r\n     * @emit route\r\n     */\n    currentURL(newVal, oldVal) {\n      if (this.ready) {\n        let idx = this.search(newVal);\n        if (idx !== false) {\n          let v = this.views[idx];\n          let ct = this.urls[v.url];\n          if (!v.pane) {\n            this.selected = idx;\n            if (ct) {\n              this.changeURL(newVal, ct.title);\n            } else if (this.isLoading) {\n              this.changeURL(newVal, bbn._(\"Loading\"));\n            }\n          }\n        }\n        this.$emit('change', newVal);\n        this.$emit('route', newVal);\n      }\n    },\n    /**\r\n     * @watch url\r\n     * @fires route\r\n     */\n    url(newVal) {\n      if (this.ready && newVal && newVal !== this.currentURL) {\n        //bbn.fn.log(\"URL CHANGED FROM WATCHER TO \" + newVal);\n        this.route(newVal);\n      }\n    },\n    /**\r\n     * @watch dirty\r\n     */\n    isDirty(v) {\n      if (this.parentContainer) {\n        this.parentContainer.dirty = v;\n      }\n    },\n    /**\r\n     * @watch itsMaster\r\n     * @fires breadcrumbWatcher\r\n     */\n    itsMaster(newVal, oldVal) {\n      if (this.nav && newVal !== oldVal) {\n        this.isBreadcrumb = newVal ? newVal.isBreadcrumb : this.breadcrumb;\n        if (this.breadcrumbWatcher) {\n          this.breadcrumbWatcher();\n        }\n        if (newVal) {\n          /**\r\n           * @watch itsMaster.isBreadcrumb\r\n           */\n          this.breadcrumbWatcher = this.$watch('itsMaster.isBreadcrumb', isB => {\n            this.isBreadcrumb = isB;\n          });\n        }\n      }\n    },\n    currentPanes: {\n      deep: true,\n      handler() {\n        if (this.ready) {\n          this.setConfig();\n        }\n      }\n    },\n    breadcrumb(v) {\n      this.isBreadcrumb = v;\n    },\n    /**\r\n     * @watch isBreadcrumb\r\n     * @fires setConfig\r\n     */\n    isBreadcrumb(newVal) {\n      this.$nextTick(() => {\n        if (this.ready) {\n          this.setConfig();\n          this.onResize();\n        }\n      });\n    },\n    /**\r\n     * @watch isVisual\r\n     * @fires setConfig\r\n     */\n    isVisual(v) {\n      this.$nextTick(() => {\n        if (this.ready) {\n          this.setConfig();\n          this.onResize();\n        }\n      });\n    },\n    source(v, ov) {\n      //bbn.fn.log(\"ROUTER SOURCE WATCHER\", v, ov);\n      bbn.fn.each(v, a => {\n        if (!bbn.fn.isString(a.url)) {\n          throw new Error(bbn._(\"The container must have a valid URL\"));\n        }\n\n        // Setting current if URL starts with default URL\n        if (this.currentURL && this.currentURL.indexOf(a.url) === 0) {\n          a.current = this.currentURL;\n        }\n\n        //bbn.fn.warning(bbn._(\"ADDING %s ON WATCH\", a.url));\n        this.add(a);\n      });\n    },\n    views() {\n      this.updateVisualStyleContainer();\n    }\n  },\n  components: {\n    /**\r\n     * @component listItem\r\n     */\n    listItem: {\n      template: `\n<div class=\"bbn-w-100 bbn-vmiddle bbn-bordered-bottom\"\n     style=\"height: 2.5rem\"\n     @mouseenter=\"isHover = true\"\n     @mouseleave=\"isHover = false\">\n  <div class=\"bbn-flex-width bbn-vmiddle bbn-h-100\">\n    <div class=\"bbn-vmiddle bbn-h-100\">\n      <div v-for=\"(p, i) in source.parents\"\n           class=\"bbn-vmiddle bbn-h-100\">\n        <div class=\"bbn-vmiddle bbn-h-100\"\n            :style=\"{\n              backgroundColor: !isHover && p.view.bcolor ? p.view.bcolor : null,\n              color: !isHover && p.view.fcolor ? p.view.fcolor : null\n            }\">\n          <div class=\"bbn-router-breadcrumb-badge-container bbn-middle\"\n              v-if=\"numProperties(p.view.events)\">\n            <span class=\"bbn-badge bbn-small bbn-bg-red\"\n                  v-text=\"numProperties(p.view.events)\"/>\n          </div>\n          <div class=\"bbn-router-breadcrumb-loader bbn-border-text\"\n              :style=\"{borderColor: p.view.fcolor || null}\"\n              v-show=\"p.view.loading\"/>\n          <div :class=\"['bbn-router-breadcrumb-element', 'bbn-h-100', 'bbn-vmiddle', {'bbn-router-breadcrumb-dirty': p.view.dirty}]\">\n            <span v-if=\"p.view.icon\"\n                  :title=\"p.view.title\"\n                  :class=\"'bbn-router-breadcrumb-element-icon bbn-h-100 bbn-vmiddle bbn-right-xsspace' + (p.view.notext ? ' bbn-lg' : ' bbn-m')\">\n              <i :class=\"p.view.icon\"/>\n            </span>\n            <span v-if=\"!p.view.notext\"\n                  class=\"bbn-router-breadcrumb-element-text\"\n                  :title=\"p.view.title && (p.view.title.length > p.maxTitleLength) ? p.view.title : ''\"\n                  v-html=\"p.view.title ? shortTitle(p) : '` + bbn._('Untitled') + `'\"/>\n          </div>\n        </div>\n        <div>\n          <i class=\"nf nf-fa-angle_right bbn-hsmargin bbn-router-breadcrumb-arrow\"/>\n        </div>\n      </div>\n\n      <div class=\"bbn-vmiddle bbn-h-100\"\n          :style=\"{\n            backgroundColor: !isHover && source.view.bcolor ? source.view.bcolor : null,\n            color: !isHover && source.view.fcolor ? source.view.fcolor : null\n          }\">\n        <div class=\"bbn-router-breadcrumb-badge-container bbn-middle\"\n             v-if=\"numProperties(source.view.events)\">\n          <span class=\"bbn-badge bbn-small bbn-bg-red\"\n                v-text=\"numProperties(source.view.events)\"/>\n        </div>\n        <div class=\"bbn-router-breadcrumb-loader bbn-border-text\"\n             :style=\"{borderColor: source.view.fcolor || null}\"\n             v-show=\"source.view.loading\"/>\n        <div :class=\"['bbn-router-breadcrumb-element', 'bbn-h-100', 'bbn-vmiddle', {'bbn-router-breadcrumb-dirty': source.view.dirty}]\">\n          <span v-if=\"source.view.icon\"\n                :title=\"source.view.title\"\n                :class=\"'bbn-router-breadcrumb-element-icon bbn-h-100 bbn-vmiddle bbn-right-xsspace' + (source.view.notext ? ' bbn-lg' : ' bbn-m')\">\n            <i :class=\"source.view.icon\"/>\n          </span>\n          <span v-if=\"!source.view.notext\"\n                class=\"bbn-router-breadcrumb-element-text\"\n                :title=\"source.view.title && (source.view.title.length > source.maxTitleLength) ? source.view.title : ''\"\n                v-html=\"source.view.title ? (source.parents.length? shortTitle(source): source.view.title) : '` + bbn._('Untitled') + `'\"/>\n        </div>\n      </div>\n\n      <div v-for=\"(p, i) in source.children\"\n           class=\"bbn-vmiddle bbn-h-100\">\n        <div>\n          <i class=\"nf nf-fa-angle_right bbn-hsmargin bbn-large bbn-router-breadcrumb-arrow\"/>\n        </div>\n        <div class=\"bbn-vmiddle bbn-h-100\"\n             :style=\"{\n               backgroundColor: !isHover && p.view.bcolor ? p.view.bcolor : null,\n               color: !isHover && p.view.fcolor ? p.view.fcolor : null\n             }\">\n          <div class=\"bbn-router-breadcrumb-badge-container bbn-middle\"\n              v-if=\"numProperties(p.view.events)\">\n            <span class=\"bbn-badge bbn-small bbn-bg-red\"\n                  v-text=\"numProperties(p.view.events)\"/>\n          </div>\n          <div class=\"bbn-router-breadcrumb-loader bbn-border-text\"\n              :style=\"{borderColor: p.view.fcolor || null}\"\n              v-show=\"p.view.loading\"/>\n          <div :class=\"['bbn-router-breadcrumb-element', 'bbn-h-100', 'bbn-vmiddle', {'bbn-router-breadcrumb-dirty': p.view.dirty}]\">\n            <span v-if=\"p.view.icon\"\n                  :title=\"p.view.title\"\n                  :class=\"'bbn-router-breadcrumb-element-icon bbn-h-100 bbn-vmiddle bbn-right-xsspace' + (p.view.notext ? ' bbn-lg' : ' bbn-m')\">\n              <i :class=\"p.view.icon\"/>\n            </span>\n            <span v-if=\"!p.view.notext\"\n                  class=\"bbn-router-breadcrumb-element-text\"\n                  :title=\"p.view.title && (p.view.title.length > p.maxTitleLength) ? p.view.title : ''\"\n                  v-html=\"p.view.title ? shortTitle(p) : '` + bbn._('Untitled') + `'\"/>\n             </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"bbn-flex-fill bbn-h-100\"\n         :style=\"!isHover ? lastColors : {}\">\n      &nbsp;\n    </div>\n    <div v-if=\"!source.view.fixed\"\n          class=\"bbn-vmiddle bbn-h-100 bbn-hpadded\"\n          @mousedown.prevent.stop=\"close\"\n          @mouseup.prevent.stop\n          :style=\"!isHover ? lastColors : {}\">\n      <i class=\"nf nf-fa-times_rectangle\"/>\n    </div>\n  </div>\n</div>\n        `,\n      props: {\n        /**\r\n         * @prop {Object} source\r\n         * @memberof listItem\r\n         */\n        source: {\n          type: Object,\n          required: true\n        }\n      },\n      data() {\n        return {\n          isHover: false\n        };\n      },\n      computed: {\n        lastColors() {\n          let e = this.source.children.length ? this.source.children[this.source.children.length - 1].view : this.source.view;\n          let r = {};\n          if (e.bcolor) {\n            r.backgroundColor = e.bcolor;\n          }\n          if (e.fcolor) {\n            r.color = e.fcolor;\n          }\n          return r;\n        }\n      },\n      methods: {\n        numProperties: bbn.fn.numProperties,\n        /**\r\n         * @method close\r\n         * @memberof listItem\r\n         */\n        close() {\n          let k = this.source.key;\n          if (this.source.closeAction()) {\n            let list = this.closest('bbn-list');\n            if (bbn.cp.isComponent(list) && list.source) {\n              let idx = bbn.fn.search(list.source, {\n                'data.key': k\n              });\n              if (idx > -1) {\n                list.source.splice(idx, 1);\n                if (list.source.length) {\n                  list.updateData();\n                  this.$nextTick(() => {\n                    list.closest('bbn-floater').onResize(true);\n                  });\n                } else {\n                  this.closest('bbn-floater').close();\n                }\n              }\n            }\n          }\n        },\n        shortTitle(src) {\n          return src.view.title.length > src.maxTitleLength ? bbn.fn.shorten(src.view.title, src.maxTitleLength) : src.view.title;\n        }\n      }\n    },\n    searchResult: {\n      template: `\n<div class=\"bbn-router-search-result bbn-w-100 bbn-spadded bbn-default-alt-background bbn-p bbn-hover-effect-element\"\n     :style=\"{backgroundColor: source.bcolor, color: source.fcolor}\">\n  <div class=\"bbn-flex-width\">\n    <div class=\"bbn-flex-fill bbn-nowrap bbn-ellipsis\">\n      <span class=\"bbn-s bbn-badge bbn-bg-blue\"\n            v-text=\"source.score\"/>\n      <span v-text=\"_('Opened container')\"/>\n      <em v-text=\"'URL: ' + source.url\"></em><br>\n      <span class=\"bbn-lg\" v-text=\"source.title\"></span>\n    </div>\n    <div class=\"bbn-hlpadded bbn-h-100 bbn-r\"\n          style=\"vertical-align: middle\"\n          v-html=\"source.match\">\n    </div>\n  </div>\n</div>\n`,\n      props: {\n        source: {\n          type: Object,\n          required: true\n        }\n      }\n    }\n  }\n};\n\n\nlet cpLang = {};\nif (bbn.env.lang) {\n  try {\n    cpLang = await __webpack_require__(\"./src/components/router lazy recursive ^\\\\.\\\\/router\\\\..*\\\\.lang$\")(`./router.${bbn.env.lang}.lang`);\n    if (cpLang.default) {\n      cpLang = cpLang.default;\n    }\n  } catch (err) {}\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  name: 'bbn-router',\n  definition: cpDef,\n  template: _router_html__WEBPACK_IMPORTED_MODULE_0__[\"default\"],\n  style: _router_less__WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n  lang: cpLang\n});\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://@bbn/bbn-cp/./src/components/router/router.js?");

/***/ })

}]);