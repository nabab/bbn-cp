"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_bbn_bbn_cp"] = self["webpackChunk_bbn_bbn_cp"] || []).push([["components/router-_mixins-visual-js"],{

/***/ "./src/components/router/_mixins/visual.js":
/*!*************************************************!*\
  !*** ./src/components/router/_mixins/visual.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  props: {\n    /**\n     * Set it to true if you want to see the visual navigation bar\n     * @prop {Boolean} [false] visual\n     */\n    visual: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * The size of every grid cell on which is based the visual view\n     * @prop {Number} [180] visualSize\n     */\n    visualSize: {\n      type: Number,\n      default() {\n        return Math.max(60, Math.min(120, Math.round(Math.min(bbn.env.width, bbn.env.height) / 7)));\n      }\n    },\n    /**\n     * The position of the visual mini containers\n     * @prop {Number} [180] visualSize\n     */\n    orientation: {\n      type: String,\n      default() {\n        return 'auto';\n      },\n      validator(v) {\n        return !!bbn.fn.getRow(bbnRouterCp.possibleOrientations, {\n          name: v\n        });\n      }\n    }\n  },\n  data() {\n    return {\n      /**\n       * If true and visual will show all the containers as icons.\n       * Starts at true for better updating when displays changes\n       * @data {Boolean} visualShowAll\n       */\n      visualShowAll: false,\n      /**\n       * In visual mode the side on which the thumbnails are shown.\n       * If auto (default) the bar will be top if H > W, left otherwise\n       * @data {String} ['auto'] visualOrientation\n       */\n      visualOrientation: this.orientation !== 'auto' ? this.orientation : null,\n      /**\n       * If true the auto orientation won't be taken into account.\n       * @data {Boolean} lockedOrientation\n       */\n      lockedOrientation: false,\n      /**\n       * If true visual mode is used for nav (instead of tabs or breadcrumbs)\n       * @data {Boolean} visual\n       */\n      isVisual: this.visual,\n      visualStyleContainer: bbn.fn.createObject()\n    };\n  },\n  computed: {\n    visualContainerStyle() {\n      if (!this.isVisual) {\n        return {};\n      }\n      let coord = [1, this.numVisualCols + 1, 1, this.numVisualRows + 1];\n      if (this.views.length > 1) {\n        switch (this.visualOrientation) {\n          case 'top':\n            coord[2] = 2;\n            break;\n          case 'bottom':\n            coord[3] = coord[3] - 1;\n            break;\n          case 'left':\n            coord[0] = 2;\n            break;\n          case 'right':\n            coord[1] = coord[1] - 1;\n            break;\n        }\n      }\n      return {\n        position: 'relative',\n        top: null,\n        left: null,\n        right: null,\n        bottom: null,\n        gridColumnStart: coord[0],\n        gridColumnEnd: coord[1],\n        gridRowStart: coord[2],\n        gridRowEnd: coord[3],\n        zoom: 1\n      };\n    },\n    /**\n     * The grid style for showing the router in visual mode\n     * @computed visualStyle\n     * @return {Object} \n     */\n    visualStyle() {\n      if (!this.isVisual) {\n        return {};\n      }\n      return {\n        minHeight: '100%',\n        display: 'grid',\n        gridColumnGap: '0.5rem',\n        gridRowGap: '0.5rem',\n        gridTemplateRows: 'repeat(' + this.numVisualRows + ', 1fr)',\n        gridTemplateColumns: 'repeat(' + this.numVisualCols + ', 1fr)'\n      };\n    },\n    /**\n     * Returns true if the visual blocks are on top or bottom of the selected container\n     * @computed visualIsOnHeight\n     * @return {Boolean} \n     */\n    visualIsOnHeight() {\n      if (this.isVisual) {\n        return ['top', 'bottom'].includes(this.visualOrientation);\n      }\n      return false;\n    },\n    /**\n     * The ratio between height and width for each block\n     * @computed visualRatio\n     * @return {Object} \n     */\n    visualRatio() {\n      if (!this.isVisual) {\n        return 1;\n      }\n      let diffW = this.visualIsOnHeight ? 0 : this.visualSize;\n      let diffH = this.visualIsOnHeight ? this.visualSize : 0;\n      let ratio = (this.lastKnownWidth - diffW) / (this.lastKnownHeight - diffH);\n      if (ratio > 2) {\n        return 2;\n      }\n      return Math.max(0.5, ratio);\n    },\n    /**\n     * The number of columns (width) for the visual mode\n     * @computed numVisualCols\n     * @return {Number} \n     */\n    numVisualCols() {\n      if (this.isVisual && this.ready) {\n        // Width greater or equal to height\n        let w = this.lastKnownWidth - (this.visualIsOnHeight ? 0 : this.visualSize);\n        if (this.splitterMounted) {\n          let splitter = this.getRef('splitter');\n          if (splitter.$el.clientWidth < w) {\n            w -= splitter.$el.clientWidth;\n          }\n        }\n        if (this.visualRatio >= 1) {\n          return Math.floor(w / this.visualSize);\n        } else {\n          return Math.floor(w / (this.visualSize * 1));\n        }\n      }\n      return 1;\n    },\n    /**\n     * The number of rows (height) for the visual mode\n     * @computed numVisualRows\n     * @return {Number} \n     */\n    numVisualRows() {\n      if (this.isVisual && this.ready) {\n        let h = this.lastKnownHeight - (this.visualIsOnHeight ? this.visualSize : 0);\n        if (this.splitterMounted) {\n          let splitter = this.getRef('splitter');\n          if (splitter.$el.clientHeight < h) {\n            h -= splitter.$el.clientHeight;\n          }\n        }\n        if (this.visualRatio > 1) {\n          return Math.floor(h / this.visualSize * 1);\n        } else {\n          return Math.floor(h / this.visualSize);\n        }\n      }\n      return 1;\n    },\n    /**\n     * The number of cells on the side where the thumbnails are shown in the visual mode\n     * @computed numVisuals\n     * @return {Number} \n     */\n    numVisuals() {\n      if (this.isVisual) {\n        if (['left', 'right'].includes(this.visualOrientation)) {\n          return this.numVisualRows;\n        } else {\n          return this.numVisualCols;\n        }\n      }\n      return 0;\n    },\n    /**\n     * The number of cells on the side where the thumbnails are shown in the visual mode\n     * @computed numVisualReals\n     * @return {Number} \n     */\n    numVisualReals() {\n      if (this.isVisual) {\n        return bbn.fn.filter(this.visualList, a => a.view.idx !== this.selected && !a.view.pane).length;\n      }\n      return 0;\n    },\n    /**\n     * The views to show, in a specific different order, for the visual mode\n     * @computed visualList\n     * @return {Array} \n     */\n    visualList() {\n      if (!this.isVisual) {\n        return [];\n      }\n      let moreViewsThanSlots = this.numVisuals < bbn.fn.filter(this.views, {\n        pane: false\n      }).length;\n      let numAvailableSlots = this.numVisuals - (moreViewsThanSlots ? 1 : 0);\n      let order = this.visualShowAll ? {\n        selected: 'asc',\n        fixed: 'desc',\n        pinned: 'desc',\n        last: 'desc',\n        idx: 'asc'\n      } : {\n        selected: 'desc',\n        last: 'desc',\n        fixed: 'desc',\n        pinned: 'desc',\n        idx: 'asc'\n      };\n      let idx = 0;\n      return bbn.fn.map(bbn.fn.multiorder(this.views, order), a => {\n        let visible = false;\n        if (this.visualShowAll || idx <= numAvailableSlots || this.selected === a.idx) {\n          visible = true;\n          if (!a.pane) {\n            idx++;\n          }\n        } else if (a.pane) {\n          visible = true;\n        }\n        return {\n          view: a,\n          visible: visible\n        };\n      });\n    }\n  },\n  watch: {\n    numVisuals() {\n      this.onResize();\n    },\n    visualShowAll(v) {\n      if (v && this.isVisual) {\n        this.getRef('visualRouter').focus();\n      }\n    },\n    /**\n     * @watch isVisual\n     * @fires setConfig\n     */\n    isVisual(v) {\n      this.$nextTick(() => {\n        if (this.ready) {\n          this.setConfig();\n          this.onResize();\n        }\n      });\n    }\n  },\n  beforeMount() {\n    if (!this.single) {\n      let storage = this.getStorage(this.parentContainer ? this.parentContainer.getFullURL() : this.storageName);\n      if (storage) {\n        if (storage.visual !== undefined) {\n          this.isVisual = storage.visual;\n        }\n        if (storage.orientation) {\n          this.visualOrientation = storage.orientation;\n          this.lockedOrientation = true;\n        }\n      }\n      this.updateVisualStyleContainer();\n    }\n  }\n});\n\n//# sourceURL=webpack://@bbn/bbn-cp/./src/components/router/_mixins/visual.js?");

/***/ })

}]);