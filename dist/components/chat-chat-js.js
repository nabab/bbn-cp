/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_bbn_bbn_cp"] = self["webpackChunk_bbn_bbn_cp"] || []).push([["components/chat-chat-js"],{

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/less-loader/dist/cjs.js!./src/components/chat/chat.less":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/less-loader/dist/cjs.js!./src/components/chat/chat.less ***!
  \********************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/noSourceMaps.js */ \"./node_modules/css-loader/dist/runtime/noSourceMaps.js\");\n/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/api.js */ \"./node_modules/css-loader/dist/runtime/api.js\");\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `bbn-chat .bbn-badge {\n  padding-left: 0.5rem;\n  padding-right: 0.5rem;\n}\nbbn-chat > .bbn-block > span.bbn-badge {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n}\nbbn-chat .bbn-chat-common {\n  position: absolute;\n  right: 0;\n  z-index: 10;\n  height: 350px;\n}\nbbn-chat .bbn-chat-users {\n  position: absolute;\n  right: 0;\n  z-index: 10;\n  height: 350px;\n  width: 300px;\n}\nbbn-chat .bbn-chat-conversation {\n  position: absolute;\n  right: 0;\n  z-index: 10;\n  height: 350px;\n  width: 250px;\n}\nbbn-chat .bbn-chat-conversation .bbn-chat-conversation-message {\n  word-break: break-word;\n}\nbbn-chat .bbn-chat-conversation .bbn-chat-conversation-message .bbn-chat-conversation-message-time {\n  align-self: flex-end;\n  flex-shrink: 0;\n}\nbbn-chat .bbn-chat-conversation .bbn-chat-conversation-message:after {\n  content: '';\n  position: absolute;\n  width: 0;\n  height: 0;\n  border: 0.5rem solid transparent;\n}\nbbn-chat .bbn-chat-conversation .bbn-chat-conversation-message.bbn-chat-conversation-message-received {\n  border-top-left-radius: 0;\n}\nbbn-chat .bbn-chat-conversation .bbn-chat-conversation-message.bbn-chat-conversation-message-received:after {\n  left: 0;\n  top: 0.5rem;\n  border-right-color: inherit;\n  border-left: 0;\n  border-top: 0;\n  margin-top: -0.5rem;\n  margin-left: -0.5rem;\n}\nbbn-chat .bbn-chat-conversation .bbn-chat-conversation-message.bbn-chat-conversation-message-sent {\n  border-bottom-right-radius: 0;\n}\nbbn-chat .bbn-chat-conversation .bbn-chat-conversation-message.bbn-chat-conversation-message-sent:after {\n  right: 0;\n  bottom: 0.5rem;\n  border-left-color: inherit;\n  border-right: 0;\n  border-bottom: 0;\n  margin-bottom: -0.5rem;\n  margin-right: -0.5rem;\n}\nbbn-chat .bbn-chat-conversation .bbn-chat-conversation-input button {\n  border-radius: 0 !important;\n}\nbbn-chat .bbn-chat-conversation .bbn-user-title {\n  margin-right: 5px;\n}\n`, \"\"]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n\n\n//# sourceURL=webpack://@bbn/bbn-cp/./src/components/chat/chat.less?./node_modules/css-loader/dist/cjs.js!./node_modules/less-loader/dist/cjs.js");

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\nmodule.exports = function (cssWithMappingToString) {\n  var list = [];\n\n  // return the list of modules as css string\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = \"\";\n      var needLayer = typeof item[5] !== \"undefined\";\n      if (item[4]) {\n        content += \"@supports (\".concat(item[4], \") {\");\n      }\n      if (item[2]) {\n        content += \"@media \".concat(item[2], \" {\");\n      }\n      if (needLayer) {\n        content += \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\");\n      }\n      content += cssWithMappingToString(item);\n      if (needLayer) {\n        content += \"}\";\n      }\n      if (item[2]) {\n        content += \"}\";\n      }\n      if (item[4]) {\n        content += \"}\";\n      }\n      return content;\n    }).join(\"\");\n  };\n\n  // import a list of modules into the list\n  list.i = function i(modules, media, dedupe, supports, layer) {\n    if (typeof modules === \"string\") {\n      modules = [[null, modules, undefined]];\n    }\n    var alreadyImportedModules = {};\n    if (dedupe) {\n      for (var k = 0; k < this.length; k++) {\n        var id = this[k][0];\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n    for (var _k = 0; _k < modules.length; _k++) {\n      var item = [].concat(modules[_k]);\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        continue;\n      }\n      if (typeof layer !== \"undefined\") {\n        if (typeof item[5] === \"undefined\") {\n          item[5] = layer;\n        } else {\n          item[1] = \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\").concat(item[1], \"}\");\n          item[5] = layer;\n        }\n      }\n      if (media) {\n        if (!item[2]) {\n          item[2] = media;\n        } else {\n          item[1] = \"@media \".concat(item[2], \" {\").concat(item[1], \"}\");\n          item[2] = media;\n        }\n      }\n      if (supports) {\n        if (!item[4]) {\n          item[4] = \"\".concat(supports);\n        } else {\n          item[1] = \"@supports (\".concat(item[4], \") {\").concat(item[1], \"}\");\n          item[4] = supports;\n        }\n      }\n      list.push(item);\n    }\n  };\n  return list;\n};\n\n//# sourceURL=webpack://@bbn/bbn-cp/./node_modules/css-loader/dist/runtime/api.js?");

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/noSourceMaps.js":
/*!**************************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/noSourceMaps.js ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = function (i) {\n  return i[1];\n};\n\n//# sourceURL=webpack://@bbn/bbn-cp/./node_modules/css-loader/dist/runtime/noSourceMaps.js?");

/***/ }),

/***/ "./src/components/chat/chat.html":
/*!***************************************!*\
  !*** ./src/components/chat/chat.html ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n// Module\nvar code = `<div :class=\"[componentClass, 'bbn-vmiddle']\">\r\n  <div bbn-if=\"currentChats.length\"\r\n       class=\"bbn-block bbn-vmiddle\"\r\n  >\r\n    <div bbn-for=\"(chat, i) in currentChats\"\r\n         bbn-if=\"isReady && (chat.visible || chat.minimized)\"\r\n         :class=\"['bbn-right-sspace', 'bbn-vmiddle', 'bbn-p', 'bbn-reactive', 'bbn-hxspadding', {\r\n           'bbn-state-active': chat.active,\r\n           'bbn-state-selected': !chat.active && !!chat.unread\r\n         }]\"\r\n         @click=\"toggleMinimized(chat.idx)\"\r\n         :title=\"getParticipantsFormatted(chat.participants)\"\r\n         :key=\"i\"\r\n    >\r\n      <bbn-initial bbn-if=\"!chat.info.title && (chat.participants.length === 1)\"\r\n                   :user-name=\"getParticipantsFormatted(chat.participants)\"\r\n                   :width=\"16\"\r\n                   :height=\"16\"\r\n      ></bbn-initial>\r\n      <i bbn-else\r\n         class=\"nf nf-oct-organization bbn-lg\"\r\n      ></i>\r\n      <span bbn-text=\"chat.info.title || shorten(getParticipantsFormatted(chat.participants), 10)\"\r\n            class=\"bbn-left-sspace\"\r\n      ></span>\r\n      <span bbn-if=\"chat.unread\"\r\n            class=\"bbn-xs bbn-badge bbn-left-sspace bbn-primary-text-alt bbn-background\"\r\n            bbn-text=\"chat.unread\"\r\n      ></span>\r\n    </div>\r\n  </div>\r\n  <div class=\"bbn-block bbn-p\"\r\n       @click=\"mainWindowVisible = !mainWindowVisible\"\r\n  >\r\n    <i :class=\"['nf nf-fa-comments', {\r\n          'bbn-right-sspace': currentOnline && usersOnlineWithoutMe.length,\r\n          'bbn-red': !currentOnline\r\n        }]\"\r\n    ></i>\r\n    <span bbn-if=\"currentOnline && usersOnlineWithoutMe.length\"\r\n          class=\"bbn-xs bbn-badge bbn-bg-green bbn-white\"\r\n          bbn-text=\"usersOnlineWithoutMe.length\"\r\n    ></span>\r\n  </div>\r\n  <div bbn-if=\"mainWindowVisible\"\r\n       class=\"bbn-chat-users bbn-widget bbn-flex-height\"\r\n       :style=\"{bottom: bottomCoord}\"\r\n  >\r\n    <div class=\"bbn-header bbn-spadding bbn-no-border-top bbn-no-hborder bbn-flex-width\">\r\n      <div class=\"bbn-flex-fill bbn-l bbn-unselectable\">\r\n        <span class=\"bbn-b\" bbn-text=\"_('CHAT')\"></span>\r\n        <span>(</span>\r\n        <span bbn-text=\"currentOnline ? _('Online') : _('Offline')\"\r\n              :class=\"{\r\n                'bbn-green': currentOnline,\r\n                'bbn-red': !currentOnline\r\n              }\"\r\n        ></span>\r\n        <span>)</span>\r\n      </div>\r\n      <div>\r\n        <bbn-context class=\"nf nf-mdi-menu bbn-p\"\r\n                     tabindex=\"-1\"\r\n                     tag=\"i\"\r\n                     :source=\"mainMenu\"\r\n        ></bbn-context>\r\n        &nbsp;\r\n        <i class=\"bbn-p nf nf-mdi-window_close\"\r\n           @click=\"mainWindowVisible = false\"\r\n        ></i>\r\n      </div>\r\n    </div>\r\n    <div class=\"bbn-flex-fill\">\r\n      <bbn-scroll bbn-if=\"isReady\">\r\n        <diV class=\"bbn-spadding\">\r\n          <div class=\"bbn-box bbn-c bbn-unselectable\"\r\n               bbn-text=\"_('CURRENT CHATS')\"\r\n          ></div>\r\n          <bbn-list :source=\"Object.values(currentChats)\"\r\n                    class=\"bbn-vsmargin\"\r\n                    :component=\"\\$options.components.active\"\r\n                    bbn-if=\"Object.values(currentChats).length\"\r\n                    @select=\"onSelectChat\"\r\n          ></bbn-list>\r\n          <div bbn-else\r\n               class=\"bbn-spadding bbn-c bbn-unselectable\"\r\n               bbn-text=\"_('None')\"\r\n          ></div>\r\n          <div class=\"bbn-box bbn-c bbn-unselectable\"\r\n               bbn-text=\"_('USERS')\"\r\n          ></div>\r\n          <bbn-list bbn-if=\"currentOnline\"\r\n                    :source=\"allUsersWithoutChats\"\r\n                    class=\"bbn-vsmargin\"\r\n                    :component=\"\\$options.components.user\"\r\n                    @select=\"onSelectUser\"\r\n          ></bbn-list>\r\n          <div bbn-else\r\n               class=\"bbn-spadding bbn-c bbn-unselectable\"\r\n               bbn-text=\"_('You are offline')\"\r\n          ></div>\r\n        </diV>\r\n      </bbn-scroll>\r\n      <div bbn-else\r\n           class=\"bbn-overlay bbn-middle\"\r\n      >\r\n        <bbn-loadicon size=\"1.5rem\"></bbn-loadicon>\r\n        <span class=\"bbn-left-sspace\" bbn-text=\"_('Loading...')\"></span>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <chat bbn-for=\"(chat, i) in visibleWindows\"\r\n        bbn-if=\"chat.visible\"\r\n        inline-template\r\n        :key=\"chat.idx\"\r\n        :idx=\"chat.idx\"\r\n        :style=\"{\r\n          right: (250 * i) + (mainWindowVisible ? 300 : 0) + 'px'\r\n        }\"\r\n        :participants=\"chat.participants\"\r\n        :participantsActivity=\"chat.participantsActivity\"\r\n        :admins=\"chat.admins\"\r\n        :messages=\"chat.messages\"\r\n        :info=\"chat.info\"\r\n        :chat-id=\"chat.id\"\r\n        :user-id=\"userId\"\r\n        :users=\"users\"\r\n        :id-temp=\"chat.idTemp\"\r\n        :active=\"chat.active\"\r\n        :unread=\"chat.unread\"\r\n  >\r\n    <div class=\"bbn-chat-conversation bbn-background bbn-flex-height\"\r\n         :style=\"{bottom: \\$parent.bottomCoord}\"\r\n         @focusin=\"cp.activate(idx)\"\r\n         @focusout=\"cp.deactivate(idx)\"\r\n         tabindex=\"0\"\r\n    >\r\n      <div :class=\"['bbn-header', 'bbn-spadding', 'bbn-grid', {\r\n             'bbn-state-active': active,\r\n             'bbn-state-selected': !active && !!unread\r\n           }]\"\r\n            style=\"grid-template-columns: max-content auto max-content\"\r\n      >\r\n        <div>\r\n          <i bbn-if=\"!isGroup\"\r\n             :class=\"['nf nf-fa-circle', {\r\n               'bbn-green': cp.isOnline(participants[0]),\r\n               'bbn-red': !cp.isOnline(participants[0])\r\n              }]\"\r\n          ></i>\r\n          <i bbn-elseif=\"!online.length\"\r\n             class=\"nf nf-fa-circle bbn-red\"\r\n          ></i>\r\n          <i bbn-elseif=\"cp.currentOnline && (online.length === participants.length)\"\r\n             class=\"nf nf-fa-circle bbn-green\"\r\n             :title=\"onlineFormatted\"\r\n          ></i>\r\n          <i bbn-elseif=\"cp.currentOnline && online.length\"\r\n             class=\"nf nf-fa-circle bbn-orange\"\r\n             :title=\"onlineFormatted\"\r\n          ></i>\r\n        </div>\r\n        <div class=\"bbn-w-100 bbn-ellipsis bbn-unselectable\"\r\n              bbn-text=\"currentTitle\"\r\n              :title=\"currentTitle\"\r\n        ></div>\r\n        <div>\r\n          <bbn-context class=\"nf nf-mdi-menu bbn-p\"\r\n                       tabindex=\"-1\"\r\n                       tag=\"i\"\r\n                       :source=\"getMenu\"\r\n                       bbn-if=\"cp.currentOnline\"\r\n          ></bbn-context>\r\n          <i class=\"bbn-p nf nf-mdi-window_minimize bbn-left-sspace\"\r\n             @click=\"minimize\"\r\n          ></i>\r\n          <i class=\"bbn-p nf nf-mdi-window_close bbn-left-sspace\"\r\n             @click=\"close\"\r\n          ></i>\r\n        </div>\r\n      </div>\r\n      <div bbn-if=\"isLoading\" class=\"bbn-middle bbn-top-xsspace bbn-s\">\r\n        <bbn-loadicon size=\"1.5rem\"></bbn-loadicon>\r\n        <span class=\"bbn-left-sspace\" bbn-text=\"_('Loading...')\"></span>\r\n      </div>\r\n      <div bbn-if=\"showInfo\"\r\n           class=\"bbn-flex-fill bbn-border bbn-no-top-border bbn-alt-background\"\r\n      >\r\n        <div class=\"bbn-flex-height\">\r\n          <div class=\"bbn-flex-fill\">\r\n            <bbn-scroll>\r\n              <component :is=\"cp.\\$options.components.info\"\r\n                    :info=\"info\"\r\n                    :participants=\"participants\"\r\n                    :admins=\"admins\"\r\n                    :user-id=\"userId\"\r\n                    :chat-id=\"chatId\"\r\n                    :users=\"users\"\r\n              ></component>\r\n            </bbn-scroll>\r\n          </div>\r\n          <bbn-button class=\"bbn-no-hborder bbn-no-radius bbn-no-border-bottom\"\r\n                      @click=\"showInfo = false\"\r\n                      :text=\"_('CLOSE')\"\r\n          ></bbn-button>\r\n        </div>\r\n      </div>\r\n      <template bbn-else>\r\n        <div class=\"bbn-flex-fill bbn-border bbn-no-vborder\">\r\n          <bbn-scroll ref=\"scroll\"\r\n                      @reachtop=\"loadMoreMessages\"\r\n                      @hook:mounted=\"scrollEnd\"\r\n          >\r\n            <div class=\"bbn-padding\">\r\n              <div bbn-for=\"(msg, midx) in messages\"\r\n                   :key=\"midx\"\r\n              >\r\n                <div bbn-if=\"!midx || (messages[midx-1] && (getDate(messages[midx-1].time) !== getDate(msg.time)))\"\r\n                     class=\"bbn-middle bbn-s\"\r\n                >\r\n                  <span bbn-text=\"isToday(msg.time) ? _('Today') : getDate(msg.time)\"\r\n                        class=\"bbn-primary-text-alt\"\r\n                  ></span>\r\n                </div>\r\n                <div bbn-if=\"msg.user\"\r\n                     :class=\"['bbn-flex', 'bbn-vsmargin', 'bbn-vmiddle', {\r\n                       'bbn-left-lspace': msg.user === userId,\r\n                       'bbn-right-lspace': msg.user !== userId\r\n                     }]\"\r\n                     :style=\"{justifyContent: msg.user === userId ? 'flex-end' : 'flex-start'}\"\r\n                >\r\n                  <span :class=\"['bbn-chat-conversation-message', 'bbn-box', 'bbn-vxspadding', 'bbn-hspadding', 'bbn-no-border', 'bbn-flex', {\r\n                          'bbn-alt-background': !msg.unread,\r\n                          'bbn-border-background-alt': !msg.unread && msg.user === userId,\r\n                          'bbn-primary': msg.unread,\r\n                          'bbn-border-background-primary': msg.unread,\r\n                          'bbn-chat-conversation-message-received': msg.user !== userId,\r\n                          'bbn-chat-conversation-message-sent': msg.user === userId\r\n                        }]\"\r\n                        :style=\"getStyle(msg, midx)\"\r\n                        ref=\"message\"\r\n                  >\r\n                    <span>\r\n                      <i bbn-if=\"isGroup && (msg.user !== userId)\"\r\n                         :class=\"['nf nf-fa-circle', 'bbn-xs', {\r\n                           'bbn-green': cp.isOnline(msg.user),\r\n                           'bbn-red': !cp.isOnline(msg.user)\r\n                         }]\"\r\n                      ></i>\r\n                      <span bbn-if=\"isGroup\"\r\n                            bbn-text=\"getField(cp.users, 'text', 'value', msg.user)\"\r\n                            :title=\"getField(cp.users, 'text', 'value', msg.user)\"\r\n                            class=\"bbn-xs\"\r\n                      ></span>\r\n                      <br bbn-if=\"isGroup\">\r\n                      <span bbn-html=\"renderMsg(msg.message)\"></span>\r\n                    </span>\r\n                    <span class=\"bbn-chat-conversation-message-time bbn-left-sspace bbn-xxs\">\r\n                      <span bbn-text=\"getTime(msg.time)\"></span>\r\n                      <i bbn-if=\"msg.user === userId\"\r\n                         :class=\"['nf nf-fa-check', 'bbn-left-xsspace', {\r\n                           'bbn-primary-text-alt': isMsgRead(msg)\r\n                         }]\"\r\n                      ></i>\r\n                    </span>\r\n                  </span>\r\n                </div>\r\n                <div bbn-else\r\n                     class=\"bbn-middle bbn-xs\"\r\n                >\r\n                  <span bbn-text=\"msg.message\"\r\n                        class=\"bbn-tertiary-text-alt\"\r\n                  ></span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </bbn-scroll>\r\n        </div>\r\n        <div bbn-if=\"cp.currentOnline\"\r\n             style=\"min-height: 2rem\"\r\n             class=\"bbn-flex-width\"\r\n        >\r\n          <div class=\"bbn-middle bbn-border-left bbn-border-top bbn-border-bottom bbn-alt-background bbn-hxspadding\">\r\n            <bbn-emoji @select=\"addEmoji\"></bbn-emoji>\r\n          </div>\r\n          <bbn-input class=\"bbn-chat-conversation-input bbn-flex-fill bbn-no-radius\"\r\n                     ref=\"input\"\r\n                     @keydown.enter.prevent=\"sendMessage\"\r\n                     bbn-model=\"currentMessage\"\r\n                     button-right=\"nf nf-fa-paper_plane\"\r\n                     @clickrightbutton=\"sendMessage\"\r\n          ></bbn-input>\r\n        </div>\r\n      </template>\r\n    </div>\r\n  </chat>\r\n</div>\r\n`;\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (code);\n\n//# sourceURL=webpack://@bbn/bbn-cp/./src/components/chat/chat.html?");

/***/ }),

/***/ "./src/components/chat/chat.less":
/*!***************************************!*\
  !*** ./src/components/chat/chat.less ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ \"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ \"./node_modules/style-loader/dist/runtime/styleDomAPI.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertBySelector.js */ \"./node_modules/style-loader/dist/runtime/insertBySelector.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ \"./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ \"./node_modules/style-loader/dist/runtime/insertStyleElement.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ \"./node_modules/style-loader/dist/runtime/styleTagTransform.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _node_modules_css_loader_dist_cjs_js_node_modules_less_loader_dist_cjs_js_chat_less__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/less-loader/dist/cjs.js!./chat.less */ \"./node_modules/css-loader/dist/cjs.js!./node_modules/less-loader/dist/cjs.js!./src/components/chat/chat.less\");\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());\noptions.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());\noptions.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, \"head\");\noptions.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());\noptions.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());\n\nvar update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_node_modules_less_loader_dist_cjs_js_chat_less__WEBPACK_IMPORTED_MODULE_6__[\"default\"], options);\n\n\n\n\n       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_node_modules_less_loader_dist_cjs_js_chat_less__WEBPACK_IMPORTED_MODULE_6__[\"default\"] && _node_modules_css_loader_dist_cjs_js_node_modules_less_loader_dist_cjs_js_chat_less__WEBPACK_IMPORTED_MODULE_6__[\"default\"].locals ? _node_modules_css_loader_dist_cjs_js_node_modules_less_loader_dist_cjs_js_chat_less__WEBPACK_IMPORTED_MODULE_6__[\"default\"].locals : undefined);\n\n\n//# sourceURL=webpack://@bbn/bbn-cp/./src/components/chat/chat.less?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nvar stylesInDOM = [];\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n  for (var i = 0; i < stylesInDOM.length; i++) {\n    if (stylesInDOM[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n}\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var indexByIdentifier = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3],\n      supports: item[4],\n      layer: item[5]\n    };\n    if (indexByIdentifier !== -1) {\n      stylesInDOM[indexByIdentifier].references++;\n      stylesInDOM[indexByIdentifier].updater(obj);\n    } else {\n      var updater = addElementStyle(obj, options);\n      options.byIndex = i;\n      stylesInDOM.splice(i, 0, {\n        identifier: identifier,\n        updater: updater,\n        references: 1\n      });\n    }\n    identifiers.push(identifier);\n  }\n  return identifiers;\n}\nfunction addElementStyle(obj, options) {\n  var api = options.domAPI(options);\n  api.update(obj);\n  var updater = function updater(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {\n        return;\n      }\n      api.update(obj = newObj);\n    } else {\n      api.remove();\n    }\n  };\n  return updater;\n}\nmodule.exports = function (list, options) {\n  options = options || {};\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDOM[index].references--;\n    }\n    var newLastIdentifiers = modulesToDom(newList, options);\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n      var _index = getIndexByIdentifier(_identifier);\n      if (stylesInDOM[_index].references === 0) {\n        stylesInDOM[_index].updater();\n        stylesInDOM.splice(_index, 1);\n      }\n    }\n    lastIdentifiers = newLastIdentifiers;\n  };\n};\n\n//# sourceURL=webpack://@bbn/bbn-cp/./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertBySelector.js":
/*!********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertBySelector.js ***!
  \********************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nvar memo = {};\n\n/* istanbul ignore next  */\nfunction getTarget(target) {\n  if (typeof memo[target] === \"undefined\") {\n    var styleTarget = document.querySelector(target);\n\n    // Special case to return head of iframe instead of iframe itself\n    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n      try {\n        // This will throw an exception if access to iframe is blocked\n        // due to cross-origin restrictions\n        styleTarget = styleTarget.contentDocument.head;\n      } catch (e) {\n        // istanbul ignore next\n        styleTarget = null;\n      }\n    }\n    memo[target] = styleTarget;\n  }\n  return memo[target];\n}\n\n/* istanbul ignore next  */\nfunction insertBySelector(insert, style) {\n  var target = getTarget(insert);\n  if (!target) {\n    throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n  }\n  target.appendChild(style);\n}\nmodule.exports = insertBySelector;\n\n//# sourceURL=webpack://@bbn/bbn-cp/./node_modules/style-loader/dist/runtime/insertBySelector.js?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertStyleElement.js":
/*!**********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertStyleElement.js ***!
  \**********************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/* istanbul ignore next  */\nfunction insertStyleElement(options) {\n  var element = document.createElement(\"style\");\n  options.setAttributes(element, options.attributes);\n  options.insert(element, options.options);\n  return element;\n}\nmodule.exports = insertStyleElement;\n\n//# sourceURL=webpack://@bbn/bbn-cp/./node_modules/style-loader/dist/runtime/insertStyleElement.js?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\n/* istanbul ignore next  */\nfunction setAttributesWithoutAttributes(styleElement) {\n  var nonce =  true ? __webpack_require__.nc : 0;\n  if (nonce) {\n    styleElement.setAttribute(\"nonce\", nonce);\n  }\n}\nmodule.exports = setAttributesWithoutAttributes;\n\n//# sourceURL=webpack://@bbn/bbn-cp/./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleDomAPI.js":
/*!***************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleDomAPI.js ***!
  \***************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/* istanbul ignore next  */\nfunction apply(styleElement, options, obj) {\n  var css = \"\";\n  if (obj.supports) {\n    css += \"@supports (\".concat(obj.supports, \") {\");\n  }\n  if (obj.media) {\n    css += \"@media \".concat(obj.media, \" {\");\n  }\n  var needLayer = typeof obj.layer !== \"undefined\";\n  if (needLayer) {\n    css += \"@layer\".concat(obj.layer.length > 0 ? \" \".concat(obj.layer) : \"\", \" {\");\n  }\n  css += obj.css;\n  if (needLayer) {\n    css += \"}\";\n  }\n  if (obj.media) {\n    css += \"}\";\n  }\n  if (obj.supports) {\n    css += \"}\";\n  }\n  var sourceMap = obj.sourceMap;\n  if (sourceMap && typeof btoa !== \"undefined\") {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  }\n\n  // For old IE\n  /* istanbul ignore if  */\n  options.styleTagTransform(css, styleElement, options.options);\n}\nfunction removeStyleElement(styleElement) {\n  // istanbul ignore if\n  if (styleElement.parentNode === null) {\n    return false;\n  }\n  styleElement.parentNode.removeChild(styleElement);\n}\n\n/* istanbul ignore next  */\nfunction domAPI(options) {\n  if (typeof document === \"undefined\") {\n    return {\n      update: function update() {},\n      remove: function remove() {}\n    };\n  }\n  var styleElement = options.insertStyleElement(options);\n  return {\n    update: function update(obj) {\n      apply(styleElement, options, obj);\n    },\n    remove: function remove() {\n      removeStyleElement(styleElement);\n    }\n  };\n}\nmodule.exports = domAPI;\n\n//# sourceURL=webpack://@bbn/bbn-cp/./node_modules/style-loader/dist/runtime/styleDomAPI.js?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleTagTransform.js":
/*!*********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleTagTransform.js ***!
  \*********************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/* istanbul ignore next  */\nfunction styleTagTransform(css, styleElement) {\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css;\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild);\n    }\n    styleElement.appendChild(document.createTextNode(css));\n  }\n}\nmodule.exports = styleTagTransform;\n\n//# sourceURL=webpack://@bbn/bbn-cp/./node_modules/style-loader/dist/runtime/styleTagTransform.js?");

/***/ }),

/***/ "./src/components/chat/_i18n lazy recursive ^\\.\\/chat\\..*\\.lang$":
/*!**************************************************************************************!*\
  !*** ./src/components/chat/_i18n/ lazy ^\.\/chat\..*\.lang$ strict namespace object ***!
  \**************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var map = {\n\t\"./chat.fr.lang\": [\n\t\t\"./src/components/chat/_i18n/chat.fr.lang\",\n\t\t\"src_components_chat__i18n_chat_fr_lang\"\n\t],\n\t\"./chat.it.lang\": [\n\t\t\"./src/components/chat/_i18n/chat.it.lang\",\n\t\t\"src_components_chat__i18n_chat_it_lang\"\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(() => {\n\t\treturn __webpack_require__.t(id, 1 | 16);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = \"./src/components/chat/_i18n lazy recursive ^\\\\.\\\\/chat\\\\..*\\\\.lang$\";\nmodule.exports = webpackAsyncContext;\n\n//# sourceURL=webpack://@bbn/bbn-cp/./src/components/chat/_i18n/_lazy_^\\.\\/chat\\..*\\.lang$_strict_namespace_object?");

/***/ }),

/***/ "./src/components/chat/chat.js":
/*!*************************************!*\
  !*** ./src/components/chat/chat.js ***!
  \*************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _chat_html__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chat.html */ \"./src/components/chat/chat.html\");\n/* harmony import */ var _chat_less__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chat.less */ \"./src/components/chat/chat.less\");\n/**\r\n * @file bbn-chat component\r\n * @description bbn-chat component allows the user to communicate in chat sessions with other users online.\r\n * @author Thomas Nabet, Mirko Argentino\r\n * @copyright BBN Solutions\r\n * @created 10/02/2017.\r\n */\nconst cpDef = {\n  /**\r\n   * @mixin bbn.cp.mixins.basic\r\n   * @mixin bbn.cp.mixins.localStorage\r\n   * @mixin bbn.cp.mixins.resizer\r\n   * @mixin bbn.cp.mixins.serviceWorker\r\n   */\n  mixins: [bbn.cp.mixins.basic, bbn.cp.mixins.localStorage, bbn.cp.mixins.resizer, bbn.cp.mixins.serviceWorker],\n  props: {\n    /**\r\n     * The id of the current user\r\n     * @prop {String} userId\r\n     */\n    userId: {\n      type: String\n    },\n    /**\r\n     * The array of all users.\r\n     * @prop {Array} [[]] users\r\n     */\n    users: {\n      type: Array,\n      default() {\n        return [];\n      }\n    },\n    /**\r\n     * The array of groups.\r\n     * @prop {Array} [[]] groups\r\n     * @todo not used yet\r\n     */\n    groups: {\n      type: Array,\n      default() {\n        return [];\n      }\n    },\n    /**\r\n     * The array of users currently online.\r\n     * @prop {Array} [[]] onlineUsers\r\n     */\n    onlineUsers: {\n      type: Array,\n      default() {\n        return [];\n      }\n    },\n    /**\r\n     * True if the current user is online.\r\n     * @prop {Boolean} [true] online\r\n     */\n    online: {\n      type: Boolean,\n      default: true\n    },\n    /**\r\n     * The url used for the actions of the chat.\r\n     * @prop {String} url\r\n     */\n    url: {\n      type: String\n    }\n  },\n  data() {\n    let isDark = false;\n    if (appui && appui.theme && appui.themes) {\n      isDark = bbn.fn.getField(appui.themes, 'isDark', {\n        value: appui.theme\n      });\n    }\n    return {\n      /**\r\n       * True if the current user is online.\r\n       * @data {Boolean} currentOnline\r\n       */\n      currentOnline: this.online,\n      /**\r\n       * True if the main window is visibile.\r\n       * @data {Boolean} [false] mainWindowVisible\r\n       */\n      mainWindowVisible: false,\n      /**\r\n       * The last chat time.\r\n       * @data {Number} [null] lastChat\r\n       */\n      lastChat: null,\n      /**\r\n       * The current chats.\r\n       * @data {Array} [[]] currentChats\r\n       */\n      currentChats: [],\n      /**\r\n       * The current chats hash.\r\n       * @data {String} [null] chatHash\r\n       */\n      chatsHash: null,\n      /**\r\n       * The current users hash.\r\n       * @data {String} [null] onlineUsersHash\r\n       */\n      onlineUsersHash: null,\n      /**\r\n       * Indicates if we have received the first response with the users hash\r\n       * @data {Boolean} [false] usersReceived\r\n       */\n      usersReceived: false,\n      /**\r\n       * Indicates if we have received the first response with the chats hash\r\n       * @data {Boolean} [false] chatsReceived\r\n       */\n      chatsReceived: false,\n      /**\r\n       * The chat coordinates.\r\n       * @data {String} [''] bottomCoord\r\n       */\n      bottomCoord: '',\n      /**\r\n       * Indicates if a dark theme is used\r\n       * @data {Boolean} isDarkTheme\r\n       */\n      isDarkTheme: isDark\n    };\n  },\n  computed: {\n    /**\r\n     * The array of online users excluding the current user.\r\n     * @computed usersOnlineWithoutMe\r\n     * @return {Array}\r\n     */\n    usersOnlineWithoutMe() {\n      return this.onlineUsers.filter(a => {\n        return a !== this.userId;\n      }).map(a => {\n        return bbn.fn.isObject(a) ? a : {\n          value: a\n        };\n      });\n    },\n    /**\r\n     * The array of visible windows\r\n     * @computed visibleWindows\r\n     * @return {Array}\r\n     */\n    visibleWindows() {\n      return this.currentChats.filter(c => c.visible);\n    },\n    /**\r\n     * The main menu\r\n     * @computed mainMenu\r\n     * @returns {Array}\r\n     */\n    mainMenu() {\n      let res = [];\n      if (this.currentOnline) {\n        res.push({\n          icon: 'nf nf-oct-organization',\n          text: bbn._('New group chat'),\n          action: () => {\n            this.getPopup({\n              title: bbn._('New group chat'),\n              component: this.$options.components.newGroup,\n              width: 300,\n              height: 400\n            });\n          }\n        });\n      }\n      res.push({\n        icon: this.currentOnline ? 'nf nf-mdi-message_bulleted_off bbn-red' : 'nf nf-mdi-message bbn-green',\n        text: this.currentOnline ? bbn._('Switch offline') : bbn._('Switch online'),\n        action: this.currentOnline ? this.switchOffline : this.switchOnline\n      });\n      return res;\n    },\n    /**\r\n     * The users list ordered by name\r\n     * @computed allUSers\r\n     * @returns {Array}\r\n     */\n    allUsers() {\n      if (this.users && this.users.length) {\n        return bbn.fn.order(this.users.filter(u => u.value !== this.userId), 'text', 'ASC');\n      }\n      return [];\n    },\n    /**\r\n     * The list of the users without chats\r\n     * @computed allUsersWithoutChats\r\n     * @returns {Array}\r\n     */\n    allUsersWithoutChats() {\n      let res = [];\n      res = res.concat(this.allUsers.filter(u => this.onlineUsers.includes(u.value) && !Object.values(this.currentChats).filter(c => c.participants.length === 1 && c.participants.includes(u.value)).length));\n      res = res.concat(this.allUsers.filter(u => !this.onlineUsers.includes(u.value) && !Object.values(this.currentChats).filter(c => c.participants.length === 1 && c.participants.includes(u.value)).length));\n      return res;\n    },\n    /**\r\n     * Indicates if the first response with the chats hash and the users hash\r\n     * @computed isReady\r\n     * @return {Boolean}\r\n     */\n    isReady() {\n      return this.chatsReceived && this.usersReceived;\n    }\n  },\n  methods: {\n    /**\r\n     * Alias of bbn.fn.getField\r\n     * @method getField\r\n     */\n    getField: bbn.fn.getField,\n    /**\r\n     * Alias of bbn.fn.shorten\r\n     * @method shorten\r\n     */\n    shorten: bbn.fn.shorten,\n    /**\r\n     * Returns the chat object basing on the given id property.\r\n     * @method chatById\r\n     * @param {String} idChat\r\n     * @return {Boolean|Object}\r\n     */\n    chatById(idChat) {\n      return bbn.fn.getRow(this.currentChats, {\n        id: idChat\n      });\n    },\n    /**\r\n     * Returns the chat object basing on the given idx property.\r\n     * @method chatByIdx\r\n     * @param {Number} idx\r\n     * @return {Boolean|Object}\r\n     */\n    chatByIdx(idx) {\n      return bbn.fn.getRow(this.currentChats, {\n        idx: idx\n      });\n    },\n    /**\r\n     * Returns the chat object basing on the given idTemp property.\r\n     * @method chatByIdTemp\r\n     * @param {String} idTemp\r\n     * @return {Boolean|Object}\r\n     */\n    chatByIdTemp(idTemp) {\n      return bbn.fn.getRow(this.currentChats, {\n        idTemp: idTemp\n      });\n    },\n    /**\r\n     * Returns the chat window component basing on the given idx property\r\n     * @method chatWindowByIdx\r\n     * @param {Number} idx\r\n     * @fires findByKey\r\n     * @return {bbnCp|Boolean}\r\n     */\n    chatWindowByIdx(idx) {\n      return this.findByKey(idx, 'chat');\n    },\n    /**\r\n     * Opens the chat window by the given user id\r\n     * @method chatTo\r\n     * @param {String} idUser\r\n     * @fires maximaze\r\n     * @fires addChat\r\n     * @fires messageToChannel\r\n     * @fires activate\r\n     */\n    chatTo(idUser) {\n      let chat = this.currentChats.filter(c => c.participants.length === 1 && c.participants.includes(idUser));\n      if (chat.length) {\n        this.maximaze(chat[0].idx);\n        return;\n      }\n      if (this.currentOnline) {\n        let chatObj = {\n          id: '',\n          idTemp: bbn.fn.randomString(24, 24),\n          info: {\n            title: '',\n            creator: this.userId\n          },\n          participants: [idUser],\n          partecipantsActivity: {\n            [idUser]: 0\n          },\n          admins: [this.userId],\n          messages: [],\n          visible: true,\n          minimized: false,\n          active: false,\n          unread: 0\n        };\n        this.messageToChannel({\n          function: 'addChat',\n          params: [bbn.fn.extend(true, {}, chatObj, {\n            visible: false\n          })]\n        });\n        this.activate(this.addChat(chatObj));\n      }\n    },\n    /**\r\n     * @method addChat\r\n     * @param {Object} chatObj\r\n     * @returns {Number}\r\n     */\n    addChat(chatObj) {\n      let idx = chatObj.idx !== undefined ? chatObj.idx : this.getNewIdx();\n      chatObj.idx = idx;\n      this.currentChats.push(chatObj);\n      return idx;\n    },\n    /**\r\n     * @method receive\r\n     * @param {Object} data\r\n     * @fires chatById\r\n     * @fires chatWindowByIdx\r\n     * @fires minimize\r\n     * @fires getNewIdx\r\n     * @fires addChat\r\n     */\n    receive(data) {\n      //bbn.fn.log(\"RECEIVING THIS FOR CHAT\", data);\n      // Online status\n      if ('online' in data) {\n        if (data.online) {\n          this.currentOnline = true;\n        } else {\n          bbn.fn.each(this.currentChats, c => {\n            c.visible = false;\n            c.minimized = false;\n          });\n          this.currentOnline = false;\n        }\n      }\n      // Users\n      if (data.users && data.users.hash) {\n        if (this.onlineUsersHash !== data.users.hash) {\n          this.onlineUsersHash = data.users.hash;\n          this.onlineUsers.splice(0, this.onlineUsers.length);\n          if (data.users.list) {\n            this.onlineUsers.push(...data.users.list);\n          }\n        }\n        this.usersReceived = true;\n      }\n      // Chats\n      if (data.chats) {\n        let isStarted = !!this.lastChat,\n          chats = Object.values(data.chats.list),\n          chatsIds = Object.keys(data.chats.list);\n        this.chatsReceived = true;\n        if ('hash' in data.chats) {\n          this.chatsHash = data.chats.hash;\n        }\n        // All list\n        if (!isStarted && !this.currentChats.length) {\n          bbn.fn.each(chats, c => {\n            let unread = c.messages ? c.messages.filter(m => m.unread).length : 0,\n              current = bbn.fn.getRow(this.currentChats, {\n                id: c.info.id\n              });\n            if (current) {\n              c.minimized = !current.active && !!unread;\n              c.unread = unread;\n              c.participantsActivity = this._participantsActivity(c.participants);\n              c.participants = bbn.fn.map(c.participants, p => p.id);\n              bbn.fn.iterate(c, (v, p) => {\n                this.$set(current, p, v);\n              });\n            } else {\n              this.addChat(bbn.fn.extend(true, {}, c, {\n                id: c.info.id,\n                idx: this.getNewIdx(),\n                visible: false,\n                minimized: !!unread,\n                active: false,\n                unread: unread,\n                participants: bbn.fn.map(c.participants, p => p.id),\n                participantsActivity: this._participantsActivity(c.participants)\n              }));\n            }\n          });\n        }\n        // Only new\n        else {\n          bbn.fn.each(this.currentChats, (c, i) => {\n            if (!chatsIds.includes(c.id) && !c.idTemp) {\n              this.currentChats.splice(i, 1);\n            }\n          });\n          bbn.fn.iterate(data.chats.list, (c, idChat) => {\n            let chat = this.chatById(idChat);\n            if (chat) {\n              if (c.info) {\n                this.$set(chat, 'info', c.info);\n              }\n              if (c.messages) {\n                if (chat.messages === undefined) {\n                  this.$set(chat, 'messages', []);\n                }\n                if (c.messages.length) {\n                  chat.messages.push(...c.messages);\n                  chat.unread += c.messages ? c.messages.filter(m => m.unread).length : 0;\n                  if (chat.visible) {\n                    let cont = this.chatWindowByIdx(chat.idx);\n                    if (cont) {\n                      cont.scrollEnd();\n                    }\n                  } else if (this.currentOnline) {\n                    this.minimize(chat.idx);\n                  }\n                }\n              }\n              if (c.participants) {\n                let parts = bbn.fn.map(c.participants, p => p.id);\n                if (!bbn.fn.isSame(parts, chat.participants)) {\n                  chat.participants.splice(0);\n                  chat.participants.push(...parts);\n                }\n                this.$set(chat, 'participantsActivity', this._participantsActivity(c.participants));\n              }\n              if (c.admins && !bbn.fn.isSame(c.admins, chat.admins)) {\n                chat.admins.splice(0);\n                chat.admins.push(...c.admins);\n              }\n            } else {\n              let idx = this.getNewIdx(),\n                visible = c.info.creator && this.userId === c.info.creator,\n                mess = '';\n              if (c.participants.length === 1) {\n                bbn.fn.each(this.currentChats, (cc, ci) => {\n                  if (cc.idTemp !== undefined && cc.idTemp !== '' && cc.participants.length === 1 && cc.participants.includes(c.participants[0].id)) {\n                    let cw = this.chatWindowByIdx(cc.idx);\n                    if (bbn.cp.isComponent(cw)) {\n                      mess = cw.currentMessage;\n                      visible = true;\n                    }\n                    this.currentChats.splice(ci, 1);\n                    return;\n                  }\n                });\n              }\n              this.addChat(bbn.fn.extend(true, {}, c, {\n                id: idChat,\n                idx: idx,\n                visible: visible,\n                minimized: false,\n                active: false,\n                unread: c.messages ? c.messages.filter(m => m.unread).length : 0,\n                participants: bbn.fn.map(c.participants, p => p.id),\n                participantsActivity: this._participantsActivity(c.participants)\n              }));\n              if (this.currentOnline && !visible) {\n                this.minimize(idx);\n              }\n              if (mess.length) {\n                this.$nextTick(() => {\n                  let cw = this.chatWindowByIdx(idx);\n                  if (bbn.cp.isComponent(cw)) {\n                    this.$set(cw, 'currentMessage', mess);\n                  }\n                });\n              }\n            }\n          });\n        }\n      }\n      // lastChat\n      if ('last' in data) {\n        this.lastChat = data.last;\n      }\n      // New messages\n      if (data.messages) {\n        bbn.fn.iterate(data.messages, (messages, idChat) => {\n          let chat = this.chatById(idChat);\n          if (chat) {\n            if (chat.messages === undefined) {\n              this.$set(chat, 'messages', []);\n            }\n            if (messages.length) {\n              chat.messages.push(...messages);\n              chat.unread += messages.filter(m => m.unread).length;\n              if (chat.visible) {\n                let cont = this.chatWindowByIdx(chat.idx);\n                if (cont) {\n                  cont.scrollEnd();\n                }\n                if (chat.active) {\n                  this.activate(chat.idx);\n                }\n              } else if (this.currentOnline) {\n                this.minimize(chat.idx);\n              }\n            }\n          }\n        });\n      }\n    },\n    /**\r\n     * @method getNewIdx\r\n     * @returns {Number}\r\n     */\n    getNewIdx() {\n      let max = -1;\n      bbn.fn.each(this.currentChats, c => {\n        if (c.idx > max) {\n          max = c.idx;\n        }\n      });\n      return max + 1;\n    },\n    /**\r\n     * @method setIdByTemp\r\n     * @param {String} idTemp\r\n     * @param {String} id\r\n     */\n    setIdByTemp(idTemp, id) {\n      let c = bbn.fn.getRow(this.currentChats, {\n        idTemp: idTemp\n      });\n      if (c) {\n        this.$set(c, 'id', id);\n        this.$set(c, 'idTemp', '');\n      }\n    },\n    /**\r\n     * @method removeChatByTemp\r\n     * @param {String} idTemp\r\n     */\n    removeChatByTemp(idTemp) {\n      let idx = bbn.fn.search(this.currentChats, {\n        idTemp: idTemp\n      });\n      if (idx > -1) {\n        this.currentChats.splice(idx, 1);\n      }\n    },\n    /**\r\n     * Switch the current user online.\r\n     * @method switchOnline\r\n     * @fires post\r\n     * @fires alert\r\n     */\n    switchOnline() {\n      this.post(this.url + '/actions/user/online', d => {\n        if (!d.success) {\n          this.alert(bbn._('You are already online'));\n        }\n      });\n    },\n    /**\r\n     * Switch the current user offline.\r\n     * @method switchOffline\r\n     * @fires post\r\n     * @fires alert\r\n     */\n    switchOffline() {\n      this.post(this.url + '/actions/user/offline', d => {\n        if (!d.success) {\n          this.alert(bbn._('You are already offline'));\n        }\n      });\n    },\n    /**\r\n     * Checks if the given user is online.\r\n     * @method isOnline\r\n     * @param {String} idUser\r\n     * @returns {Boolean}\r\n     */\n    isOnline(idUser) {\n      return this.onlineUsers.includes(idUser);\n    },\n    /**\r\n     * Gets the participants list (full object) from an array of ids\r\n     * @method getParticipants\r\n     * @param {Array} participants\r\n     * @returns {Array}\r\n     */\n    getParticipants(participants) {\n      if (bbn.fn.isArray(participants)) {\n        return participants.filter(p => p !== this.userId).map(p => bbn.fn.getRow(this.allUsers, 'value', p));\n      }\n      return [];\n    },\n    /**\r\n     * Gets the formatted list of participants\r\n     * @method getParticipantsFormatted\r\n     * @param {Array}\r\n     * @param {String} [', '] separator\r\n     * @returns {String}\r\n     */\n    getParticipantsFormatted(participants, separator = ', ') {\n      if (bbn.fn.isArray(participants) && participants.length) {\n        if (bbn.fn.isObject(participants[0])) {\n          return participants.map(p => p.text).join(separator);\n        } else {\n          return this.getParticipantsFormatted(this.getParticipants(participants), separator);\n        }\n      }\n      return '';\n    },\n    /**\r\n     * The method called on chat selection.\r\n     * @method onSelectChat\r\n     * @param {Object} data\r\n     * @param {Number} idx\r\n     * @param {Number} index\r\n     * @param {Event} ev\r\n     * @fires chatById\r\n     * @fires maximaze\r\n     */\n    onSelectChat(data, idx, index, ev) {\n      ev.preventDefault();\n      let chat = this.chatById(data.id);\n      if (chat && this.isReady) {\n        this.maximaze(chat.idx);\n      }\n    },\n    /**\r\n     * The method called on user selection.\r\n     * @method onSelectUser\r\n     * @param {Object} data\r\n     * @param {Number} idx\r\n     * @param {Number} index\r\n     * @param {Event} ev\r\n     * @fires chatTo\r\n     */\n    onSelectUser(data, idx, index, ev) {\n      ev.preventDefault();\n      if (this.isReady) {\n        this.chatTo(data.value);\n      }\n    },\n    /**\r\n     * Closes the given chat window.\r\n     * @method close\r\n     * @param {Number} idx\r\n     */\n    close(idx) {\n      let chat = bbn.fn.getRow(this.currentChats, {\n        idx: idx\n      });\n      if (chat) {\n        this.$set(chat, 'visible', false);\n      }\n    },\n    /**\r\n     * Minimizes the given chat window.\r\n     * @method minimize\r\n     * @param {Number} idx\r\n     * @fires close\r\n     */\n    minimize(idx) {\n      let chat = bbn.fn.getRow(this.currentChats, {\n        idx: idx\n      });\n      if (chat) {\n        this.$set(chat, 'minimized', true);\n        this.close(idx);\n      }\n    },\n    /**\r\n     * Maximazes the given chat window.\r\n     * @method maximaze\r\n     * @param {Number} idx\r\n     */\n    maximaze(idx) {\n      let chat = bbn.fn.getRow(this.currentChats, {\n        idx: idx\n      });\n      if (chat) {\n        this.$set(chat, 'minimized', false);\n        this.$set(chat, 'visible', true);\n      }\n    },\n    /**\r\n     * Toggle minimized to the given chat window.\r\n     * @method toggleMinimized\r\n     * @fires minimize\r\n     * @fires maximaze\r\n     */\n    toggleMinimized(idx) {\n      let chat = bbn.fn.getRow(this.currentChats, {\n        idx: idx\n      });\n      if (chat) {\n        if (chat.minimized) {\n          this.maximaze(idx);\n        } else {\n          this.minimize(idx);\n        }\n      }\n    },\n    /**\r\n     * Activates the given chat window\r\n     * @method activate\r\n     * @param {Number} idx\r\n     * @fires setLastActivity\r\n     * @fires removeUnread\r\n     * @fires messageToChannel\r\n     */\n    activate(idx) {\n      let chat = bbn.fn.getRow(this.currentChats, {\n        idx: idx\n      });\n      if (chat) {\n        this.$set(chat, 'active', true);\n        if (chat.id) {\n          this.setLastActivity(chat.id, this.userId);\n        }\n        setTimeout(() => {\n          this.removeUnread(idx);\n        }, 2000);\n        this.messageToChannel({\n          function: 'removeUnread',\n          params: [idx]\n        });\n      }\n    },\n    /**\r\n     * Removes unread tag from messages and from chat\r\n     * @method removeUnread\r\n     * @param {Number} idx\r\n     */\n    removeUnread(idx) {\n      let chat = bbn.fn.getRow(this.currentChats, {\n        idx: idx\n      });\n      if (chat) {\n        if (chat.unread) {\n          this.$set(chat, 'unread', 0);\n        }\n        if (!!chat.messages && chat.messages.length) {\n          for (let i = chat.messages.length - 1; i > -1; i--) {\n            if (chat.messages[i].user !== this.userId && chat.messages[i].unread !== undefined) {\n              if (!chat.messages[i].unread) {\n                break;\n              }\n              this.$set(chat.messages[i], 'unread', false);\n            }\n          }\n        }\n      }\n    },\n    /**\r\n     * Deactivates the given chat window\r\n     * @method deactivate\r\n     * @param {Number} idx\r\n     * @fires setLastActivity\r\n     */\n    deactivate(idx) {\n      let chat = bbn.fn.getRow(this.currentChats, {\n        idx: idx\n      });\n      if (chat) {\n        this.$set(chat, 'active', false);\n        if (chat.id) {\n          this.setLastActivity(chat.id, this.userId);\n        }\n      }\n    },\n    /**\r\n     * Sets the last activity of the given user on the given chat\r\n     * @method setLastActivity\r\n     * @param {String} idChat\r\n     * @param {String} idUser\r\n     * @fires post\r\n     */\n    setLastActivity(idChat, idUser) {\n      if (idChat && idUser && this.currentOnline) {\n        this.post(this.url + '/actions/chat/activity', {\n          id_chat: idChat,\n          id_user: idUser\n        });\n      }\n    },\n    /**\r\n     * Trasforms the array of participants activity to an object \"idParticipant: lastActivity\"\r\n     * @method _participantsActivity\r\n     * @param {Array} list\r\n     * @return {Object}\r\n     */\n    _participantsActivity(list) {\n      let res = {};\n      bbn.fn.each(list, l => res[l.id] = l.lastActivity);\n      return res;\n    },\n    /**\r\n     * Sets the bottom coordinates of the main window\r\n     * @method _setCoord\r\n     */\n    _setCoord() {\n      let coord = this.$el.offsetParent.getBoundingClientRect();\n      this.bottomCoord = `${coord.bottom - coord.top}px`;\n    }\n  },\n  /**\r\n   * @event mounted\r\n   */\n  mounted() {\n    this.$nextTick(() => {\n      this._setCoord();\n      this.ready = true;\n    });\n  },\n  watch: {\n    /**\r\n     * @watch mainWindowVisible\r\n     * @fires _setCoord\r\n     */\n    mainWindowVisible: {\n      immediate: true,\n      handler(newVal) {\n        if (newVal) {\n          this._setCoord();\n        }\n      }\n    }\n  },\n  components: {\n    /**\r\n     * The chat window.\r\n     * @component chat\r\n     */\n    chat: {\n      name: 'chat',\n      /**\r\n       * @mixin bbn.cp.mixins.basic\r\n       * @memberof chat\r\n       */\n      mixins: [bbn.cp.mixins.basic],\n      props: {\n        /**\r\n         * @prop {Number} idx\r\n         * @memberof chat\r\n         */\n        idx: {\n          type: Number\n        },\n        /**\r\n         * The user id.\r\n         * @prop {String} [''] userId\r\n         * @memberof chat\r\n         */\n        userId: {\n          type: String,\n          default: ''\n        },\n        /**\r\n         * The id of the current chat.\r\n         * @prop {String} [''] chatId\r\n         * @memberof chat\r\n         */\n        chatId: {\n          type: String,\n          default: ''\n        },\n        /**\r\n         * The array of partecipants to the chat.\r\n         * @prop {Array} [[]] partecipants\r\n         * @memberof chat\r\n         */\n        participants: {\n          type: Array,\n          default() {\n            return [];\n          }\n        },\n        /**\r\n         * Partecipants activity details\r\n         * @prop {Object} [{}] partecipantsActivity\r\n         * @memberof chat\r\n         */\n        participantsActivity: {\n          type: Object,\n          default() {\n            return {};\n          }\n        },\n        /**\r\n         * The array of the admins of the chat.\r\n         * @prop {Array} [[]] admins\r\n         * @memberof chat\r\n         */\n        admins: {\n          type: Array,\n          default() {\n            return [];\n          }\n        },\n        /**\r\n         * The array of all messages of the chat.\r\n         * @prop {Array} [[]] messages\r\n         * @memberof chat\r\n         */\n        messages: {\n          type: Array,\n          default() {\n            return [];\n          }\n        },\n        /**\r\n         * The array of all users (including offline ones).\r\n         * @prop {Array} [[]] users\r\n         * @memberof chat\r\n         */\n        users: {\n          type: Array,\n          default() {\n            return [];\n          }\n        },\n        /**\r\n         * The conversation's info\r\n         * @prop {Object} [{title: ''}] info\r\n         * @memberof chat\r\n         */\n        info: {\n          type: Object,\n          default() {\n            return {\n              title: ''\n            };\n          }\n        },\n        /**\r\n         * A temporary id used for a new chat\r\n         * @prop {String} [''] idTemp\r\n         * @memberof chat\r\n         */\n        idTemp: {\n          type: String,\n          default: ''\n        },\n        /**\r\n         * Indicates if the chat is active\r\n         * @prop {Boolean} [false] active\r\n         * @memberof chat\r\n         */\n        active: {\n          type: Boolean,\n          default: false\n        },\n        /**\r\n         * The number of unread message\r\n         * @prop {Number} [0] unread\r\n         * @memberof chat\r\n         */\n        unread: {\n          type: Number,\n          default: 0\n        }\n      },\n      data() {\n        return {\n          /**\r\n           * The current message.\r\n           * @data {String} [''] currentMessage\r\n           * @memberof chat\r\n           */\n          currentMessage: '',\n          /**\r\n           * The main bbn-chat component\r\n           * @data {bbnCp} chat\r\n           * @memberof chat\r\n           */\n          cp,\n          /**\r\n           * Indicates if a loading is in progress\r\n           * @data {Boolean} [false] isLoading\r\n           * @memberof chat\r\n           */\n          isLoading: false,\n          /**\r\n           * Indicates if to show or not the chat configuration panel\r\n           * @data {Boolean} [false] showInfo\r\n           * @memberof chat\r\n           */\n          showInfo: false,\n          /**\r\n           * Indicates whether a message is being sent\r\n           * @data {Boolean} isSending\r\n           * @memberof chat\r\n           */\n          isSending: false,\n          /**\r\n           * The background color used for the received messages\r\n           * @data {String} [''] receivedBackground\r\n           * @memberof chat\r\n           */\n          receivedBackground: ''\n        };\n      },\n      computed: {\n        /**\r\n         * True if the chat is a group\r\n         * @computed isGroup\r\n         * @memberof chat\r\n         * @return {Boolean}\r\n         */\n        isGroup() {\n          return this.participants.length > 1 || this.info.title;\n        },\n        /**\r\n         * The current chat title\r\n         * @coputed currentTitle\r\n         * @memberof chat\r\n         * @fires cp.getParticipantsFormatted\r\n         * @return {String}\r\n         */\n        currentTitle() {\n          return this.info.title || this.cp.getParticipantsFormatted(this.participants);\n        },\n        /**\r\n         * The list of the online participants\r\n         * @computed online\r\n         * @memberof chat\r\n         * @fires cp.isOnline\r\n         * @return {Array}\r\n         */\n        online() {\n          return this.participants.filter(p => this.cp.isOnline(p));\n        },\n        /**\r\n         * The formatted list of the online participants\r\n         * @computed onlineFromatted\r\n         * @memberof chat\r\n         * @fires cp.getParticipantsFormatted\r\n         * @return {String}\r\n         */\n        onlineFormatted() {\n          return this.online.length ? bbn._('Online participants') + ':\\n' + this.cp.getParticipantsFormatted(this.online, '\\n') : '';\n        }\n      },\n      methods: {\n        /**\r\n         * Alias of bbn.fn.getField method\r\n         * @method getField\r\n         * @memberof chat\r\n         */\n        getField: bbn.fn.getField,\n        /**\r\n         * Returns the source of the menu.\r\n         * @method getMenuFn\r\n         * @memberof chat\r\n         * @fires confirm\r\n         * @fires leave\r\n         * @fires destroy\r\n         * @return {Array}\r\n         */\n        getMenu() {\n          let res = [];\n          if (this.cp.currentOnline) {\n            res.push({\n              text: bbn._('Info'),\n              icon: 'nf nf-fa-info',\n              action: () => {\n                this.showInfo = true;\n              }\n            });\n            res.push({\n              text: bbn._('Leave the chat'),\n              icon: 'nf nf-mdi-comment_remove',\n              action: () => {\n                this.confirm(bbn._('Are you sure you want to leave this chat?'), () => {\n                  this.leave();\n                });\n              }\n            });\n            if (this.info.creator === this.userId) {\n              res.push({\n                text: bbn._('Destroy the chat'),\n                icon: 'nf nf-fa-trash',\n                action: () => {\n                  this.confirm(bbn._('Are you sure you want to destroy this chat?'), () => {\n                    this.destroy();\n                  });\n                }\n              });\n            }\n          }\n          return res;\n        },\n        /**\r\n         * Closes the chat window.\r\n         * @method close\r\n         * @memberof chat\r\n         * @fires cp.close\r\n         */\n        close() {\n          if (this.idTemp && !this.chatId && !this.messages.length) {\n            return this.destroy();\n          }\n          this.cp.close(this.idx);\n        },\n        /**\r\n         * Minimizes the chat window.\r\n         * @method minimize\r\n         * @memberof chat\r\n         * @fires cp.minimize\r\n         */\n        minimize() {\n          this.cp.minimize(this.idx);\n        },\n        /**\r\n         * Leaves the chat.\r\n         * @method leave\r\n         * @memberof chat\r\n         * @fires post\r\n         * @fires alert\r\n         */\n        leave() {\n          if (this.chatId) {\n            this.post(this.cp.url + '/actions/chat/leave', {\n              id_chat: this.chatId\n            }, d => {\n              if (!d.success) {\n                this.alert(bbn._(\"Impossible to leave the chat!\"));\n              }\n            });\n          } else if (this.idTemp) {\n            this.cp.currentChats.splice(bbn.fn.search(this.cp.currentChats, {\n              idx: this.idx\n            }), 1);\n          }\n        },\n        /**\r\n         * Destroys the chat.\r\n         * @method destroy\r\n         * @memberof chat\r\n         * @fires post\r\n         * @fires alert\r\n         */\n        destroy() {\n          if (this.chatId) {\n            this.post(this.cp.url + '/actions/chat/destroy', {\n              id_chat: this.chatId\n            }, d => {\n              if (!d.success) {\n                this.alert(bbn._(\"Impossible to destroy the chat!\"));\n              }\n            });\n          } else if (this.idTemp) {\n            this.cp.currentChats.splice(bbn.fn.search(this.cp.currentChats, {\n              idx: this.idx\n            }), 1);\n            this.cp.messageToChannel({\n              function: 'removeChatByTemp',\n              params: [this.idTemp]\n            });\n          }\n        },\n        /**\r\n         * Sends the current message.\r\n         * @method sendMessage\r\n         * @memberof chat\r\n         * @fires post\r\n         */\n        sendMessage() {\n          if (this.currentMessage) {\n            this.isSending = true;\n            this.post(this.cp.url + '/actions/message/new', {\n              id_chat: this.chatId || null,\n              id_temp: this.idTemp || null,\n              users: this.participants,\n              text: this.currentMessage\n            }, d => {\n              if (d.success) {\n                if (this.idTemp && d.id_chat) {\n                  this.cp.setIdByTemp(this.idTemp, d.id_chat);\n                  this.cp.messageToChannel({\n                    function: 'setIdByTemp',\n                    params: [this.idTemp, d.id_chat]\n                  });\n                  this.isSending = false;\n                }\n                this.cp.setLastActivity(this.chatId, this.userId);\n              }\n            });\n            this.currentMessage = '';\n          }\n        },\n        /**\r\n         * Handles the resize of the scroll in the chat window.\r\n         * @method scrollEnd\r\n         * @fires getRef\r\n         * @memberof chat\r\n         */\n        scrollEnd() {\n          let sc = this.getRef('scroll');\n          if (sc) {\n            //sc.onResize(true).then(() => {\n            sc.scrollEndY();\n            //});\n          }\n        },\n        /**\r\n         * The render of the message.\r\n         * @method renderMsg\r\n         * @param {String} msg\r\n         * @return {String}\r\n         * @memberof chat\r\n         */\n        renderMsg(msg) {\n          msg = bbn.fn.html2text(msg);\n          let matches = msg.match(/(https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9]\\.[^\\s]{2,})/g);\n          if (matches) {\n            bbn.fn.each(matches, v => {\n              if (v.indexOf(bbn.env.host) === 0) {\n                msg = msg.replace(v, '<a href=\"javascript:;\" onclick=\"bbn.fn.link(\\'' + bbn.fn.substr(v, bbn.env.host.length + 1) + '\\')\">' + bbn.fn.substr(v, bbn.env.host.length + 1) + '</a>');\n              } else {\n                msg = msg.replace(v, '<a href=\"' + v + '\" target=\"_blank\">' + v + '</a>');\n              }\n            });\n          }\n          return msg;\n        },\n        /**\r\n         * Formats the given timestamp\r\n         * @method getTime\r\n         * @memberof chat\r\n         * @param {String} t\r\n         * @return {String}\r\n         */\n        getTime(t) {\n          return dayjs.unix(t).format('HH:mm');\n        },\n        /**\r\n         * Formats the given timestamp\r\n         * @method getDate\r\n         * @memberof chat\r\n         * @param {String} d\r\n         * @return {String}\r\n         */\n        getDate(d) {\n          return dayjs.unix(d).format('DD MMMM YYYY');\n        },\n        /**\r\n         * Checks if the given timestamp is equal at today\r\n         * @method isToday\r\n         * @memberof chat\r\n         * @param {String} d\r\n         * @return {Boolean}\r\n         */\n        isToday(d) {\n          return dayjs().format('DD/MM/YYYY') === dayjs.unix(d).format('DD/MM/YYYY');\n        },\n        /**\r\n         * Load more old messages\r\n         * @method loadMoreMessages\r\n         * @memberof chat\r\n         * @fires post\r\n         */\n        loadMoreMessages() {\n          if (this.messages.length) {\n            this.isLoading = true;\n            this.post(this.cp.url + '/actions/message/previous', {\n              id_chat: this.chatId,\n              time: this.messages[0].time\n            }, d => {\n              this.isLoading = false;\n              if (d.messages && d.messages.length) {\n                this.messages.unshift(...d.messages);\n              }\n            }, e => {\n              this.isLoading = false;\n            });\n          }\n        },\n        /**\r\n         * Checks if all participants read the given message\r\n         * @method isMsgRead\r\n         * @memberof chat\r\n         * @param {Object} msg\r\n         * @return {Boolean}\r\n         */\n        isMsgRead(msg) {\n          if (msg.time) {\n            return !this.participants.filter(p => !this.participantsActivity[p] || this.participantsActivity[p] < msg.time).length;\n          }\n          return false;\n        },\n        /**\r\n         * Gets the style properties for the given message\r\n         * @method getStyle\r\n         * @memberof chat\r\n         * @param {Object} msg\r\n         * @param {Number} idx\r\n         * @return {Object}\r\n         */\n        getStyle(msg, idx) {\n          let sent = msg.user === this.userId,\n            ret = {};\n          if (this.$refs.message && !sent && !msg.unread) {\n            if (this.receivedBackground) {\n              ret.backgroundColor = this.receivedBackground + '!important';\n              ret.borderColor = this.receivedBackground;\n            }\n          }\n          return ret;\n        },\n        addEmoji(emoji) {\n          this.currentMessage += (this.currentMessage.lenght ? ' ' : '') + String.fromCodePoint('0x' + emoji);\n        }\n      },\n      created() {\n        let el = document.createElement('div');\n        el.classList.add('bbn-alt-background');\n        document.body.append(el);\n        this.receivedBackground = bbn.fn.lightenDarkenHex(bbn.fn.rgb2hex(getComputedStyle(el).backgroundColor), this.cp.isDarkTheme ? 30 : -30);\n        el.remove();\n      },\n      /**\r\n       * @event mounted\r\n       * @fires getRef\r\n       * @memberof chat\r\n       */\n      mounted() {\n        if (this.cp.currentOnline) {\n          this.getRef('input').focus();\n        }\n      }\n    },\n    /**\r\n     * Represents the individual item in the users list.\r\n     * @component user\r\n     */\n    user: {\n      template: `\n<div class=\"bbn-grid bbn-p bbn-vmiddle bbn-vxsmargin\"\n    style=\"grid-template-columns: max-content auto max-content\"\n>\n<div class=\"bbn-middle\" style=\"min-width: 1.5rem\">\n  <bbn-initial :user-name=\"source.text\"\n              :width=\"16\"\n              :height=\"16\"\n  ></bbn-initial>\n</div>\n<div class=\"bbn-ellipsis bbn-w-100\"\n      bbn-text=\"source.text\"\n></div>\n<div class=\"bbn-middle\" style=\"min-width: 1.5rem\">\n  <i :class=\"{\n        'nf nf-fa-circle': cp.isOnline(source.value),\n        'bbn-green': cp.isOnline(source.value)\n      }\"\n  ></i>\n</div>\n</div>\n      `,\n      name: 'user',\n      props: {\n        /**\r\n        * The source object\r\n        * @prop {Object} source\r\n        * @memberof user\r\n        */\n        source: {\n          type: Object\n        }\n      },\n      data() {\n        return {\n          /**\r\n           * The main chat component\r\n           * @data {bbnCp} cp\r\n           * @memberof user\r\n           */\n          cp\n        };\n      }\n    },\n    /**\r\n     * Represents the individual item in the current chats list\r\n     * @component active\r\n     */\n    active: {\n      template: `\n<div class=\"bbn-grid bbn-p bbn-vmiddle bbn-vxsmargin\"\n    style=\"grid-template-columns: max-content auto max-content max-content\"\n    :title=\"participantsFormatted\"\n>\n<div class=\"bbn-middle\" style=\"min-width: 1.5rem\">\n  <bbn-initial :user-name=\"participantsFormatted\"\n                :width=\"16\"\n                :height=\"16\"\n                bbn-if=\"!isGroup && !source.info.title\"\n  ></bbn-initial>\n  <i bbn-else\n      class=\"nf nf-oct-organization\"></i>\n</div>\n<div class=\"bbn-ellipsis bbn-w-100\"\n      bbn-text=\"source.info.title || participantsFormatted\"\n></div>\n<div class=\"bbn-middle\">\n  <span bbn-if=\"source.unread\"\n        class=\"bbn-xs bbn-badge bbn-primary\"\n        bbn-text=\"source.unread\">\n  </span>\n</div>\n<div class=\"bbn-middle\" style=\"min-width: 1.5rem\">\n  <i bbn-if=\"cp.currentOnline && (online.length === participants.length)\"\n      class=\"nf nf-fa-circle bbn-green\"\n      :title=\"onlineFormatted\"\n  ></i>\n  <i bbn-elseif=\"cp.currentOnline && isGroup && online.length\"\n      class=\"nf nf-fa-circle bbn-orange\"\n      :title=\"onlineFormatted\"\n  ></i>\n</div>\n</div>\n      `,\n      name: 'active',\n      props: {\n        /**\r\n        * The source object\r\n        * @prop {Object} source\r\n        * @memberof active\r\n        */\n        source: {\n          type: Object\n        }\n      },\n      data() {\n        return {\n          /**\r\n           * The main chat component\r\n           * @data {bbnCp} cp\r\n           * @memberof active\r\n           */\n          cp\n        };\n      },\n      computed: {\n        /**\r\n         * The participants list (full object)\r\n         * @computed participants\r\n         * @memberof active\r\n         * @fires cp.getParticipants\r\n         * @return {Array}\r\n         */\n        participants() {\n          return this.cp.getParticipants(this.source.participants);\n        },\n        /**\r\n         * The formatted paticipants list\r\n         * @computed participantsFormatted\r\n         * @memberof active\r\n         * @fires cp.getParticipantsFormatted\r\n         * @return {Array}\r\n         */\n        participantsFormatted() {\n          if (this.participants) {\n            return this.cp.getParticipantsFormatted(this.participants, '\\n');\n          }\n          return '';\n        },\n        /**\r\n         * True if this chat is a group\r\n         * @computed isGroup\r\n         * @memberof active\r\n         * @return {Boolean}\r\n         */\n        isGroup() {\n          return this.participants.length > 1;\n        },\n        /**\r\n         * The list of the online participants\r\n         * @computed online\r\n         * @memberof active\r\n         * @fires cp.isOnline\r\n         * @return {Array}\r\n         */\n        online() {\n          return this.participants.filter(p => this.cp.isOnline(p.value));\n        },\n        /**\r\n         * The formatted list of the online participants\r\n         * @computed onlineFormatted\r\n         * @memberof active\r\n         * @fires cp.getParticipantsFormatted\r\n         * @return {String}\r\n         */\n        onlineFormatted() {\n          return this.online.length && this.isGroup ? bbn._('Online participants') + ':\\n' + this.cp.getParticipantsFormatted(this.online, '\\n') : '';\n        }\n      }\n    },\n    /**\r\n     * The interface where to see/change the chat's info\r\n     * @component info\r\n     */\n    info: {\n      template: `\n<div class=\"bbn-spadding\">\n<div bbn-if=\"(participants.length > 1) || info.title || titleVisible\"\n      class=\"bbn-header bbn-c\"\n>` + bbn._('TITLE') + `</div>\n<div bbn-if=\"(participants.length > 1) || info.title || titleVisible\"\n      class=\"bbn-flex-width bbn-vmiddle bbn-top-sspace\"\n>\n  <bbn-input class=\"bbn-flex-fill bbn-right-sspace\"\n            bbn-model=\"currentTitle\"\n            :readonly=\"!isAdmin\"\n  ></bbn-input>\n  <bbn-button icon=\"nf nf-fa-save\"\n              :notext=\"true\"\n              @click=\"saveTitle\"\n              bbn-if=\"isAdmin && chatId && currentTitle\"\n  ></bbn-button>\n</div>\n<div class=\"bbn-header bbn-top-sspace bbn-vmiddle\">\n  <div class=\"bbn-flex-fill bbn-c\">` + bbn._('PARTICIPANTS') + `</div>\n  <div class=\"bbn-hsmargin\">\n    <i bbn-if=\"isAdmin\"\n        class=\"bbn-p nf nf-fa-plus\"\n        @click=\"onAddUserClick\"\n    ></i>\n  </div>\n</div>\n<div class=\"bbn-spadding bbn-border bbn-grid bbn-no-border-top\"\n    style=\"grid-template-columns: max-content auto max-content\"\n>\n  <template bbn-for=\"p in currentParticipants\">\n    <div class=\"bbn-middle\"\n        style=\"min-width: 1.5rem\"\n    >\n      <bbn-initial :user-name=\"p.text\"\n                  :width=\"16\"\n                  :height=\"16\"\n      ></bbn-initial>\n    </div>\n    <div class=\"bbn-ellipsis bbn-w-100\"\n        bbn-text=\"p.text\"\n    ></div>\n    <div class=\"bbn-middle\"\n        style=\"min-width: 1.5rem\"\n    >\n      <template bbn-if=\"isAdmin\">\n        <i bbn-if=\"!admins.includes(p.value) || isCreator\"\n          class=\"bbn-p nf nf-fa-trash bbn-red bbn-left-sspace\"\n          @click=\"removeUser(p.value)\"\n        ></i>\n        <i bbn-if=\"isCreator\"\n          :class=\"['bbn-p', 'nf nf-fa-star', 'bbn-left-sspace', {\n            'bbn-primary-text-alt': admins.includes(p.value)\n          }]\"\n          @click=\"toggleAdmin(p.value)\"\n        ></i>\n      </template>\n    </div>\n  </template>\n</div>\n</div>\n      `,\n      name: 'info',\n      props: {\n        /**\r\n         * The chat's ID\r\n         * @prop {String} [''] chatId\r\n         * @memberof info\r\n         */\n        chatId: {\n          type: String,\n          default: ''\n        },\n        /**\r\n         * The current user's ID\r\n         * @prop {String} userId\r\n         * @memberof info\r\n         */\n        userId: {\n          type: String,\n          required: true\n        },\n        /**\r\n         * The chat's info\r\n         * @prop {Object} info\r\n         * @memberof info\r\n         */\n        info: {\n          type: Object,\n          required: true\n        },\n        /**\r\n         * The chat's participants list\r\n         * @prop {Array} [[]] participants\r\n         * @memberof info\r\n         */\n        participants: {\n          type: Array,\n          defauult() {\n            return [];\n          }\n        },\n        /**\r\n         * The chat's admins list\r\n         * @prop {Array} [[]] admins\r\n         * @memberof info\r\n         */\n        admins: {\n          type: Array,\n          defauult() {\n            return [];\n          }\n        },\n        /**\r\n         * The array of all users (including offline ones).\r\n         * @prop {Array} [[]] users\r\n         * @memberof info\r\n         */\n        users: {\n          type: Array,\n          default() {\n            return [];\n          }\n        },\n        /**\r\n         * True if the chat title is to be shown\r\n         * @prop {Boolean} [false] titleVisible\r\n         * @memberof info\r\n         */\n        titleVisible: {\n          type: Boolean,\n          default: false\n        }\n      },\n      data() {\n        return {\n          /**\r\n           * The current title\r\n           * @data {String} currentTitle\r\n           * @memberof info\r\n           */\n          currentTitle: this.info.title || ''\n        };\n      },\n      computed: {\n        /**\r\n         * @computed currentParticipants\r\n         * @memberof info\r\n         * @fires cp.getParticipants\r\n         * @return {Array}\r\n         */\n        currentParticipants() {\n          return cp.getParticipants(this.participants);\n        },\n        /**\r\n         * True if the current user is the chat creator\r\n         * @computed isCreator\r\n         * @memberof info\r\n         * @return {Boolean}\r\n         */\n        isCreator() {\n          return this.userId === this.info.creator;\n        },\n        /**\r\n         * True if the current user is a chat admin\r\n         * @computed isAdmin\r\n         * @memberof info\r\n         * @return {Boolean}\r\n         */\n        isAdmin() {\n          return this.admins.includes(this.userId);\n        }\n      },\n      methods: {\n        /**\r\n         * Save the title\r\n         * @method saveTitle\r\n         * @memberof info\r\n         * @fires post\r\n         * @fires alert\r\n         */\n        saveTitle() {\n          if (this.chatId) {\n            this.post(cp.url + '/actions/chat/title', {\n              id_chat: this.chatId,\n              title: this.currentTitle\n            }, d => {\n              if (d.success) {\n                this.$set(this.info, 'title', this.currentTitle);\n              } else {\n                this.alert(bbn._(\"Impossible to save the chat's title\"));\n              }\n            });\n          }\n        },\n        /**\r\n         * Toggle the given user as chat admin\r\n         * @method toggleAdmin\r\n         * @memberof info\r\n         * @param {String} idUser\r\n         * @fires addAdmin\r\n         * @fires removeAdmin\r\n         */\n        toggleAdmin(idUser) {\n          let idx = this.admins.indexOf(idUser);\n          if (idx === -1) {\n            this.addAdmin(idUser);\n          } else {\n            this.removeAdmin(idUser);\n          }\n        },\n        /**\r\n         * The called method when an user is added from interface\r\n         * @method onAddUserClick\r\n         * @memberof info\r\n         * @fires getPopup\r\n         */\n        onAddUserClick() {\n          this.getPopup({\n            title: bbn._('Select user'),\n            component: this.$options.components.users,\n            source: {\n              participants: this.participants,\n              creator: this.info.creator,\n              onSelect: this.addUser\n            },\n            scrollable: false,\n            width: 300\n          });\n        },\n        /**\r\n         * Add a user to the chat.\r\n         * @method addUser\r\n         * @param {String} idUser\r\n         * @memberof info\r\n         * @fires post\r\n         * @fires alert\r\n         */\n        addUser(idUser) {\n          if (!this.participants.includes(idUser) && this.admins.includes(this.userId)) {\n            if (this.chatId) {\n              this.post(cp.url + '/actions/user/add', {\n                id_chat: this.chatId,\n                id_user: idUser\n              }, d => {\n                if (!d.success) {\n                  this.alert(bbn._(\"Impossible to add the user!\"));\n                }\n              });\n            } else {\n              let title = cp.getParticipantsFormatted(this.participants);\n              this.participants.push(idUser);\n              if (this.info.title === title) {\n                this.$set(this.info, 'title', cp.getParticipantsFormatted(this.participants));\n              }\n            }\n          }\n        },\n        /**\r\n         * Remove the given user from the chat\r\n         * @method removeUser\r\n         * @memberof info\r\n         * @param {String} idUser\r\n         * @fires confirm\r\n         * @fires post\r\n         * @fires alert\r\n         */\n        removeUser(idUser) {\n          if (this.participants.includes(idUser) && (!this.admins.includes(idUser) || idUser !== this.info.creator && this.userId === this.info.creator)) {\n            this.confirm(bbn._('Are you sure you want to remove this user from the chat?'), () => {\n              let remove = () => {\n                let title = cp.getParticipantsFormatted(this.participants),\n                  changeTitle = this.info.title === title;\n                this.participants.splice(this.participants.indexOf(idUser), 1);\n                if (changeTitle) {\n                  this.$set(this.info, 'title', cp.getParticipantsFormatted(this.participants));\n                }\n              };\n              if (this.chatId) {\n                this.post(cp.url + '/actions/user/remove', {\n                  id_chat: this.chatId,\n                  id_user: idUser\n                }, d => {\n                  if (d.success) {\n                    remove();\n                  } else {\n                    this.alert(bbn._(\"Impossible to remove the user!\"));\n                  }\n                });\n              } else {\n                remove();\n              }\n            });\n          }\n        },\n        /**\r\n         * Add admin to the chat\r\n         * @method addAdmin\r\n         * @memberof info\r\n         * @param {String} idUser\r\n         * @fires post\r\n         * @fires alert\r\n         */\n        addAdmin(idUser) {\n          if (this.userId === this.info.creator && idUser !== this.userId && !this.admins.includes(idUser)) {\n            if (this.chatId) {\n              this.post(cp.url + '/actions/admin/add', {\n                id_chat: this.chatId,\n                id_user: idUser\n              }, d => {\n                if (d.success) {\n                  this.admins.push(idUser);\n                } else {\n                  this.alert(bbn._('Impossibile to set this user as admin!'));\n                }\n              });\n            } else {\n              this.admins.push(idUser);\n            }\n          }\n        },\n        /**\r\n         * Remove admin\r\n         * @method removeAdmin\r\n         * @memberof info\r\n         * @param {String} idUser\r\n         * @fires post\r\n         * @fires alert\r\n         */\n        removeAdmin(idUser) {\n          if (this.userId === this.info.creator && idUser !== this.userId && this.admins.includes(idUser)) {\n            if (this.chatId) {\n              this.post(cp.url + '/actions/admin/remove', {\n                id_chat: this.chatId,\n                id_user: idUser\n              }, d => {\n                if (d.success) {\n                  this.admins.splice(this.admins.indexOf(idUser), 1);\n                } else {\n                  this.alert(bbn._('Impossibile to set this user as admin!'));\n                }\n              });\n            } else {\n              this.admins.splice(this.admins.indexOf(idUser), 1);\n            }\n          }\n        }\n      },\n      watch: {\n        /**\r\n         * @watch currentTitle\r\n         * @memberof info\r\n         * @param {String} newVal\r\n         * @emit titleChanged\r\n         */\n        currentTitle(newVal) {\n          this.$emit('titlechanged', newVal);\n        },\n        /**\r\n         * @watch info.title\r\n         * @memberof info\r\n         * @param {String} newVal\r\n         */\n        'info.title'(newVal) {\n          this.currentTitle = newVal;\n        }\n      },\n      components: {\n        /**\r\n         * The users tree\r\n         * @component users\r\n         * @memberof info\r\n         */\n        users: {\n          template: `\n<div class=\"bbn-vpadding bbn-overlay\">\n<bbn-tree :source=\"users\"></bbn-tree>\n</div>\n          `,\n          name: 'users',\n          props: {\n            /**\r\n             * The source object\r\n             * @prop {Object} source\r\n             * @memberof info\r\n             */\n            source: {\n              type: Object\n            }\n          },\n          data() {\n            return {\n              /**\r\n               * The users list\r\n               * @data {Array} users\r\n               * @memberof info\r\n               */\n              users: bbn.fn.map(cp.users.filter(u => !this.source.participants.includes(u.value) && u.value !== this.source.creator), u => {\n                return bbn.fn.extend(true, {\n                  component: this.$options.components.user\n                }, u);\n              })\n            };\n          },\n          components: {\n            /**\r\n             * The individual user component\r\n             * @component user\r\n             * @memberof users\r\n             */\n            user: {\n              template: `\n<span class=\"bbn-iblock bbn-p\" @click=\"select\">\n<bbn-initial :user-name=\"source.text\"\n              :width=\"16\"\n              :height=\"16\"\n></bbn-initial>\n<span class=\"bbn-left-sspace\"\n      bbn-text=\"source.text\"\n></span>\n</span>\n              `,\n              name: 'user',\n              props: {\n                /**\r\n                 * The source object\r\n                 * @prop {Object} source\r\n                 * @memberof user\r\n                 */\n                source: {\n                  type: Object\n                }\n              },\n              methods: {\n                /**\r\n                 * The called method on user selecting\r\n                 * @method select\r\n                 * @memberof user\r\n                 * @fires closest\r\n                 * @fires getPopup\r\n                 */\n                select() {\n                  this.closest('bbn-tree').$parent.source.onSelect(this.source.value);\n                  this.getPopup().close();\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    /**\r\n     * The interface to create a new group\r\n     * @component newGroup\r\n     */\n    newGroup: {\n      template: `\n<bbn-form :validation=\"validation\"\n        :source=\"chat\"\n        :action=\"cp.url + '/actions/chat/group'\"\n>\n<component :is=\"cp.$options.components.info\"\n            :info=\"{\n              title: '',\n              creator: cp.userId\n            }\"\n            :participants=\"chat.participants\"\n            :admins=\"chat.admins\"\n            :user-id=\"cp.userId\"\n            :users=\"cp.users\"\n            @titlechanged=\"title => chat.title = title\"\n            :titleVisible=\"true\"\n></component>\n</bbn-form>\n      `,\n      name: 'newGroup',\n      data() {\n        return {\n          /**\r\n           * The main chat component\r\n           * @data {bbnCp} cp\r\n           * @memberof newGroup\r\n           */\n          cp,\n          /**\r\n           * The chat info\r\n           * @data {Object} chat\r\n           */\n          chat: {\n            title: '',\n            participants: [cp.userId],\n            admins: [cp.userId]\n          }\n        };\n      },\n      methods: {\n        /**\r\n         * The called method on form validation\r\n         * @method validation\r\n         * @memberof newGroup\r\n         * @param {Object} d\r\n         * @fires alert\r\n         * @return {Boolean}\r\n         */\n        validation(d) {\n          if (d.participants.length < 3) {\n            this.alert(bbn._('Two or more participants are required'));\n            return false;\n          }\n          if (!d.title) {\n            this.alert('The title is required');\n            return false;\n          }\n          return true;\n        }\n      }\n    }\n  }\n};\n\n\nlet cpLang = {};\nif (bbn.env.lang) {\n  try {\n    const lang = bbn.env.lang || 'en';\n    cpLang = await __webpack_require__(\"./src/components/chat/_i18n lazy recursive ^\\\\.\\\\/chat\\\\..*\\\\.lang$\")(`./chat.${lang}.lang`);\n    if (cpLang.default) {\n      cpLang = cpLang.default;\n    }\n  } catch (err) {}\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  name: 'bbn-chat',\n  definition: cpDef,\n  template: _chat_html__WEBPACK_IMPORTED_MODULE_0__[\"default\"],\n  style: _chat_less__WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n  lang: cpLang\n});\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://@bbn/bbn-cp/./src/components/chat/chat.js?");

/***/ })

}]);