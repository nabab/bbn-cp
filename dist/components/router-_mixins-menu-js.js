"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_bbn_bbn_cp"] = self["webpackChunk_bbn_bbn_cp"] || []).push([["components/router-_mixins-menu-js"],{

/***/ "./src/components/router/_mixins/menu.js":
/*!***********************************************!*\
  !*** ./src/components/router/_mixins/menu.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  methods: {\n    /**\n     * @method getMenuFn\n     * @param {Number} idx\n     * @fires getSubRouter\n     * @fires getContainer\n     * @fires reload\n     * @return {Array|Boolean}\n     */\n    getMenuFn(idx) {\n      if (!this.nav || !this.views[idx] || this.views[idx].menu === false) {\n        return [];\n      }\n      let items = [];\n      let tmp = ((bbn.fn.isFunction(this.views[idx].menu) ? this.views[idx].menu() : this.views[idx].menu) || []).slice();\n      let others = false;\n      let container = this.getContainer(idx);\n      bbn.fn.each(this.views, (a, i) => {\n        if (i !== idx && !a.fixed) {\n          others = true;\n          return false;\n        }\n      });\n      if (!this.views[idx].help) {\n        let sub = this.getSubRouter(idx);\n        if (sub && sub.views && sub.views.length) {\n          let helps = [];\n          sub.views.forEach(a => {\n            if (a.help) {\n              helps.push({\n                url: sub.fullBaseURL + a.url,\n                content: a.help,\n                title: a.title || a.url,\n                anchor: bbn.fn.randomString(15, 20).toLowerCase()\n              });\n            }\n          });\n          if (helps.length === 1) {\n            this.views[idx].help = helps[0].content;\n          } else if (helps.length) {\n            this.views[idx].help = '';\n            let slide1 = '';\n            helps.forEach(a => {\n              slide1 += '<h1><a href=\"#' + a.anchor + '\">' + a.title + '</a></h1>\\n';\n              this.views[idx].help += '---slide---' + '\\n<a name=\"' + a.anchor + '\">\\n' + a.content;\n            });\n            this.views[idx].help = slide1 + this.views[idx].help;\n          }\n        }\n      }\n      if (this.views[idx].help) {\n        items.push({\n          text: bbn._(\"Help\"),\n          key: \"help\",\n          icon: \"nf nf-mdi-help_circle_outline\",\n          action: () => {\n            let view = this.getContainer(idx),\n              span = document.createElement('span');\n            span.innerHTML = this.views[idx].title;\n            let title = span.innerText;\n            if (!title && span.querySelector(\"[title]\").length) {\n              title = span.querySelector(\"[title]\").getAttribute(\"title\");\n            }\n            view.getPopup({\n              scrollable: false,\n              component: {\n                props: ['source'],\n                template: `\n                  <bbn-slideshow :source=\"source.content\"\n                                class=\"bbn-bg-webblue bbn-white\"\n                                :full-slide=\"true\"\n                                separator=\"---slide---\"></bbn-slideshow>`\n              },\n              source: {\n                content: this.views[idx].help\n              },\n              title: '<i class=\"bbn-large nf nf-mdi-help_circle_outline\"> </i> <span class=\"bbn-iblock\">' + title + '</span>',\n              width: '90%',\n              height: '90%'\n            });\n          }\n        });\n      }\n      if (this.views[idx].load && !this.views[idx].component) {\n        items.push({\n          text: bbn._(\"Reload\"),\n          key: \"reload\",\n          icon: \"nf nf-mdi-sync\",\n          action: () => {\n            this.reload(idx);\n          }\n        });\n      }\n      if (container && container.fullScreen) {\n        items.push({\n          text: bbn._(\"Exit full screen\"),\n          key: \"reduce\",\n          icon: \"nf nf-mdi-arrow_collapse\",\n          action: () => {\n            container.fullScreen = false;\n          }\n        });\n      } else if (container && !container.isPane) {\n        items.push({\n          text: bbn._(\"Enlarge\"),\n          key: \"enlarge\",\n          icon: \"nf nf-mdi-arrow_expand_all\",\n          action: () => {\n            container.fullScreen = true;\n          }\n        });\n      }\n      if (tmp && tmp.length) {\n        bbn.fn.each(tmp, (a, i) => {\n          items.push(a);\n        });\n      }\n      if (this.views[idx].icon && this.views[idx].title && !this.isBreadcrumb && !this.isVisual) {\n        items.push({\n          text: this.views[idx].notext ? bbn._(\"Show text\") : bbn._(\"Show only icon\"),\n          key: \"notext\",\n          icon: this.views[idx].notext ? \"nf nf-fa-font\" : \"nf nf-fa-font_awesome\",\n          action: () => {\n            this.$set(this.views[idx], 'notext', !this.views[idx].notext);\n          }\n        });\n      }\n\n      // Adding a shortcut\n      if (window.appui) {\n        items.push({\n          text: bbn._(\"Create a shortcut\"),\n          key: \"shortcut\",\n          icon: \"nf nf-fa-link\",\n          action: () => {\n            this.$emit('shortcut', {\n              text: this.views[idx].title,\n              icon: this.views[idx].icon || 'nf nf-fa-link',\n              url: this.getFullBaseURL() + this.views[idx].url\n            });\n          }\n        });\n      }\n      if (container) {\n        items.push({\n          text: bbn._(\"Copy content text\"),\n          icon: \"nf nf-fa-copy\",\n          key: \"text_copy\",\n          action: () => {\n            let scroll = container.getRef('scroll');\n            let ok = false;\n            if (scroll) {\n              let scrollContent = scroll.getRef('scrollContent');\n              if (scrollContent) {\n                bbn.fn.copy(scrollContent.innerText);\n                ok = true;\n              }\n            }\n            if (ok) {\n              appui.success(bbn._(\"Copied!\"));\n            } else {\n              appui.error(bbn._(\"Not copied!\"));\n            }\n          }\n        });\n        items.push({\n          text: bbn._(\"Copy content HTML\"),\n          icon: \"nf nf-fa-html5\",\n          key: \"html_copy\",\n          action: () => {\n            let scroll = container.getRef('scroll');\n            let ok = false;\n            if (scroll) {\n              let scrollContent = scroll.getRef('scrollContent');\n              if (scrollContent) {\n                bbn.fn.copy(scrollContent.innerHTML);\n                ok = true;\n              }\n            }\n            if (ok) {\n              appui.success(bbn._(\"Copied!\"));\n            } else {\n              appui.error(bbn._(\"Not copied!\"));\n            }\n          }\n        });\n        items.push({\n          text: bbn._(\"Screenshot\"),\n          icon: \"nf nf-mdi-image_album\",\n          key: \"screenshot\",\n          items: [{\n            text: bbn._(\"Download\"),\n            key: \"screenshot_dl\",\n            icon: \"nf nf-mdi-arrow_expand_all\",\n            action: () => {\n              container.takeScreenshot().then(canvas => {\n                if (canvas) {\n                  bbn.fn.downloadContent(bbn.fn.replaceAll('/', '-', container.getFullCurrentURL() + '_' + bbn.fn.dateSQL(undefined, true) + '.png'), canvas);\n                }\n              });\n            }\n          }, {\n            text: bbn._(\"Copy\"),\n            key: \"screenshot_copy\",\n            icon: \"nf nf-mdi-image_multiple\",\n            action: () => {\n              container.takeScreenshot(0.5).then(canvas => {\n                if (canvas) {\n                  canvas.toBlob(blob => {\n                    bbn.fn.copy(blob).then(() => {\n                      appui.success();\n                    });\n                  });\n                }\n              });\n            }\n          }, {\n            text: bbn._(\"Copy full size\"),\n            key: \"screenshot_copy\",\n            icon: \"nf nf-mdi-image_multiple\",\n            action: () => {\n              container.takeScreenshot(1).then(canvas => {\n                if (canvas) {\n                  canvas.toBlob(blob => {\n                    bbn.fn.copy(blob).then(() => {\n                      appui.success();\n                    });\n                  });\n                }\n              });\n            }\n          }]\n        });\n      }\n      if (!this.views[idx].fixed && !this.views[idx].pane) {\n        if (this.isBreadcrumb) {\n          items.push({\n            text: bbn._(\"Close\"),\n            key: \"close\",\n            icon: \"nf nf-mdi-close\",\n            action: () => {\n              this.close(idx);\n            }\n          });\n        } else {\n          if (!this.views[idx].pinned) {\n            items.push({\n              text: bbn._(\"Pin\"),\n              key: \"pin\",\n              icon: \"nf nf-mdi-pin\",\n              action: () => {\n                this.pin(idx);\n              }\n            });\n            items.push({\n              text: bbn._(\"Close\"),\n              key: \"close\",\n              icon: \"nf nf-mdi-close\",\n              action: () => {\n                this.close(idx);\n              }\n            });\n          } else {\n            items.push({\n              text: bbn._(\"Unpin\"),\n              key: \"pin\",\n              icon: \"nf nf-mdi-pin_off\",\n              action: () => {\n                this.unpin(idx);\n              }\n            });\n          }\n        }\n      }\n      if (others && !this.views[idx].pane) {\n        items.push({\n          text: bbn._(\"Close Others\"),\n          key: \"close_others\",\n          icon: \"nf nf-mdi-close_circle_outline\",\n          action: () => {\n            this.closeAllBut(idx);\n          }\n        });\n        if (!this.isVisual) {\n          let directions = [];\n          if (idx) {\n            if (idx > 1) {\n              directions.push({\n                text: bbn._(\"First\"),\n                key: \"move_first\",\n                icon: \"nf nf-mdi-close_circle_outline\",\n                action: () => {\n                  this.move(idx, 0);\n                }\n              });\n            }\n            directions.push({\n              text: bbn._(\"Before\"),\n              key: \"move_before\",\n              icon: \"nf nf-mdi-close_circle_outline\",\n              action: () => {\n                this.move(idx, idx - 1);\n              }\n            });\n          }\n          if (idx < this.views.length - 1) {\n            directions.push({\n              text: bbn._(\"After\"),\n              key: \"move_after\",\n              icon: \"nf nf-mdi-close_circle_outline\",\n              action: () => {\n                this.move(idx, idx + 1);\n              }\n            });\n            if (idx < this.views.length - 2) {\n              directions.push({\n                text: bbn._(\"Last\"),\n                key: \"move_last\",\n                icon: \"nf nf-mdi-close_circle_outline\",\n                action: () => {\n                  this.move(idx, this.views.length - 1);\n                }\n              });\n            }\n          }\n          if (directions.length) {\n            if (directions.length === 1) {\n              directions[0].text = bbn._(\"Switch position\");\n              items.push(directions[0]);\n            } else {\n              items.push({\n                text: bbn._(\"Move\"),\n                key: \"move\",\n                icon: \"nf nf-mdi-close_circle_outline\",\n                items: directions\n              });\n            }\n          }\n        }\n      }\n      if (container && this.splittable) {\n        if (container.isPane) {\n          items.push({\n            text: bbn._(\"Remove from pane\"),\n            key: \"unpane\",\n            icon: \"nf nf-mdi-window_restore\",\n            action: () => {\n              this.removeFromPane(idx);\n            }\n          });\n        } else {\n          items.push({\n            text: bbn._(\"Show in a new pane\"),\n            key: \"split\",\n            icon: \"nf nf-mdi-format_horizontal_align_right\",\n            action: () => {\n              this.addToPane(idx);\n            }\n          });\n          if (this.currentPanes.length) {\n            let tmp = {\n              text: bbn._(\"Show in pane\"),\n              key: \"panes\",\n              icon: \"nf nf-mdi-checkbox_multiple_blank_outline\",\n              items: []\n            };\n            bbn.fn.each(this.currentPanes, (a, i) => {\n              tmp.items.push({\n                text: 'Pane <div class=\"bbn-badge\">' + (i + 1) + '</div>',\n                key: \"pane\" + (i + 1),\n                action: () => {\n                  this.addToPane(idx, a.id);\n                }\n              });\n            });\n            items.push(tmp);\n          }\n        }\n      }\n      if (others && !this.views[idx].fixed && !this.views[idx].pane) {\n        items.push({\n          text: bbn._(\"Close All\"),\n          key: \"close_all\",\n          icon: \"nf nf-mdi-close_circle\",\n          action: () => {\n            this.closeAll();\n          }\n        });\n      }\n      if (!this.views[idx].pane) {\n        items.push({\n          text: bbn._(\"Configuration\"),\n          key: \"config\",\n          icon: \"nf nf-fa-cogs\",\n          action: () => {\n            this.showRouterCfg = true;\n          }\n        });\n      }\n      let menu = bbn.fn.isArray(this.menu) ? this.menu : this.menu(this.views[idx], this);\n      if (menu.length) {\n        bbn.fn.each(menu, a => {\n          items.push(a);\n        });\n      }\n      return items;\n    }\n  }\n});\n\n//# sourceURL=webpack://@bbn/bbn-cp/./src/components/router/_mixins/menu.js?");

/***/ })

}]);