"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_bbn_bbn_cp"] = self["webpackChunk_bbn_bbn_cp"] || []).push([["components/router-_panes-js"],{

/***/ "./src/components/router/_panes.js":
/*!*****************************************!*\
  !*** ./src/components/router/_panes.js ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addPane: () => (/* binding */ addPane),\n/* harmony export */   addToPane: () => (/* binding */ addToPane),\n/* harmony export */   getPane: () => (/* binding */ getPane),\n/* harmony export */   removeFromPane: () => (/* binding */ removeFromPane),\n/* harmony export */   removePane: () => (/* binding */ removePane),\n/* harmony export */   selectPaneTab: () => (/* binding */ selectPaneTab)\n/* harmony export */ });\nfunction getPane(obj) {\n  if (!obj) {\n    return false;\n  }\n  if (this.isVisual) {\n    return obj.view.pane || false;\n  }\n  return obj.pane || false;\n}\nfunction addPane(paneId) {\n  if (this.splittable) {\n    if (!paneId) {\n      paneId = bbn.fn.randomString().toLowerCase();\n    }\n    if (!bbn.fn.getRow(this.currentPanes, {\n      id: paneId\n    })) {\n      this.currentPanes.push({\n        id: paneId,\n        tabs: [],\n        selected: -1\n      });\n    }\n  }\n  return paneId;\n}\nfunction selectPaneTab(pane) {\n  let view = pane.tabs[pane.selected];\n  if (view) {\n    view.last = bbn.fn.timestamp();\n  }\n}\nfunction removePane(paneId) {\n  if (this.splittable && this.currentPanes) {\n    let paneIndex = bbn.fn.search(this.currentPanes, {\n      id: paneId\n    });\n    let pane = this.currentPanes[paneIndex];\n    if (!pane) {\n      throw new Error(bbn._(\"Impossible to find the pane with ID %s\", paneId));\n    }\n    if (pane.tabs.length) {\n      throw new Error(bbn._(\"Impossible to remove the pane with ID %s as it has still containers inside\", paneId));\n    }\n    this.currentPanes.splice(paneIndex, 1);\n    if (this.routed) {\n      this.$nextTick(() => {\n        this.currentPanes.length ? this.getRef('splitter').init() : this.getRef('topSplitter').init();\n      });\n    }\n  }\n}\nfunction addToPane(containerIdx, paneId) {\n  let view = this.views[containerIdx];\n  if (!view) {\n    throw new Error(bbn._(\"Impossible to find the view with index\") + ' ' + containerIdx);\n  }\n  if (view.dirty) {\n    this.alert(bbn._(\"Save your changes or discard them before moving the container\"));\n    return;\n  }\n  let pane = bbn.fn.getRow(this.currentPanes, {\n    id: paneId\n  });\n  if (!pane) {\n    paneId = this.addPane(paneId);\n    pane = bbn.fn.getRow(this.currentPanes, {\n      id: paneId\n    });\n  }\n  this.$set(this.views[containerIdx], \"pane\", paneId);\n  pane.tabs.push(view);\n  //this.$forceUpdate();\n  if (containerIdx === this.selected) {\n    this.selectClosest(containerIdx);\n  }\n  pane.selected = pane.tabs.length - 1;\n}\nfunction removeFromPane(containerIdx) {\n  let view = this.views[containerIdx];\n  if (view) {\n    if (view.dirty) {\n      this.alert(bbn._(\"Save your changes or discard them before moving the container\"));\n      return;\n    }\n    let paneId = view.pane;\n    if (paneId) {\n      let pane = bbn.fn.getRow(this.currentPanes, {\n        id: paneId\n      });\n      if (pane && pane.tabs) {\n        let idx = bbn.fn.search(pane.tabs, {\n          idx: containerIdx\n        });\n        if (idx > -1) {\n          this.selected = containerIdx;\n          view.pane = false;\n          this.$nextTick(() => {\n            pane.tabs.splice(idx, 1);\n            if (!pane.tabs.length) {\n              this.removePane(paneId);\n            } else if (pane.selected >= idx) {\n              pane.selected--;\n              this.getRef('pane' + pane.id).onResize(true);\n            }\n          });\n        }\n      }\n    }\n  }\n}\n\n\n//# sourceURL=webpack://@bbn/bbn-cp/./src/components/router/_panes.js?");

/***/ })

}]);