"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_bbn_bbn_cp"] = self["webpackChunk_bbn_bbn_cp"] || []).push([["components/router-_mixins-2move-js"],{

/***/ "./src/components/router/_mixins/2move.js":
/*!************************************************!*\
  !*** ./src/components/router/_mixins/2move.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  methods: {\n    /**\n     * @method load\n     * @param {String} url\n     * @param {Boolean} force\n     * @fires search\n     * @fires add\n     * @fires parseURL\n     * @fires callRouter\n     * @fires navigate\n     * @fires activate\n     * @emit update\n    */\n    async load(url, force, index) {\n      if (url) {\n        bbn.fn.log(\"LOAD URL \" + url);\n        this.isLoading = true;\n        let finalURL = this.fullBaseURL + url;\n        let idx = this.search(url);\n        let toAdd = false;\n        let view;\n        if (idx !== false) {\n          bbn.fn.log(\"INDEX RETRIEVED BEFORE LOAD: \" + idx.toString(), JSON.stringify(this.views[idx], null, 2));\n          if (this.views[idx].loading || !force && !this.views[idx].load) {\n            return;\n          }\n          view = this.views[idx];\n          //bbn.fn.log(finalURL, idx, JSON.stringify(view, null, 2), force, index);\n          //alert(\"STOP\");\n          if (force) {\n            let kept = {\n              loading: true,\n              loaded: false,\n              load: true,\n              url: view.url,\n              current: url,\n              selected: true,\n              cached: view.cached !== undefined ? view.cached : this.single || !this.nav ? false : true,\n              pane: view.pane,\n              title: view.title,\n              fixed: view.fixed,\n              pinned: view.pinned,\n              index: idx,\n              real: view.real || false,\n              last: bbn.fn.timestamp()\n            };\n            if (view.icon) {\n              kept.icon = view.icon;\n            }\n            if (view.bcolor) {\n              kept.bcolor = view.bcolor;\n            }\n            if (view.fcolor) {\n              kept.fcolor = view.fcolor;\n            }\n            bbn.fn.iterate(bbn.fn.extend(this.getDefaultView(), kept), (a, n) => {\n              if (view[n] !== a) {\n                this.$set(view, n, a);\n              }\n            });\n            if (this.urls[url]) {\n              this.urls[url].isLoaded = false;\n              this.urls[url].dirty = false;\n            }\n          }\n          if (index !== undefined && idx !== index) {\n            this.move(idx, index);\n            idx = index;\n          }\n        } else {\n          toAdd = true;\n          idx = index === undefined ? this.views.length : index;\n        }\n        if (this.single) {\n          idx = 0;\n        }\n        if (toAdd) {\n          bbn.fn.log(\"ADDING ON LOAD \" + url);\n          await this.add({\n            url: url,\n            title: view?.title ? view.title : bbn._('Loading'),\n            load: true,\n            loading: true,\n            real: view?.real || false,\n            pane: false,\n            scrollable: !this.single,\n            current: url,\n            error: false,\n            loaded: false,\n            hidden: false,\n            last: bbn.fn.timestamp()\n          }, idx);\n          view = this.views[this.search(url)];\n        } else if (!this.views[idx].loading) {\n          this.views[idx].loading = true;\n        }\n        if (!this.views[idx].pane) {\n          this.currentURL = this.parseURL(url);\n        }\n        let portal = this.getRef('portal-' + url);\n        if (portal) {\n          await portal.$forceUpdate();\n        }\n        this.$emit('update', this.views);\n        this.$emit(\"load\", finalURL);\n        let dataObj = this.postBaseUrl ? {\n          _bbn_baseURL: this.fullBaseURL\n        } : {};\n        let response;\n        try {\n          response = await this.post(finalURL, dataObj);\n        }\n        // Abort\n        catch (e) {\n          bbn.fn.warning(\"ABORTED\");\n          this.isLoading = false;\n          let idx = this.search(this.parseURL(finalURL));\n          if (idx !== false) {\n            let url = this.views[idx].url;\n            if (this.urls[url]) {\n              this.callRouter(finalURL, url);\n              this.$nextTick(() => {\n                this.close(idx);\n              });\n              return;\n            }\n          }\n        }\n        if (response?.status === 200) {\n          const d = response.data;\n          let callRealInit = true;\n          this.isLoading = false;\n          //this.remove(url);\n          if (d.url) {\n            d.url = this.parseURL(d.url);\n          }\n          if (!d.url) {\n            d.url = url;\n          }\n          //bbn.fn.warning(\"URLS\", url, d.url);\n          if (url.indexOf(d.url) === 0) {\n            d.current = url;\n            //bbn.fn.warning(\"CURRENT DEFINED AS \" + d.current);\n          } else {\n            bbn.fn.warning(url + ' != ' + d.url);\n            let searchIdx = this.search(url);\n            if (searchIdx !== false) {\n              idx = searchIdx;\n              bbn.fn.log(\"REMOVED\");\n              this.remove(searchIdx, true);\n            }\n          }\n          if (d.data && bbn.fn.numProperties(d.data)) {\n            d.source = d.data;\n            delete d.data;\n          }\n          if (!d.title || d.title === bbn._('Loading')) {\n            if (view && view.title) {\n              d.title = view.title;\n            } else {\n              let title = bbn._('Untitled');\n              let num = 0;\n              while (bbn.fn.search(this.views, {\n                title: title\n              }) > -1) {\n                num++;\n                title = bbn._('Untitled') + ' ' + num;\n              }\n              d.title = title;\n            }\n          }\n          if (!d.current && d.url) {\n            d.current = d.url;\n          }\n          if (d.url !== d.current && this.urls[d.current]) {\n            let currentIndex = this.urls[d.current].currentIndex;\n            //bbn.fn.warning(\"DELETING VIEW CASE.... \" + d.url + ' / ' + d.current + ' ' + currentIndex);\n            //bbn.fn.log([d.url, this.urls[d.current], this.urls[d.url], Object.keys(this.urls), bbn.fn.search(this.views, {idx: this.urls[d.current].idx})]);\n            this.remove(currentIndex, true).then(() => {\n              const onRegister = url => {\n                //bbn.fn.log([\"REGISTERED\", url]);\n                if (url === d.url) {\n                  this.$off('registered', onRegister);\n                  let view = bbn.fn.getRow(this.views, {\n                    url: url\n                  });\n                  if (this.selected === view.idx || view.pane) {\n                    this.realInit(url);\n                  }\n                }\n              };\n              this.$on('registered', onRegister);\n              let o = bbn.fn.extend(view || bbn.fn.createObject(), d, {\n                loading: false,\n                load: true,\n                real: view?.real || false,\n                loaded: true\n              });\n              //bbn.fn.log([\"BEFORE\", this.views.length, Object.keys(this.urls)]);\n              this.add(o, currentIndex).then(() => {\n                //bbn.fn.log(this.search(o.url), o);\n                let searchIndex = this.search(o.url);\n                //bbn.fn.log(\"Looking for \" + o.url);\n                if (searchIndex !== false) {\n                  //this.activateIndex(searchIndex);\n                  this.selected = searchIndex;\n                }\n              });\n            });\n            //callRealInit = false;\n            /*\n            */\n          } else {\n            this.$forceUpdate().then(() => {\n              let o = bbn.fn.extend(view || bbn.fn.createObject(), d, {\n                loading: false,\n                load: true,\n                real: view?.real || false,\n                loaded: true\n              });\n              let searchIndex = this.search(o.url);\n              //bbn.fn.log(\"Looking for \" + o.url);\n              if (searchIndex !== false && this.urls[this.views[searchIndex].url]) {\n                //this.remove(searchIndex);\n                bbn.fn.warning(\"FOUND AND NOT REMOVED \" + searchIndex);\n                idx = searchIndex;\n                this.urls[this.views[idx].url].isLoaded = true;\n                this.urls[this.views[idx].url].dirty = false;\n                this.urls[this.views[idx].url].ready = false;\n                this.urls[this.views[idx].url].init();\n              } else {\n                //bbn.fn.warning(\"ADDEDD \" + idx);\n                //bbn.fn.log(\"ADDING AFTER LOAD\");\n                this.add(o, idx);\n              }\n              if (o.title && !o.pane) {\n                this.currentTitle = o.title;\n              }\n              //this.$forceUpdate();\n              this.$nextTick(() => {\n                if (callRealInit) {\n                  this.realInit(d.url);\n                }\n              });\n            });\n          }\n        } else {\n          this.isLoading = false;\n          let idx = this.search(this.parseURL(finalURL));\n          if (idx !== false) {\n            let url = this.views[idx].url;\n            if (this.urls[url]) {\n              this.urls[url].errorStatus = response?.status || 500;\n              this.urls[url].setTitle(bbn._(\"Error\"));\n              this.urls[url].setIcon(\"nf nf-fa-warning\");\n              if (this.selected === idx) {\n                await this.callRouter(finalURL, url);\n              }\n            }\n          }\n        }\n      }\n    },\n    realInit(url) {\n      //bbn.fn.log(\"REAL INIT\", url, this.urls, this.views)\n      if (this.urls[url]) {\n        this.urls[url].setLoaded(true);\n        // Otherwise the changes we just did on the props wont be taken into account at container level\n        this.urls[url].init();\n        //bbn.fn.log(\"callRouter\", this.urls[url], this.urls[url].currentView);\n        this.callRouter(this.urls[url].currentURL || url, url);\n        this.$emit('update', this.views);\n      } else {\n        //bbn.fn.log(url, this.views[0].loading, this.views[0].url, JSON.stringify(Object.keys(this.urls), null, 2));\n        //throw new Error(bbn._(\"Impossible to find the container for URL\") + ' ' + url);\n      }\n    },\n    checkLoaded(idx) {\n      return this.views[idx] &&\n      //!this.views[idx].real &&\n      this.views[idx].load && this.urls[this.views[idx].url] && this.urls[this.views[idx].url].isLoaded;\n    },\n    /**\n    * @method reload\n    * @param {Number} idx\n    * @fires route\n    */\n    async reload(idx, force) {\n      if (this.checkLoaded(idx)) {\n        let url = this.views[idx].current;\n        if (!force && !this.ignoreDirty && this.isDirty && this.views[idx].dirty) {\n          this.confirm(this.confirmLeave, () => {\n            if (this.checkLoaded(idx)) {\n              // Looking for dirty ones in registered forms of each container\n              let forms = this.urls[this.views[idx].url].forms;\n              if (Array.isArray(forms) && forms.length) {\n                bbn.fn.each(forms, (f, k) => {\n                  f.reset();\n                });\n              }\n              if (this.urls[this.views[idx].url] && this.urls[this.views[idx].url].popups && this.urls[this.views[idx].url].popups.length) {\n                this.urls[this.views[idx].url].popups.splice(0);\n              }\n              this.load(url, true, idx);\n            }\n          });\n        } else {\n          this.load(url, true, idx);\n        }\n      }\n    }\n  }\n});\n\n//# sourceURL=webpack://@bbn/bbn-cp/./src/components/router/_mixins/2move.js?");

/***/ })

}]);